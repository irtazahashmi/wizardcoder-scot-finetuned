{"task_id": "MBCPP/11", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove first and last occurrence of a given character from the string.\n */\nstring removeOcc(string s, string ch) {\n}\n\n// The pseudo code of the above function:\n// Input: s: str, ch: str\n// Output: res: str\n// 1: if ch in s then\n// 2:    res <- s.replace(ch, '', 1)\n// 3:    res <- res[::-1].replace(ch[::-1], '', 1)[::-1]\n// 4: return res", "entry_point": "removeOcc", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeOcc(string(\"hello\"), string(\"l\"));\n    if (!(compare(x0, string(\"heo\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeOcc(string(\"abcda\"), string(\"a\"));\n    if (!(compare(x1, string(\"bcd\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeOcc(string(\"PHP\"), string(\"P\"));\n    if (!(compare(x2, string(\"H\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to remove first and last occurrence of a given character from the string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/12", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given matrix in ascending order according to the sum of its rows.\n */\nvector<vector<int>> sortMatrix(vector<vector<int>> m) {\n}\n\n// The pseudo code of the above function:\n// Input: matrix: list of lists\n// Output: sorted_matrix: list of lists\n// 1: row_sum <- []\n// 2: for i in range(len(matrix)) do\n// 3:    row_sum.append((i, sum(matrix[i])))\n// 4: sorted_row_sum <- sorted(row_sum, key=lambda x: x[1])\n// 5: sorted_matrix <- []\n// 6: for i in range(len(sorted_row_sum)) do\n// 7:    sorted_matrix.append(matrix[sorted_row_sum[i][0]])\n// 8: return sorted_matrix", "entry_point": "sortMatrix", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = sortMatrix(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}});\n    if (!(compare(x0, {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = sortMatrix(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}});\n    if (!(compare(x1, {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = sortMatrix(vector<vector<int>>{{5, 8, 9}, {6, 4, 3}, {2, 1, 4}});\n    if (!(compare(x2, {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/14", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the volume of a triangular prism.\n */\nint findVolume(int l, int b, int h) {\n}\n\n// The pseudo code of the above function:\n// Input: l: int, b: int, h: int\n// Output: volume: int\n// 1: volume <- (l * b * h) / 2\n// 2: return volume", "entry_point": "findVolume", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findVolume(10, 8, 6);\n    if (!(compare(x0, 240))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findVolume(3, 2, 2);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findVolume(1, 2, 1);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the volume of a triangular prism.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/15", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split a string at lowercase letters.\n */\nvector<string> splitLowerstring(string text) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: result: list of str\n// 1: result <- empty list\n// 2: start <- 0\n// 3: for i in range(len(text)) do\n// 4:    if text[i].islower() then\n// 5:        result.append(text[start:i])\n// 6:        start <- i\n// 7: result.append(text[start:])\n// 8: return result", "entry_point": "splitLowerstring", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = splitLowerstring(string(\"AbCd\"));\n    if (!(compare(x0, {string(\"bC\"), string(\"d\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = splitLowerstring(string(\"Python\"));\n    if (!(compare(x1, {string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = splitLowerstring(string(\"Programming\"));\n    if (!(compare(x2, {string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\"), string(\"m\"), string(\"i\"), string(\"n\"), string(\"g\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to split a string at lowercase letters.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/16", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of lowercase letters joined with an underscore.\n */\nstring textLowercaseUnderscore(string text) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: result: str\n// 1: result <- ''\n// 2: for i in range(len(text)-1) do\n// 3:    if text[i].islower() and text[i+1] == '_' then\n// 4:        j <- i+2\n// 5:        while j < len(text) and text[j].islower() do\n// 6:            j <- j+1\n// 7:        result <- result + text[i:j] + ', '\n// 8: return result", "entry_point": "textLowercaseUnderscore", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textLowercaseUnderscore(string(\"aab_cbbbc\"));\n    if (!(compare(x0, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textLowercaseUnderscore(string(\"aab_Abbbc\"));\n    if (!(compare(x1, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textLowercaseUnderscore(string(\"Aaab_abbbc\"));\n    if (!(compare(x2, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find sequences of lowercase letters joined with an underscore.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/17", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a square.\n */\nint squarePerimeter(int a) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int\n// Output: perimeter: int\n// 1: perimeter <- 4 * a\n// 2: return perimeter", "entry_point": "squarePerimeter", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = squarePerimeter(10);\n    if (!(compare(x0, 40))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = squarePerimeter(5);\n    if (!(compare(x1, 20))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = squarePerimeter(4);\n    if (!(compare(x2, 16))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the perimeter of a square.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/18", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove characters from the first string which are present in the second string.\n */\nstring removeDirtyChars(string str, string secondString) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str, second_str: str\n// Output: res: str\n// 1: res <- \"\"\n// 2: for each ch in str do\n// 3:    if ch not in second_str then\n// 4:        res <- res + ch\n// 5: return res", "entry_point": "removeDirtyChars", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeDirtyChars(string(\"probasscurve\"), string(\"pros\"));\n    if (!(compare(x0, string(\"bacuve\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeDirtyChars(string(\"digitalindia\"), string(\"talent\"));\n    if (!(compare(x1, string(\"digiidi\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeDirtyChars(string(\"exoticmiles\"), string(\"toxic\"));\n    if (!(compare(x2, string(\"emles\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove characters from the first string which are present in the second string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/19", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether a given array of integers contains any duplicate element.\n */\nbool testDuplicate(vector<int> arraynums) {\n}\n\n// The pseudo code of the above function:\n// Input: array_nums: list of integers\n// Output: True or False\n// 1: for i in range(len(array_nums)) do\n// 2:    for j in range(i+1, len(array_nums)) do\n// 3:        if array_nums[i] == array_nums[j] then\n// 4:            return True\n// 5: return False", "entry_point": "testDuplicate", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = testDuplicate(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = testDuplicate(vector<int>{1, 2, 3, 4, 4});\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = testDuplicate(vector<int>{1, 1, 2, 2, 3, 3, 4, 4, 5});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find whether a given array of integers contains any duplicate element.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/20", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given number is woodball or not.\n */\nbool isWoodall(int x) {\n}\n\n// The pseudo code of the above function:\n// Input: x: int\n// Output: True or False\n// 1: n <- 1\n// 2: while n * (2^n - 1) <= x do\n// 3:    if n * (2^n - 1) == x then\n// 4:        return True\n// 5:    n <- n + 1\n// 6: return False", "entry_point": "isWoodall", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isWoodall(383);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isWoodall(254);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isWoodall(200);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if the given number is woodball or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/21", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find m number of multiples of n.\n */\nvector<int> multiplesOfNum(int m, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: m: int, n: int\n// Output: multiples: list of ints\n// 1: multiples <- []\n// 2: for i <- 1 to m do\n// 3:    multiples.append(n*i)\n// 4: return multiples", "entry_point": "multiplesOfNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = multiplesOfNum(4, 3);\n    if (!(compare(x0, {3, 6, 9, 12}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = multiplesOfNum(2, 5);\n    if (!(compare(x1, {5, 10}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = multiplesOfNum(9, 2);\n    if (!(compare(x2, {2, 4, 6, 8, 10, 12, 14, 16, 18}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find m number of multiples of n.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/22", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the first duplicate element in a given array of integers.\n */\nint findFirstDuplicate(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of ints\n// Output: int or None\n// 1: seen <- set()\n// 2: for num in nums do\n// 3:    if num in seen then\n// 4:        return num\n// 5:    seen.add(num)\n// 6: return None", "entry_point": "findFirstDuplicate", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findFirstDuplicate(vector<int>{1, 2, 3, 4, 4, 5});\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findFirstDuplicate(vector<int>{1, 2, 3, 4});\n    if (!(compare(x1, -1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findFirstDuplicate(vector<int>{1, 1, 2, 3, 3, 2, 2});\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the first duplicate element in a given array of integers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/23", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum sum of elements of list in a list of lists.\n */\nint maximumSum(vector<vector<int>> list1) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of lists\n// Output: max_sum: int\n// 1: max_sum <- -inf\n// 2: for each lst in list1 do\n// 3:    sum <- 0\n// 4:    for each num in lst do\n// 5:        sum <- sum + num\n// 6:    if sum > max_sum then\n// 7:        max_sum <- sum\n// 8: return max_sum", "entry_point": "maximumSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maximumSum(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}});\n    if (!(compare(x0, 33))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maximumSum(vector<vector<int>>{{0, 1, 1}, {1, 1, 2}, {3, 2, 1}});\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maximumSum(vector<vector<int>>{{0, 1, 3}, {1, 2, 1}, {9, 8, 2}, {0, 1, 0}, {6, 4, 8}});\n    if (!(compare(x2, 19))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the maximum sum of elements of list in a list of lists.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/24", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n */\nint binaryToDecimal(int binary) {\n}\n\n// The pseudo code of the above function:\n// Input: binary: int\n// Output: decimal: int\n// 1: decimal <- 0\n// 2: power <- 0\n// 3: while binary > 0 do\n// 4:    remainder <- binary % 10\n// 5:    decimal <- decimal + remainder * 2^power\n// 6:    binary <- binary / 10\n// 7:    power <- power + 1\n// 8: return decimal", "entry_point": "binaryToDecimal", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = binaryToDecimal(100);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = binaryToDecimal(1011);\n    if (!(compare(x1, 11))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = binaryToDecimal(1101101);\n    if (!(compare(x2, 109))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert the given binary number to its decimal equivalent.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/25", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the product of non-repeated elements in a given array.\n */\nint findProduct(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, n: int\n// Output: product: int\n// 1: freq <- dictionary to store frequency of each element in arr\n// 2: for i in range(n) do\n// 3:    if arr[i] not in freq then\n// 4:        freq[arr[i]] <- 1\n// 5:    else:\n// 6:        freq[arr[i]] += 1\n// 7: product <- 1\n// 8: for key, val in freq.items() do\n// 9:    if val == 1 then\n// 10:       product *= key\n// 11: return product", "entry_point": "findProduct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findProduct(vector<int>{1, 1, 2, 3}, 4);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findProduct(vector<int>{1, 2, 3, 1, 1}, 5);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findProduct(vector<int>{1, 1, 4, 5, 6}, 5);\n    if (!(compare(x2, 120))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the product of non-repeated elements in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/26", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuple list has all k elements.\n */\nbool checkKElements(vector<vector<int>> testList, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of tuples, k: int\n// Output: True or False\n// 1: for each t in test_list do\n// 2:    if len(t) != k then\n// 3:        return False\n// 4: return True", "entry_point": "checkKElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkKElements(vector<vector<int>>{{4, 4}, {4, 4, 4}, {4, 4}, {4, 4, 4, 4}, {4}}, 4);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkKElements(vector<vector<int>>{{7, 7, 7}, {7, 7}}, 7);\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkKElements(vector<vector<int>>{{9, 9}, {9, 9, 9, 9}}, 7);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if the given tuple list has all k elements.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/27", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove all digits from a list of strings.\n */\nvector<string> remove(vector<string> list) {\n}\n\n// The pseudo code of the above function:\n// Input: list: list of str\n// Output: res: list of str\n// 1: res <- empty list\n// 2: for each str in list do\n// 3:    new_str <- empty str\n// 4:    for each ch in str do\n// 5:        if ch is not a digit then\n// 6:            new_str <- new_str + ch\n// 7:    append new_str to res\n// 8: return res", "entry_point": "remove", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = remove(vector<string>{string(\"4words\"), string(\"3letters\"), string(\"4digits\")});\n    if (!(compare(x0, {string(\"words\"), string(\"letters\"), string(\"digits\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = remove(vector<string>{string(\"28Jan\"), string(\"12Jan\"), string(\"11Jan\")});\n    if (!(compare(x1, {string(\"Jan\"), string(\"Jan\"), string(\"Jan\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = remove(vector<string>{string(\"wonder1\"), string(\"wonder2\"), string(\"wonder3\")});\n    if (!(compare(x2, {string(\"wonder\"), string(\"wonder\"), string(\"wonder\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to remove all digits from a list of strings.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/28", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find binomial co-efficient.\n */\nint binomialCoeff(int n, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int, k: int\n// Output: C: int\n// 1: if k > n then\n// 2:    return 0\n// 3: if k == 0 or k == n then\n// 4:    return 1\n// 5: C <- binomialCoeff(n-1, k-1) + binomialCoeff(n-1, k)\n// 6: return C", "entry_point": "binomialCoeff", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = binomialCoeff(5, 2);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = binomialCoeff(4, 3);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = binomialCoeff(3, 2);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find binomial co-efficient.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/29", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the element occurring odd number of times.\n */\nint getOddOccurrence(vector<int> arr, int arrSize) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, arrSize: int\n// Output: int\n// 1: res <- 0\n// 2: for i <- 0 to arrSize-1 do\n// 3:    res <- res XOR arr[i]\n// 4: return res", "entry_point": "getOddOccurrence", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getOddOccurrence(vector<int>{1, 2, 3, 1, 2, 3, 1}, 7);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getOddOccurrence(vector<int>{1, 2, 3, 2, 3, 1, 3}, 7);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getOddOccurrence(vector<int>{2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2}, 13);\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the element occurring odd number of times.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/30", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count all the substrings starting and ending with same characters.\n */\nint countSubstringWithEqualEnds(string s) {\n}\n\n// The pseudo code of the above function:\n// Input: s: str\n// Output: count: int\n// 1: count <- 0\n// 2: for i in range(len(s)) do\n// 3:    for j in range(i+1, len(s)) do\n// 4:        if s[i] == s[j] then\n// 5:            count <- count + 1\n// 6: return count", "entry_point": "countSubstringWithEqualEnds", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSubstringWithEqualEnds(string(\"abc\"));\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSubstringWithEqualEnds(string(\"abcda\"));\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSubstringWithEqualEnds(string(\"ab\"));\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count all the substrings starting and ending with same characters.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/31", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n */\nvector<int> func(vector<vector<int>> nums, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of sorted and distinct integers, k: int\n// Output: top_k: list of integers\n// 1: Initialize a heap queue\n// 2: for each list in nums do\n// 3:    Initialize a dictionary to count the frequency of each integer in the list\n// 4:    for each integer in the list do\n// 5:        Update the frequency count in the dictionary\n// 6:        If the frequency count is greater than k, remove the smallest element from the heap queue\n// 7: Add the dictionary to the heap queue\n// 8: Create a list to store the top k integers\n// 9: While k is greater than 0 and the heap queue is not empty do\n// 10:    Pop the dictionary with the highest count from the heap queue\n// 11:    Append the k most frequent integers from the dictionary to the top_k list\n// 12:    Decrement k by the number of integers added to the top_k list\n// 13: Return the top_k list", "entry_point": "func", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 3);\n    if (!(compare(x0, {5, 7, 1}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 1);\n    if (!(compare(x1, {1}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 5);\n    if (!(compare(x2, {6, 5, 7, 8, 1}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/32", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest prime factor of a given number.\n */\nint maxPrimeFactors(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: maxPrime: int\n// 1: maxPrime <- -1\n// 2: while n % 2 == 0 do\n// 3:    maxPrime <- 2\n// 4:    n <- n / 2\n// 5: for i <- 3 to sqrt(n) do\n// 6:    while n % i == 0 do\n// 7:        maxPrime <- i\n// 8:        n <- n / i\n// 9: if n > 2 then\n// 10:    maxPrime <- n\n// 11: return maxPrime", "entry_point": "maxPrimeFactors", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxPrimeFactors(15);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxPrimeFactors(6);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxPrimeFactors(2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the largest prime factor of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/33", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert a decimal number to binary number.\n */\nint decimalToBinary(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: binary_num: int\n// 1: binary_num <- 0\n// 2: i <- 1\n// 3: while n > 0 do\n// 4:    remainder <- n % 2\n// 5:    binary_num <- binary_num + remainder * i\n// 6:    i <- i * 10\n// 7:    n <- n / 2\n// 8: return binary_num", "entry_point": "decimalToBinary", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = decimalToBinary(10);\n    if (!(compare(x0, 1010))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = decimalToBinary(1);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = decimalToBinary(20);\n    if (!(compare(x2, 10100))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to convert a decimal number to binary number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/34", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the missing number in a sorted array.\n */\nint findMissing(vector<int> ar, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: ar: list of integers, n: int\n// Output: missing_num: int\n// 1: low <- 0, high <- n-1\n// 2: while low <= high do\n// 3:    mid <- (low+high)/2\n// 4:    if ar[mid]-ar[0] == mid then\n// 5:        low <- mid+1\n// 6:    else\n// 7:        high <- mid-1\n// 8: missing_num <- ar[0]+low\n// 9: return missing_num", "entry_point": "findMissing", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMissing(vector<int>{1, 2, 3, 5}, 4);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMissing(vector<int>{1, 3, 4, 5}, 4);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMissing(vector<int>{1, 2, 3, 5, 6, 7}, 5);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the missing number in a sorted array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/35", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th rectangular number.\n */\nint findRectNum(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: rect_num: int\n// 1: if n == 1 then\n// 2:    return 1\n// 3: rect_num <- 0\n// 4: for i <- 1 to n do\n// 5:    rect_num <- rect_num + i * (n-i+1)\n// 6: return rect_num", "entry_point": "findRectNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findRectNum(4);\n    if (!(compare(x0, 20))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findRectNum(5);\n    if (!(compare(x1, 30))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findRectNum(6);\n    if (!(compare(x2, 42))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the n-th rectangular number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/36", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the nth digit in the proper fraction of two given numbers.\n */\nint findNthDigit(int p, int q, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: p: int, q: int, n: int\n// Output: digit: int\n// 1: fraction <- p / q\n// 2: fractionStr <- to_string(fraction)\n// 3: if '.' not in fractionStr then\n// 4:    return None\n// 5: decimalPart <- fractionStr.split('.')[1]\n// 6: if n > len(decimalPart) then\n// 7:    return None\n// 8: digit <- decimalPart[n-1]\n// 9: return int(digit)", "entry_point": "findNthDigit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findNthDigit(1, 2, 1);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findNthDigit(3, 5, 1);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findNthDigit(5, 6, 5);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the nth digit in the proper fraction of two given numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/38", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the division of first even and odd number of a given list.\n */\nint divEvenOdd(vector<int> list1) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of int\n// Output: result: float\n// 1: even <- None\n// 2: odd <- None\n// 3: for i in list1 do\n// 4:    if i % 2 == 0 and even == None then\n// 5:        even <- i\n// 6:    elif i % 2 != 0 and odd == None then\n// 7:        odd <- i\n// 8:    if even != None and odd != None then\n// 9:        result <- even/odd\n// 10:       break\n// 11: return result", "entry_point": "divEvenOdd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = divEvenOdd(vector<int>{1, 3, 5, 7, 4, 1, 6, 8});\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = divEvenOdd(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = divEvenOdd(vector<int>{1, 5, 7, 9, 10});\n    if (!(compare(x2, 10))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the division of first even and odd number of a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/39", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n */\nstring rearangeString(string s) {\n}\n\n// The pseudo code of the above function:\n// Input: s: str\n// Output: str\n// 1: count <- Counter(s)\n// 2: most_common <- count.most_common()\n// 3: max_count <- most_common[0][1]\n// 4: if max_count > (len(s)+1)//2 then\n// 5:    return \"\"\n// 6: else:\n// 7:    res <- [None]*len(s)\n// 8:    i <- 0\n// 9:    for char, count in most_common do\n// 10:       while count > 0 and i < len(s) do\n// 11:           res[i] <- char\n// 12:           i <- i+2\n// 13:           count <- count-1\n// 14:       if count > 0 then\n// 15:           i <- 1\n// 16:           while count > 0 and i < len(s) do\n// 17:               if res[i] is None then\n// 18:                   res[i] <- char\n// 19:                   count <- count-1\n// 20:               i <- i+2\n// 21:   return \"\".join(res)", "entry_point": "rearangeString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = rearangeString(string(\"aab\"));\n    if (!(compare(x0, string(\"aba\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = rearangeString(string(\"aabb\"));\n    if (!(compare(x1, string(\"abab\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = rearangeString(string(\"abccdd\"));\n    if (!(compare(x2, string(\"cdabcd\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/40", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find frequency of the elements in a given list of lists using collections module.\n */\nunordered_map<int, int> freqElement(vector<vector<int>> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of lists\n// Output: freq: dictionary\n// 1: freq <- {}\n// 2: for lst in nums do\n// 3:    for num in lst do\n// 4:        freq[num] <- freq.get(num, 0) + 1\n// 5: return freq", "entry_point": "freqElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<int, int> x0 = freqElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}});\n    if (!(compare(x0, {{2, 3}, {1, 2}, {5, 2}, {3, 1}, {4, 1}, {6, 1}, {7, 1}, {9, 1}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<int, int> x1 = freqElement(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}});\n    if (!(compare(x1, {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<int, int> x2 = freqElement(vector<vector<int>>{{15, 20, 30, 40}, {80, 90, 100, 110}, {30, 30, 80, 90}});\n    if (!(compare(x2, {{30, 3}, {80, 2}, {90, 2}, {15, 1}, {20, 1}, {40, 1}, {100, 1}, {110, 1}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find frequency of the elements in a given list of lists using collections module.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/41", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter even numbers using lambda function.\n */\nvector<int> filterEvennumbers(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of integers\n// Output: even_nums: list of even integers\n// 1: even_nums <- filter(lambda x: x % 2 == 0, nums)\n// 2: return even_nums", "entry_point": "filterEvennumbers", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = filterEvennumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    if (!(compare(x0, {2, 4, 6, 8, 10}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = filterEvennumbers(vector<int>{10, 20, 45, 67, 84, 93});\n    if (!(compare(x1, {10, 20, 84}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = filterEvennumbers(vector<int>{5, 7, 9, 8, 6, 4, 3});\n    if (!(compare(x2, {8, 6, 4}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to filter even numbers using lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/42", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of repeated elements in a given array.\n */\nint findSum(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of int, n: int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for i in range(n) do\n// 3:    for j in range(i+1, n) do\n// 4:        if arr[i] == arr[j] then\n// 5:            sum <- sum + arr[i]\n// 6: return sum", "entry_point": "findSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findSum(vector<int>{1, 2, 3, 1, 1, 4, 5, 6}, 8);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findSum(vector<int>{1, 2, 3, 1, 1}, 5);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findSum(vector<int>{1, 1, 2}, 3);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of repeated elements in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/43", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n */\nstring textMatch(string text) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: matched_str: str\n// 1: pattern <- r\"[a-z]+_[a-z]+\"\n// 2: matched_str <- \"\"\n// 3: for match in re.findall(pattern, text) do\n// 4:    matched_str += match + \" \"\n// 5: return matched_str.strip()", "entry_point": "textMatch", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatch(string(\"aab_cbbbc\"));\n    if (!(compare(x0, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatch(string(\"aab_Abbbc\"));\n    if (!(compare(x1, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatch(string(\"Aaab_abbbc\"));\n    if (!(compare(x2, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/44", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word at the beginning of a string.\n */\nstring textMatchString(string text) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: match: str\n// 1: patterns <- ['hello', 'world', 'python']\n// 2: for p in patterns do\n// 3:    if text.startswith(p) then\n// 4:        return p\n// 5: return None", "entry_point": "textMatchString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatchString(string(\" python\"));\n    if (!(compare(x0, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatchString(string(\"python\"));\n    if (!(compare(x1, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatchString(string(\"  lang\"));\n    if (!(compare(x2, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function that matches a word at the beginning of a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/45", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the gcd of the given array elements.\n */\nint getGcd(vector<int> l) {\n}\n\n// The pseudo code of the above function:\n// Input: l: list of integers\n// Output: gcd: int\n// 1: if len(l) == 0 then\n// 2:    return None\n// 3: if len(l) == 1 then\n// 4:    return l[0]\n// 5: gcd <- l[0]\n// 6: for i <- 1 to len(l)-1 do\n// 7:    gcd <- __gcd(gcd, l[i])\n// 8: return gcd", "entry_point": "getGcd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getGcd(vector<int>{2, 4, 6, 8, 16});\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getGcd(vector<int>{1, 2, 3});\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getGcd(vector<int>{2, 4, 6, 8});\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the gcd of the given array elements.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/46", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to determine whether all the numbers are different from each other are not.\n */\nbool testDistinct(vector<int> data) {\n}\n\n// The pseudo code of the above function:\n// Input: data: list of ints\n// Output: True or False\n// 1: for i in range(len(data)) do\n// 2:    for j in range(i+1, len(data)) do\n// 3:        if data[i] == data[j] then\n// 4:            return False\n// 5: return True", "entry_point": "testDistinct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = testDistinct(vector<int>{1, 5, 7, 9});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = testDistinct(vector<int>{2, 4, 5, 5, 7, 9});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = testDistinct(vector<int>{1, 2, 3});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to determine whether all the numbers are different from each other are not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/47", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last digit when factorial of a divides factorial of b.\n */\nint computeLastDigit(int a, int b) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, b: int\n// Output: lastDigit: int\n// 1: if a == b then\n// 2:    return 1\n// 3: minNum <- min(a, b)\n// 4: maxNum <- max(a, b)\n// 5: lastDigit <- 1\n// 6: for i <- maxNum+1 to minNum+1 do\n// 7:    lastDigit <- (lastDigit * (i % 10)) % 10\n// 8: if minNum % 10 == 0 then\n// 9:    return 0\n// 10: return lastDigit", "entry_point": "computeLastDigit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = computeLastDigit(2, 4);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = computeLastDigit(6, 8);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = computeLastDigit(1, 2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the last digit when factorial of a divides factorial of b.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/48", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set all odd bits of a given number.\n */\nint oddBitSetNumber(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: num: int\n// 1: mask <- 0xAAAAAAAA // 0b1010...1010\n// 2: num <- n | mask // set all odd bits to 1\n// 3: return num", "entry_point": "oddBitSetNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = oddBitSetNumber(10);\n    if (!(compare(x0, 15))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = oddBitSetNumber(20);\n    if (!(compare(x1, 21))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = oddBitSetNumber(30);\n    if (!(compare(x2, 31))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to set all odd bits of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/49", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract every first or specified element from a given two-dimensional list.\n */\nvector<int> specifiedElement(vector<vector<int>> nums, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of lists, n: int\n// Output: res: list\n// 1: res <- []\n// 2: for i in range(len(nums)) do\n// 3:    if len(nums[i]) >= n then\n// 4:        res.append(nums[i][n-1])\n// 5: return res", "entry_point": "specifiedElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0);\n    if (!(compare(x0, {1, 4, 7}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2);\n    if (!(compare(x1, {3, 6, 9}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 1);\n    if (!(compare(x2, {2, 5, 1}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract every first or specified element from a given two-dimensional list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/51", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print check if the triangle is equilateral or not.\n */\nbool checkEquilateral(int x, int y, int z) {\n}\n\n// The pseudo code of the above function:\n// Input: x: int, y: int, z: int\n// Output: True or False\n// 1: if x == y and y == z then\n// 2:    return True\n// 3: return False", "entry_point": "checkEquilateral", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkEquilateral(6, 8, 12);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkEquilateral(6, 6, 12);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkEquilateral(6, 6, 6);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to print check if the triangle is equilateral or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/52", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to caluclate area of a parallelogram.\n */\nint parallelogramArea(int b, int h) {\n}\n\n// The pseudo code of the above function:\n// Input: b: int, h: int\n// Output: area: int\n// 1: area <- b * h\n// 2: return area", "entry_point": "parallelogramArea", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = parallelogramArea(10, 20);\n    if (!(compare(x0, 200))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = parallelogramArea(15, 20);\n    if (!(compare(x1, 300))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = parallelogramArea(8, 9);\n    if (!(compare(x2, 72))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to caluclate area of a parallelogram.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/53", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the first and last characters of a given string are equal or not.\n */\nstring checkEquality(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: \"Equal\" or \"Not Equal\"\n// 1: if str[0] == str[-1] then\n// 2:    return \"Equal\"\n// 3: else\n// 4:    return \"Not Equal\"", "entry_point": "checkEquality", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkEquality(string(\"abcda\"));\n    if (!(compare(x0, string(\"Equal\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkEquality(string(\"ab\"));\n    if (!(compare(x1, string(\"Not Equal\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkEquality(string(\"mad\"));\n    if (!(compare(x2, string(\"Not Equal\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the first and last characters of a given string are equal or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/54", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using counting sort.\n */\nvector<int> countingSort(vector<int> myList) {\n}\n\n// The pseudo code of the above function:\n// Input: myList: list of integers\n// Output: sortedList: list of integers\n// 1: maxVal <- max(myList)\n// 2: countList <- list of zeros with length maxVal+1\n// 3: for i in myList do\n// 4:    countList[i] <- countList[i] + 1\n// 5: for i in range(1, maxVal+1) do\n// 6:    countList[i] <- countList[i] + countList[i-1]\n// 7: sortedList <- list of zeros with length len(myList)\n// 8: for i in reversed(myList) do\n// 9:    sortedList[countList[i]-1] <- i\n// 10:    countList[i] <- countList[i] - 1\n// 11: return sortedList", "entry_point": "countingSort", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = countingSort(vector<int>{1, 23, 4, 5, 6, 7, 8});\n    if (!(compare(x0, {1, 4, 5, 6, 7, 8, 23}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = countingSort(vector<int>{12, 9, 28, 33, 69, 45});\n    if (!(compare(x1, {9, 12, 28, 33, 45, 69}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = countingSort(vector<int>{8, 4, 14, 3, 2, 1});\n    if (!(compare(x2, {1, 2, 3, 4, 8, 14}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort the given array by using counting sort.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/55", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find t-nth term of geometric series.\n */\nint tnGp(int a, int n, int r) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, n: int, r: int\n// Output: tn: int\n// 1: tn <- a * (r^(n-1))\n// 2: return tn", "entry_point": "tnGp", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = tnGp(1, 5, 2);\n    if (!(compare(x0, 16))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = tnGp(1, 5, 4);\n    if (!(compare(x1, 256))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = tnGp(2, 6, 3);\n    if (!(compare(x2, 486))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find t-nth term of geometric series.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/56", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if a given number is one less than twice its reverse.\n */\nbool check(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: True or False\n// 1: reverse_n <- 0\n// 2: temp <- n\n// 3: while temp > 0 do\n// 4:    reverse_n <- reverse_n * 10 + temp % 10\n// 5:    temp <- temp // 10\n// 6: if n == 2 * reverse_n + 1 then\n// 7:    return True\n// 8: else\n// 9:    return False", "entry_point": "check", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = check(70);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = check(23);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = check(73);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check if a given number is one less than twice its reverse.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/57", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest number that can be formed with the given digits.\n */\nint findMaxNum(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, n: int\n// Output: max_num: int\n// 1: sort arr in descending order\n// 2: initialize an empty string max_num\n// 3: for each element in arr do\n// 4:    append the element to max_num as a string\n// 5: return max_num as integer", "entry_point": "findMaxNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMaxNum(vector<int>{1, 2, 3}, 3);\n    if (!(compare(x0, 321))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMaxNum(vector<int>{4, 5, 6, 1}, 4);\n    if (!(compare(x1, 6541))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMaxNum(vector<int>{1, 2, 3, 9}, 4);\n    if (!(compare(x2, 9321))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the largest number that can be formed with the given digits.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/58", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given two integers have opposite sign or not.\n */\nbool oppositeSigns(int x, int y) {\n}\n\n// The pseudo code of the above function:\n// Input: x: int, y: int\n// Output: True or False\n// 1: if (x ^ y) < 0 then\n// 2:    return True\n// 3: return False", "entry_point": "oppositeSigns", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = oppositeSigns(1, -2);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = oppositeSigns(3, 2);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = oppositeSigns(-10, -10);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given two integers have opposite sign or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/59", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth octagonal number.\n */\nint isOctagonal(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: octagonal number: int\n// 1: if n < 1 then\n// 2:    return None\n// 3: octagonal number <- n * (3 * n - 2)\n// 4: return octagonal number", "entry_point": "isOctagonal", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = isOctagonal(5);\n    if (!(compare(x0, 65))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = isOctagonal(10);\n    if (!(compare(x1, 280))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = isOctagonal(15);\n    if (!(compare(x2, 645))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the nth octagonal number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/60", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n */\nint maxLenSub(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, n: int\n// Output: max_len: int\n// 1: dp <- [1] * n\n// 2: max_len <- 1\n// 3: for i <- 1 to n-1 do\n// 4:    for j <- 0 to i-1 do\n// 5:        if abs(arr[i]-arr[j]) == 1 and dp[i] < dp[j]+1 then\n// 6:            dp[i] <- dp[j]+1\n// 7:    max_len <- max(max_len, dp[i])\n// 8: return max_len", "entry_point": "maxLenSub", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxLenSub(vector<int>{2, 5, 6, 3, 7, 6, 5, 8}, 8);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxLenSub(vector<int>{-2, -1, 5, -1, 4, 0, 3}, 7);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxLenSub(vector<int>{9, 11, 13, 15, 18}, 5);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/61", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of substrings with the sum of digits equal to their length.\n */\nint countSubstrings(string s, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: s: str, n: int\n// Output: count: int\n// 1: count <- 0\n// 2: for i <- 0 to n-1 do\n// 3:    for j <- i+1 to n do\n// 4:        sub_str <- s[i:j]\n// 5:        sum_digits <- 0\n// 6:        for k <- 0 to len(sub_str) do\n// 7:            sum_digits <- sum_digits + int(sub_str[k])\n// 8:        if sum_digits == len(sub_str) then\n// 9:            count <- count + 1\n// 10: return count", "entry_point": "countSubstrings", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSubstrings(string(\"112112\"), 6);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSubstrings(string(\"111\"), 3);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSubstrings(string(\"1101112\"), 7);\n    if (!(compare(x2, 12))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count number of substrings with the sum of digits equal to their length.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/62", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find smallest number in a list.\n */\nint smallestNum(vector<int> xs) {\n}\n\n// The pseudo code of the above function:\n// Input: xs: list of integers\n// Output: smallest: integer\n// 1: smallest <- xs[0]\n// 2: for i in range(1, len(xs)) do\n// 3:    if xs[i] < smallest then\n// 4:        smallest <- xs[i]\n// 5: return smallest", "entry_point": "smallestNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = smallestNum(vector<int>{10, 20, 1, 45, 99});\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = smallestNum(vector<int>{1, 2, 3});\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = smallestNum(vector<int>{45, 46, 50, 60});\n    if (!(compare(x2, 45))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find smallest number in a list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/63", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum difference between available pairs in the given tuple list.\n */\nint maxDifference(vector<vector<int>> testList) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of tuples\n// Output: max_diff: int\n// 1: max_diff <- 0\n// 2: for i in range(len(test_list)) do\n// 3:    for j in range(i+1, len(test_list)) do\n// 4:        diff <- abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n// 5:        if diff > max_diff then\n// 6:            max_diff <- diff\n// 7: return max_diff", "entry_point": "maxDifference", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxDifference(vector<vector<int>>{{3, 5}, {1, 7}, {10, 3}, {1, 2}});\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxDifference(vector<vector<int>>{{4, 6}, {2, 17}, {9, 13}, {11, 12}});\n    if (!(compare(x1, 15))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxDifference(vector<vector<int>>{{12, 35}, {21, 27}, {13, 23}, {41, 22}});\n    if (!(compare(x2, 23))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum difference between available pairs in the given tuple list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/66", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count positive numbers in a list.\n */\nint posCount(vector<int> list) {\n}\n\n// The pseudo code of the above function:\n// Input: lst: list of integers\n// Output: count: integer\n// 1: count <- 0\n// 2: for each num in lst do\n// 3:    if num > 0 then\n// 4:        count <- count + 1\n// 5: return count", "entry_point": "posCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = posCount(vector<int>{1, -2, 3, -4});\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = posCount(vector<int>{3, 4, 5, -1});\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = posCount(vector<int>{1, 2, 3, 4});\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count positive numbers in a list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/68", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given array is monotonic or not.\n */\nbool isMonotonic(vector<int> a) {\n}\n\n// The pseudo code of the above function:\n// Input: a: list of integers\n// Output: True or False\n// 1: increasing <- True\n// 2: decreasing <- True\n// 3: for i in range(1, len(a)) do\n// 4:    if a[i] < a[i-1] then\n// 5:        increasing <- False\n// 6:    if a[i] > a[i-1] then\n// 7:        decreasing <- False\n// 8: return increasing or decreasing", "entry_point": "isMonotonic", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isMonotonic(vector<int>{6, 5, 4, 4});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isMonotonic(vector<int>{1, 2, 2, 3});\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isMonotonic(vector<int>{1, 3, 2});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given array is monotonic or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/69", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether a list contains the given sublist or not.\n */\nbool isSublist(vector<int> l, vector<int> s) {\n}\n\n// The pseudo code of the above function:\n// Input: list: list of int, sublist: list of int\n// Output: True or False\n// 1: for i in range(len(list)-len(sublist)+1) do\n// 2:    if list[i:i+len(sublist)] == sublist then\n// 3:        return True\n// 4: return False", "entry_point": "isSublist", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{3, 7});\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{4, 3});\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{1, 6});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether a list contains the given sublist or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/70", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether all the given tuples have equal length or not.\n */\nstring getEqual(vector<vector<int>> input, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: input: list of tuples, k: int\n// Output: \"YES\" or \"NO\"\n// 1: n <- len(input[0])\n// 2: for t in input do\n// 3:    if len(t) != n or k >= n then\n// 4:        return \"NO\"\n// 5: return \"YES\"", "entry_point": "getEqual", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = getEqual(vector<vector<int>>{{11, 22, 33}, {44, 55, 66}}, 3);\n    if (!(compare(x0, string(\"All tuples have same length\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = getEqual(vector<vector<int>>{{1, 2, 3}, {4, 5, 6, 7}}, 3);\n    if (!(compare(x1, string(\"All tuples do not have same length\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = getEqual(vector<vector<int>>{{1, 2}, {3, 4}}, 2);\n    if (!(compare(x2, string(\"All tuples have same length\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find whether all the given tuples have equal length or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/71", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of elements using comb sort.\n */\nvector<int> combSort(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of integers\n// Output: sorted_nums: list of integers\n// 1: gap <- length of nums\n// 2: shrink <- 1.3\n// 3: sorted <- False\n// 4: while not sorted do\n// 5:    gap <- floor(gap / shrink)\n// 6:    if gap <= 1 then\n// 7:        gap <- 1\n// 8:        sorted <- True\n// 9:    i <- 0\n// 10:   while i + gap < length of nums do\n// 11:       if nums[i] > nums[i+gap] then\n// 12:           swap nums[i] and nums[i+gap]\n// 13:           sorted <- False\n// 14:       i <- i + 1\n// 15: return nums", "entry_point": "combSort", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = combSort(vector<int>{5, 15, 37, 25, 79});\n    if (!(compare(x0, {5, 15, 25, 37, 79}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = combSort(vector<int>{41, 32, 15, 19, 22});\n    if (!(compare(x1, {15, 19, 22, 32, 41}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = combSort(vector<int>{99, 15, 13, 47});\n    if (!(compare(x2, {13, 15, 47, 99}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort a list of elements using comb sort.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/72", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented as difference of two squares or not.\n */\nbool difSquare(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: True or False\n// 1: for i <- 0 to sqrt(n) do\n// 2:    for j <- i to sqrt(n) do\n// 3:        if i^2 - j^2 == n then\n// 4:            return True\n// 5: return False", "entry_point": "difSquare", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = difSquare(5);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = difSquare(10);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = difSquare(15);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given number can be represented as difference of two squares or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/73", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split the given string with multiple delimiters by using regex.\n */\nvector<string> multipleSplit(string text) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: split_text: list of str\n// 1: delimiters = '[,;.\\s]+'  # regex pattern for multiple delimiters\n// 2: split_text <- split(text, delimiters)\n// 3: return split_text", "entry_point": "multipleSplit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = multipleSplit(string(\"Forces of the \\ndarkness*are coming into the play.\"));\n    if (!(compare(x0, {string(\"Forces of the \"), string(\"darkness\"), string(\"are coming into the play.\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = multipleSplit(string(\"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\"));\n    if (!(compare(x1, {string(\"Mi Box runs on the \"), string(\" Latest android\"), string(\"which has google assistance and chromecast.\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = multipleSplit(string(\"Certain services\\nare subjected to change*over the seperate subscriptions.\"));\n    if (!(compare(x2, {string(\"Certain services\"), string(\"are subjected to change\"), string(\"over the seperate subscriptions.\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to split the given string with multiple delimiters by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/74", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether it follows the sequence given in the patterns array.\n */\nbool isSamepatterns(vector<string> colors, vector<string> patterns) {\n}\n\n// The pseudo code of the above function:\n// Input: colors: list of strings, patterns: list of strings\n// Output: True or False\n// 1: if len(colors) != len(patterns) then\n// 2:    return False\n// 3: for i in range(len(colors)) do\n// 4:    if colors[i] != colors[i-1] and patterns[i] == patterns[i-1] then\n// 5:        return False\n// 6: return True", "entry_point": "isSamepatterns", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"green\")}, vector<string>{string(\"a\"), string(\"b\"), string(\"b\")});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"greenn\")}, vector<string>{string(\"a\"), string(\"b\"), string(\"b\")});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"greenn\")}, vector<string>{string(\"a\"), string(\"b\")});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether it follows the sequence given in the patterns array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/75", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n */\nstring findTuples(vector<vector<int>> testList, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of tuples, k: int\n// Output: res: str\n// 1: res <- \"\"\n// 2: for each t in test_list do\n// 3:    if all(elem % k == 0 for elem in t) then\n// 4:        res <- res + str(t) + \" \"\n// 5: return res", "entry_point": "findTuples", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = findTuples(vector<vector<int>>{{6, 24, 12}, {7, 9, 6}, {12, 18, 21}}, 6);\n    if (!(compare(x0, string(\"[(6, 24, 12)]\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = findTuples(vector<vector<int>>{{5, 25, 30}, {4, 2, 3}, {7, 8, 9}}, 5);\n    if (!(compare(x1, string(\"[(5, 25, 30)]\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = findTuples(vector<vector<int>>{{7, 9, 16}, {8, 16, 4}, {19, 17, 18}}, 4);\n    if (!(compare(x2, string(\"[(8, 16, 4)]\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/76", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of squares in a rectangle.\n */\nint countSquares(int m, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: m: int, n: int\n// Output: count: int\n// 1: if m > n then swap m and n\n// 2: count <- 0\n// 3: for i <- 1 to m do\n// 4:    count <- count + (n-i+1)^2\n// 5: return count", "entry_point": "countSquares", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSquares(4, 3);\n    if (!(compare(x0, 20))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSquares(2, 2);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSquares(1, 1);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the number of squares in a rectangle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/77", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the difference between sum of even and odd digits.\n */\nbool isDiff(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: diff: int\n// 1: sum_even <- 0\n// 2: sum_odd <- 0\n// 3: while n > 0 do\n// 4:    if n % 2 == 0 then\n// 5:        sum_even <- sum_even + n % 10\n// 6:    else\n// 7:        sum_odd <- sum_odd + n % 10\n// 8:    n <- n // 10\n// 9: diff <- abs(sum_even - sum_odd)\n// 10: return diff", "entry_point": "isDiff", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isDiff(1212112);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isDiff(1212);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the difference between sum of even and odd digits.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/78", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find number of integers with odd number of set bits.\n */\nint countWithOddSetbits(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: count: int\n// 1: count <- 0\n// 2: for i <- 1 to n do\n// 3:    setBits <- 0\n// 4:    while i > 0 do\n// 5:        if i % 2 == 1 then\n// 6:            setBits += 1\n// 7:        i <- i / 2\n// 8:    if setBits % 2 == 1 then\n// 9:        count += 1\n// 10: return count", "entry_point": "countWithOddSetbits", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countWithOddSetbits(5);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countWithOddSetbits(10);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countWithOddSetbits(15);\n    if (!(compare(x2, 8))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find number of integers with odd number of set bits.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/79", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the length of the word is odd or not.\n */\nbool wordLen(string s) {\n}\n\n// The pseudo code of the above function:\n// Input: s: str\n// Output: True or False\n// 1: if len(s) % 2 == 0 then\n// 2:    return False\n// 3: else\n// 4:    return True", "entry_point": "wordLen", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = wordLen(string(\"Hadoop\"));\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = wordLen(string(\"great\"));\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = wordLen(string(\"structure\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the length of the word is odd or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/80", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth tetrahedral number.\n */\ndouble tetrahedralNumber(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: tet_num: double\n// 1: tet_num <- (n * (n+1) * (n+2)) / 6\n// 2: return tet_num", "entry_point": "tetrahedralNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = tetrahedralNumber(5);\n    if (!(compare(x0, 35.0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = tetrahedralNumber(6);\n    if (!(compare(x1, 56.0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = tetrahedralNumber(7);\n    if (!(compare(x2, 84.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the nth tetrahedral number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/81", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to zip the two given tuples.\n */\nvector<vector<int>> zipTuples(vector<int> testTup1, vector<int> testTup2) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup1: list of int, test_tup2: list of int\n// Output: zipped_list: list of list of int\n// 1: zipped_list <- []\n// 2: for i in range(min(len(test_tup1), len(test_tup2))) do\n// 3:    temp_list <- []\n// 4:    temp_list.append(test_tup1[i])\n// 5:    temp_list.append(test_tup2[i])\n// 6:    zipped_list.append(temp_list)\n// 7: return zipped_list", "entry_point": "zipTuples", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = zipTuples(vector<int>{7, 8, 4, 5, 9, 10}, vector<int>{1, 5, 6});\n    if (!(compare(x0, {{7, 1}, {8, 5}, {4, 6}, {5, 1}, {9, 5}, {10, 6}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = zipTuples(vector<int>{8, 9, 5, 6, 10, 11}, vector<int>{2, 6, 7});\n    if (!(compare(x1, {{8, 2}, {9, 6}, {5, 7}, {6, 2}, {10, 6}, {11, 7}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = zipTuples(vector<int>{9, 10, 6, 7, 11, 12}, vector<int>{3, 7, 8});\n    if (!(compare(x2, {{9, 3}, {10, 7}, {6, 8}, {7, 3}, {11, 7}, {12, 8}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to zip the two given tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/82", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a sphere.\n */\ndouble volumeSphere(int r) {\n}\n\n// The pseudo code of the above function:\n// Input: r: int\n// Output: vol: float\n// 1: vol <- (4/3) * pi * r^3\n// 2: return vol", "entry_point": "volumeSphere", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = volumeSphere(10);\n    if (!(compare(x0, 4188.790204786391))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = volumeSphere(25);\n    if (!(compare(x1, 65449.84694978735))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = volumeSphere(20);\n    if (!(compare(x2, 33510.32163829113))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the volume of a sphere.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/83", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the character made by adding all the characters of the given string.\n */\nstring getChar(string strr) {\n}\n\n// The pseudo code of the above function:\n// Input: strr: str\n// Output: ch: str\n// 1: sum <- 0\n// 2: for i in range(len(strr)) do\n// 3:    sum += ord(strr[i])\n// 4: return chr(sum)", "entry_point": "getChar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = getChar(string(\"abc\"));\n    if (!(compare(x0, string(\"f\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = getChar(string(\"gfg\"));\n    if (!(compare(x1, string(\"t\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = getChar(string(\"ab\"));\n    if (!(compare(x2, string(\"c\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the character made by adding all the characters of the given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/84", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th number in newman conway sequence.\n */\nint sequence(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: int\n// 1: if n == 1 or n == 2 then\n// 2:    return 1\n// 3: else\n// 4:    declare an array seq of size n\n// 5:    seq[0], seq[1] <- 0, 1\n// 6:    for i <- 2 to n-1 do\n// 7:        seq[i] <- seq[seq[i-1]] + seq[i-seq[i-1]]\n// 8:    return seq[n-1]", "entry_point": "sequence", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sequence(10);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sequence(2);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sequence(3);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the n-th number in newman conway sequence.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/85", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a sphere.\n */\ndouble surfaceareaSphere(int r) {\n}\n\n// The pseudo code of the above function:\n// Input: r: int\n// Output: surface_area: float\n// 1: surface_area <- 4 * pi * r * r\n// 2: return surface_area", "entry_point": "surfaceareaSphere", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = surfaceareaSphere(10);\n    if (!(compare(x0, 1256.6370614359173))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = surfaceareaSphere(15);\n    if (!(compare(x1, 2827.4333882308138))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = surfaceareaSphere(20);\n    if (!(compare(x2, 5026.548245743669))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the surface area of a sphere.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/86", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find nth centered hexagonal number.\n */\nint centeredHexagonalNumber(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: num: int\n// 1: if n == 1 then\n// 2:    return 1\n// 3: num <- 1 + 6 * (n-1) * n / 2\n// 4: return num", "entry_point": "centeredHexagonalNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = centeredHexagonalNumber(10);\n    if (!(compare(x0, 271))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = centeredHexagonalNumber(2);\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = centeredHexagonalNumber(9);\n    if (!(compare(x2, 217))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find nth centered hexagonal number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/87", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge three dictionaries into a single expression.\n */\nunordered_map<string, string> mergeDictionariesThree(unordered_map<string, string> dict1, unordered_map<string, string> dict2, unordered_map<string, string> dict3) {\n}\n\n// The pseudo code of the above function:\n// Input: dict1: unordered_map, dict2: unordered_map, dict3: unordered_map\n// Output: merged_dict: unordered_map\n// 1: merged_dict <- empty unordered_map\n// 2: for each key, value in dict1 do\n// 3:    merged_dict[key] <- value\n// 4: for each key, value in dict2 do\n// 5:    merged_dict[key] <- value\n// 6: for each key, value in dict3 do\n// 7:    merged_dict[key] <- value\n// 8: return merged_dict", "entry_point": "mergeDictionariesThree", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<string, string> x0 = mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}, unordered_map<string, string>{{string(\"O\"), string(\"Orange\")}, {string(\"W\"), string(\"White\")}, {string(\"B\"), string(\"Black\")}});\n    if (!(compare(x0, {{string(\"B\"), string(\"Black\")}, {string(\"R\"), string(\"Red\")}, {string(\"P\"), string(\"Pink\")}, {string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}, {string(\"O\"), string(\"Orange\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<string, string> x1 = mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}, unordered_map<string, string>{{string(\"L\"), string(\"lavender\")}, {string(\"B\"), string(\"Blue\")}});\n    if (!(compare(x1, {{string(\"W\"), string(\"White\")}, {string(\"P\"), string(\"Pink\")}, {string(\"B\"), string(\"Black\")}, {string(\"R\"), string(\"Red\")}, {string(\"G\"), string(\"Green\")}, {string(\"L\"), string(\"lavender\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<string, string> x2 = mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"L\"), string(\"lavender\")}, {string(\"B\"), string(\"Blue\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}});\n    if (!(compare(x2, {{string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}, {string(\"R\"), string(\"Red\")}, {string(\"G\"), string(\"Green\")}, {string(\"L\"), string(\"lavender\")}, {string(\"W\"), string(\"White\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to merge three dictionaries into a single expression.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/88", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the frequency of the elements in a list.\n */\nunordered_map<int, int> freqCount(vector<int> list1) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of int\n// Output: freq: dictionary of int\n// 1: freq <- {}\n// 2: for each num in list1 do\n// 3:    if num in freq then\n// 4:        freq[num] <- freq[num] + 1\n// 5:    else freq[num] <- 1\n// 6: return freq", "entry_point": "freqCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<int, int> x0 = freqCount(vector<int>{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30});\n    if (!(compare(x0, {{10, 4}, {20, 4}, {40, 2}, {50, 2}, {30, 1}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<int, int> x1 = freqCount(vector<int>{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4});\n    if (!(compare(x1, {{1, 3}, {2, 2}, {3, 3}, {4, 3}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<int, int> x2 = freqCount(vector<int>{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5});\n    if (!(compare(x2, {{10, 1}, {5, 3}, {6, 2}, {7, 2}, {4, 2}, {9, 2}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to get the frequency of the elements in a list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/89", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the closest smaller number than n.\n */\nint closestNum(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: closest: int\n// 1: closest <- n-1\n// 2: while closest >= 1 do\n// 3:    if closest*(closest-1) <= n*(n-1) then\n// 4:        return closest\n// 5:    closest <- closest - 1\n// 6: return -1", "entry_point": "closestNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = closestNum(11);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = closestNum(7);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = closestNum(12);\n    if (!(compare(x2, 11))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the closest smaller number than n.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/90", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the length of the longest word.\n */\nint lenLog(vector<string> list1) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of strings\n// Output: length: int\n// 1: length <- 0\n// 2: for each word in list1 do\n// 3:    if length of word > length then\n// 4:        length <- length of word\n// 5: return length", "entry_point": "lenLog", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = lenLog(vector<string>{string(\"python\"), string(\"PHP\"), string(\"bigdata\")});\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = lenLog(vector<string>{string(\"a\"), string(\"ab\"), string(\"abc\")});\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = lenLog(vector<string>{string(\"small\"), string(\"big\"), string(\"tall\")});\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the length of the longest word.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/91", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a substring is present in a given list of string values.\n */\nbool findSubstring(vector<string> str1, string subStr) {\n}\n\n// The pseudo code of the above function:\n// Input: str_list: list of strings, sub_str: string\n// Output: True or False\n// 1: for str in str_list do\n// 2:    if sub_str in str then\n// 3:        return True\n// 4: return False", "entry_point": "findSubstring", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"ack\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"abc\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"ange\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if a substring is present in a given list of string values.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/92", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given number is undulating or not.\n */\nbool isUndulating(string n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: str\n// Output: True or False\n// 1: if len(n) != 6 then\n// 2:    return False\n// 3: for i in range(1, 5) do\n// 4:    if (n[i-1] == n[i] and n[i] != n[i+1]) or (n[i-1] != n[i] and n[i] == n[i+1]) then\n// 5:        continue\n// 6:    else:\n// 7:        return False\n// 8: return True", "entry_point": "isUndulating", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isUndulating(string(\"1212121\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isUndulating(string(\"1991\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isUndulating(string(\"121\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether the given number is undulating or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/93", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the value of 'a' to the power 'b'.\n */\nint power(int a, int b) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, b: int\n// Output: res: int\n// 1: if b == 0 then\n// 2:    return 1\n// 3: res <- 1\n// 4: while b > 0 do\n// 5:    if b % 2 == 1 then\n// 6:        res *= a\n// 7:    a *= a\n// 8:    b /= 2\n// 9: return res", "entry_point": "power", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = power(3, 4);\n    if (!(compare(x0, 81))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = power(2, 3);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = power(5, 5);\n    if (!(compare(x2, 3125))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the value of 'a' to the power 'b'.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/95", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum length of sublist.\n */\nint findMinLength(vector<vector<int>> lst) {\n}\n\n// The pseudo code of the above function:\n// Input: lst: list of lists of integers\n// Output: min_len: int\n// 1: min_len <- inf\n// 2: for each sub_lst in lst do\n// 3:    if len(sub_lst) < min_len then\n// 4:        min_len <- len(sub_lst)\n// 5: return min_len", "entry_point": "findMinLength", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMinLength(vector<vector<int>>{{1}, {1, 2}});\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMinLength(vector<vector<int>>{{1, 2}, {1, 2, 3}, {1, 2, 3, 4}});\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMinLength(vector<vector<int>>{{3, 3, 3}, {4, 4, 4, 4}});\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the minimum length of sublist.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/96", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the number of divisors of a given integer.\n */\nint divisor(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: cnt: int\n// 1: cnt <- 0\n// 2: for i <- 1 to sqrt(n) do\n// 3:    if n % i == 0 then\n// 4:        cnt <- cnt + 2 if i != n/i else cnt + 1\n// 5: return cnt", "entry_point": "divisor", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = divisor(15);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = divisor(12);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = divisor(9);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the number of divisors of a given integer.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/97", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find frequency count of list of lists.\n */\nunordered_map<int, int> frequencyLists(vector<vector<int>> list1) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of lists\n// Output: freq_count: dict\n// 1: freq_count <- {}\n// 2: for l in list1 do\n// 3:    for elem in l do\n// 4:        if elem in freq_count then\n// 5:            freq_count[elem] += 1\n// 6:        else then\n// 7:            freq_count[elem] = 1\n// 8: return freq_count", "entry_point": "frequencyLists", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<int, int> x0 = frequencyLists(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}});\n    if (!(compare(x0, {{1, 1}, {2, 3}, {3, 1}, {4, 1}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {9, 1}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<int, int> x1 = frequencyLists(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}});\n    if (!(compare(x1, {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<int, int> x2 = frequencyLists(vector<vector<int>>{{20, 30, 40, 17}, {18, 16, 14, 13}, {10, 20, 30, 40}});\n    if (!(compare(x2, {{20, 2}, {30, 2}, {40, 2}, {17, 1}, {18, 1}, {16, 1}, {14, 1}, {13, 1}, {10, 1}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find frequency count of list of lists.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/98", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */\ndouble multiplyNum(vector<int> numbers) {\n}\n\n// The pseudo code of the above function:\n// Input: numbers: list of int\n// Output: result: float\n// 1: if len(numbers) == 0 then\n// 2:    return 0\n// 3: product <- 1\n// 4: for each n in numbers do\n// 5:    product <- product * n\n// 6: result <- product / len(numbers)\n// 7: return result", "entry_point": "multiplyNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = multiplyNum(vector<int>{8, 2, 3, -1, 7});\n    if (!(compare(x0, -67.2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = multiplyNum(vector<int>{-10, -20, -30});\n    if (!(compare(x1, -2000.0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = multiplyNum(vector<int>{19, 15, 18});\n    if (!(compare(x2, 1710.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/99", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given decimal number to its binary equivalent.\n */\nstring decimalToBinary(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: binary: str\n// 1: binary <- ''\n// 2: while n > 0 do\n// 3:    remainder <- n % 2\n// 4:    binary <- str(remainder) + binary\n// 5:    n <- n // 2\n// 6: return binary", "entry_point": "decimalToBinary", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = decimalToBinary(8);\n    if (!(compare(x0, string(\"1000\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = decimalToBinary(18);\n    if (!(compare(x1, string(\"10010\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = decimalToBinary(7);\n    if (!(compare(x2, string(\"111\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert the given decimal number to its binary equivalent.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/100", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the next smallest palindrome of a specified number.\n */\nint nextSmallestPalindrome(int num) {\n}\n\n// The pseudo code of the above function:\n// Input: num: int\n// Output: next_palindrome: int\n// 1: increment num by 1\n// 2: while not isPalindrome(num) do\n// 3:    increment num by 1\n// 4: return num\n\n// isPalindrome function\n// Input: num: int\n// Output: True or False\n// 1: convert num to string\n// 2: if string is equal to reverse of string then\n// 3:    return True\n// 4: else\n// 5:    return False", "entry_point": "nextSmallestPalindrome", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = nextSmallestPalindrome(99);\n    if (!(compare(x0, 101))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = nextSmallestPalindrome(1221);\n    if (!(compare(x1, 1331))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = nextSmallestPalindrome(120);\n    if (!(compare(x2, 121))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the next smallest palindrome of a specified number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/101", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the kth element in the given array.\n */\nint kthElement(vector<int> arr, int n, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, n: int, k: int\n// Output: kth element: int\n// 1: sort the array in non-decreasing order\n// 2: return arr[k-1]", "entry_point": "kthElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = kthElement(vector<int>{12, 3, 5, 7, 19}, 5, 2);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = kthElement(vector<int>{17, 24, 8, 23}, 4, 3);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = kthElement(vector<int>{16, 21, 25, 36, 4}, 5, 4);\n    if (!(compare(x2, 36))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the kth element in the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/102", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert snake case string to camel case string.\n */\nstring snakeToCamel(string word) {\n}\n\n// The pseudo code of the above function:\n// Input: word: str\n// Output: camel_case_word: str\n// 1: split the word into a list of words using \"_\" as separator\n// 2: initialize camel_case_word as an empty string\n// 3: for each word in the list do\n// 4:    if it is the first word then append it to the camel_case_word as is\n// 5:    else capitalize the first letter of the word and append it to camel_case_word\n// 6: return camel_case_word", "entry_point": "snakeToCamel", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = snakeToCamel(string(\"python_program\"));\n    if (!(compare(x0, string(\"PythonProgram\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = snakeToCamel(string(\"python_language\"));\n    if (!(compare(x1, string(\"PythonLanguage\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = snakeToCamel(string(\"programming_language\"));\n    if (!(compare(x2, string(\"ProgrammingLanguage\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert snake case string to camel case string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/103", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find eulerian number a(n, m).\n */\nint eulerianNum(int n, int m) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int, m: int\n// Output: res: int\n// 1: if m > n or n == 0 or m == 0 then\n// 2:    return 0\n// 3: res <- 0\n// 4: for k <- 0 to m do\n// 5:    res <- res + (-1)^k * comb(n+1, k) * (m-k+1)^n\n// 6: return res", "entry_point": "eulerianNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = eulerianNum(3, 1);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = eulerianNum(4, 1);\n    if (!(compare(x1, 11))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = eulerianNum(5, 3);\n    if (!(compare(x2, 26))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find eulerian number a(n, m).", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/104", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort each sublist of strings in a given list of lists using lambda function.\n */\nvector<vector<string>> sortSublists(vector<vector<string>> inputList) {\n}\n\n// The pseudo code of the above function:\n// Input: input_list: list of lists of strings\n// Output: sorted_list: list of lists of strings\n// 1: for lst in input_list do\n// 2:    lst.sort(key = lambda x: x.lower())\n// 3: return input_list", "entry_point": "sortSublists", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<string>> x0 = sortSublists(vector<vector<string>>{{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"white\"), string(\"black\"), string(\"orange\")}});\n    if (!(compare(x0, {{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"black\"), string(\"orange\"), string(\"white\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<string>> x1 = sortSublists(vector<vector<string>>{{string(\" red \"), string(\"green\")}, {string(\"blue \"), string(\" black\")}, {string(\" orange\"), string(\"brown\")}});\n    if (!(compare(x1, {{string(\" red \"), string(\"green\")}, {string(\" black\"), string(\"blue \")}, {string(\" orange\"), string(\"brown\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<string>> x2 = sortSublists(vector<vector<string>>{{string(\"zilver\"), string(\"gold\")}, {string(\"magnesium\"), string(\"aluminium\")}, {string(\"steel\"), string(\"bronze\")}});\n    if (!(compare(x2, {{string(\"gold\"), string(\"zilver\")}, {string(\"aluminium\"), string(\"magnesium\")}, {string(\"bronze\"), string(\"steel\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/105", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count true booleans in the given list.\n */\nint count(vector<bool> lst) {\n}\n\n// The pseudo code of the above function:\n// Input: lst: list of booleans\n// Output: count: int\n// 1: count <- 0\n// 2: for each bool in lst do\n// 3:    if bool is True then\n// 4:        count <- count + 1\n// 5: return count", "entry_point": "count", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = count(vector<bool>{true, false, true});\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = count(vector<bool>{false, false});\n    if (!(compare(x1, 0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = count(vector<bool>{true, true, true});\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count true booleans in the given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/106", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add the given list to the given tuples.\n */\nvector<int> addLists(vector<int> testList, vector<int> testTup) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list, test_tup: tuple\n// Output: res: list\n// 1: res <- []\n// 2: for i in range(len(test_tup)) do\n// 3:    res.append(testList[i] + test_tup[i])\n// 4: return res", "entry_point": "addLists", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = addLists(vector<int>{5, 6, 7}, vector<int>{9, 10});\n    if (!(compare(x0, {9, 10, 5, 6, 7}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = addLists(vector<int>{6, 7, 8}, vector<int>{10, 11});\n    if (!(compare(x1, {10, 11, 6, 7, 8}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = addLists(vector<int>{7, 8, 9}, vector<int>{11, 12});\n    if (!(compare(x2, {11, 12, 7, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to add the given list to the given tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/107", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count hexadecimal numbers for a given range.\n */\nint countHexadecimal(int l, int r) {\n}\n\n// The pseudo code of the above function:\n// Input: l: int, r: int\n// Output: count: int\n// 1: count <- 0\n// 2: for i <- l to r do\n// 3:    if i is a hexadecimal number then\n// 4:        count <- count + 1\n// 5: return count", "entry_point": "countHexadecimal", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countHexadecimal(10, 15);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countHexadecimal(2, 4);\n    if (!(compare(x1, 0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countHexadecimal(15, 16);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count hexadecimal numbers for a given range.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/108", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n */\nvector<int> mergeSortedList(vector<int> num1, vector<int> num2, vector<int> num3) {\n}\n\n// The pseudo code of the above function:\n// Input: num1: list of int, num2: list of int, num3: list of int\n// Output: merged: list of int\n// 1: Initialize an empty heap queue\n// 2: Push all the elements from the given input lists to the heap queue\n// 3: Initialize an empty list called \"merged\"\n// 4: While the heap queue is not empty do\n// 5:    Pop the smallest element from the heap queue and append it to the \"merged\" list\n// 6: Return the \"merged\" list", "entry_point": "mergeSortedList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = mergeSortedList(vector<int>{25, 24, 15, 4, 5, 29, 110}, vector<int>{19, 20, 11, 56, 25, 233, 154}, vector<int>{24, 26, 54, 48});\n    if (!(compare(x0, {4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = mergeSortedList(vector<int>{1, 3, 5, 6, 8, 9}, vector<int>{2, 5, 7, 11}, vector<int>{1, 4, 7, 8, 12});\n    if (!(compare(x1, {1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = mergeSortedList(vector<int>{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}, vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, vector<int>{12, 74, 9, 50, 61, 41});\n    if (!(compare(x2, {1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/109", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the count of rotations of a binary string with odd value.\n */\nint oddEquivalent(string s, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: s: str, n: int\n// Output: count: int\n// 1: count <- 0\n// 2: for i in range(n) do\n// 3:    if s[i] == '1' and i % 2 == 1 then\n// 4:        count <- count + 1\n// 5: return count", "entry_point": "oddEquivalent", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = oddEquivalent(string(\"011001\"), 6);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = oddEquivalent(string(\"11011\"), 5);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = oddEquivalent(string(\"1010\"), 4);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the count of rotations of a binary string with odd value.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/110", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n */\nvector<vector<int>> extractMissing(vector<vector<int>> testList, int strtVal, int stopVal) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of lists, start_val: int, stop_val: int\n// Output: missing_ranges: list of lists\n// 1: missing_ranges <- []\n// 2: prev <- start_val - 1\n// 3: for each l in test_list do\n// 4:    if l[0] > prev + 1 then\n// 5:        missing_ranges.append([prev + 1, l[0] - 1])\n// 6:    prev = l[1]\n// 7: if stop_val > prev then\n// 8:    missing_ranges.append([prev + 1, stop_val])\n// 9: return missing_ranges", "entry_point": "extractMissing", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = extractMissing(vector<vector<int>>{{6, 9}, {15, 34}, {48, 70}}, 2, 100);\n    if (!(compare(x0, {{2, 6}, {9, 100}, {9, 15}, {34, 100}, {34, 48}, {70, 100}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = extractMissing(vector<vector<int>>{{7, 2}, {15, 19}, {38, 50}}, 5, 60);\n    if (!(compare(x1, {{5, 7}, {2, 60}, {2, 15}, {19, 60}, {19, 38}, {50, 60}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = extractMissing(vector<vector<int>>{{7, 2}, {15, 19}, {38, 50}}, 1, 52);\n    if (!(compare(x2, {{1, 7}, {2, 52}, {2, 15}, {19, 52}, {19, 38}, {50, 52}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/111", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n */\nvector<int> commonInNestedLists(vector<vector<int>> nestedlist) {\n}\n\n// The pseudo code of the above function:\n// Input: nested_list: list of list of int\n// Output: common_elements: list of int\n// 1: create an empty set called common_set\n// 2: for each list in nested_list do\n// 3:    if it is the first list then\n// 4:        add all its elements to the common_set\n// 5:    else\n// 6:        create an empty set called current_set\n// 7:        add all the elements of the current list to the current_set\n// 8:        intersect the current_set with the common_set and update the common_set\n// 9: return the common_set as a list of elements", "entry_point": "commonInNestedLists", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = commonInNestedLists(vector<vector<int>>{{12, 18, 23, 25, 45}, {7, 12, 18, 24, 28}, {1, 5, 8, 12, 15, 16, 18}});\n    if (!(compare(x0, {18, 12}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = commonInNestedLists(vector<vector<int>>{{12, 5, 23, 25, 45}, {7, 11, 5, 23, 28}, {1, 5, 8, 18, 23, 16}});\n    if (!(compare(x1, {5, 23}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = commonInNestedLists(vector<vector<int>>{{2, 3, 4, 1}, {4, 5}, {6, 4, 8}, {4, 5}, {6, 8, 4}});\n    if (!(compare(x2, {4}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/112", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the perimeter of a cylinder.\n */\nint perimeter(int diameter, int height) {\n}\n\n// The pseudo code of the above function:\n// Input: diameter: int, height: int\n// Output: perimeter: int\n// 1: radius <- diameter / 2\n// 2: circumference <- 2 * PI * radius\n// 3: base_perimeter <- circumference\n// 4: lateral_perimeter <- 2 * height * PI\n// 5: perimeter <- base_perimeter + lateral_perimeter\n// 6: return perimeter", "entry_point": "perimeter", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = perimeter(2, 4);\n    if (!(compare(x0, 12))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = perimeter(1, 2);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = perimeter(3, 1);\n    if (!(compare(x2, 8))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the perimeter of a cylinder.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/113", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a string represents an integer or not.\n */\nbool checkInteger(string text) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: True or False\n// 1: text.strip()\n// 2: if text[0] in ['+', '-'] then\n// 3:    text <- text[1:]\n// 4: if not text.isdigit() then\n// 5:    return False\n// 6: return True", "entry_point": "checkInteger", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkInteger(string(\"python\"));\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkInteger(string(\"1\"));\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkInteger(string(\"12345\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if a string represents an integer or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/114", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to assign frequency to each tuple in the given tuple list.\n */\nstring assignFreq(vector<vector<int>> testList) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of tuples\n// Output: string\n// 1: freq_dict <- {}\n// 2: for each t in test_list do\n// 3:    if t not in freq_dict then\n// 4:        freq_dict[t] <- 1\n// 5:    else\n// 6:        freq_dict[t] <- freq_dict[t] + 1\n// 7: freq_str <- \"\"\n// 8: for each key, value in freq_dict.items() do\n// 9:    freq_str <- freq_str + str(key) + \":\" + str(value) + \",\"\n// 10: return freq_str[:-1]", "entry_point": "assignFreq", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = assignFreq(vector<vector<int>>{{6, 5, 8}, {2, 7}, {6, 5, 8}, {6, 5, 8}, {9}, {2, 7}});\n    if (!(compare(x0, string(\"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = assignFreq(vector<vector<int>>{{4, 2, 4}, {7, 1}, {4, 8}, {4, 2, 4}, {9, 2}, {7, 1}});\n    if (!(compare(x1, string(\"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = assignFreq(vector<vector<int>>{{11, 13, 10}, {17, 21}, {4, 2, 3}, {17, 21}, {9, 2}, {4, 2, 3}});\n    if (!(compare(x2, string(\"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to assign frequency to each tuple in the given tuple list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/116", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a given tuple of positive integers into an integer.\n */\nint tupleToInt(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of positive integers\n// Output: res: int\n// 1: res <- 0\n// 2: for each num in nums do\n// 3:    res <- res*10 + num\n// 4: return res", "entry_point": "tupleToInt", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = tupleToInt(vector<int>{1, 2, 3});\n    if (!(compare(x0, 123))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = tupleToInt(vector<int>{4, 5, 6});\n    if (!(compare(x1, 456))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = tupleToInt(vector<int>{5, 6, 7});\n    if (!(compare(x2, 567))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert a given tuple of positive integers into an integer.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/117", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert all possible convertible elements in the list to float.\n */\nstring listToFloat(vector<vector<string>> testList) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of lists, N: int\n// Output: list of lists of floats\n// 1: for i in range(len(test_list)) do\n// 2:    for j in range(len(test_list[i])) do\n// 3:        if isinstance(test_list[i][j], str) then\n// 4:            try:\n// 5:                test_list[i][j] = float(test_list[i][j])\n// 6:            except ValueError:\n// 7:                pass\n// 8: return test_list", "entry_point": "listToFloat", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = listToFloat(vector<vector<string>>{{string(\"3\"), string(\"4\")}, {string(\"1\"), string(\"26.45\")}, {string(\"7.32\"), string(\"8\")}, {string(\"4\"), string(\"8\")}});\n    if (!(compare(x0, string(\"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = listToFloat(vector<vector<string>>{{string(\"4\"), string(\"4\")}, {string(\"2\"), string(\"27\")}, {string(\"4.12\"), string(\"9\")}, {string(\"7\"), string(\"11\")}});\n    if (!(compare(x1, string(\"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = listToFloat(vector<vector<string>>{{string(\"6\"), string(\"78\")}, {string(\"5\"), string(\"26.45\")}, {string(\"1.33\"), string(\"4\")}, {string(\"82\"), string(\"13\")}});\n    if (!(compare(x2, string(\"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert all possible convertible elements in the list to float.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/118", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a string to a list.\n */\nvector<string> stringToList(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: lst: list of str\n// 1: lst <- []\n// 2: word <- ''\n// 3: for c in str do\n// 4:    if c == ' ' then\n// 5:        lst.append(word)\n// 6:        word <- ''\n// 7:    else:\n// 8:        word <- word + c\n// 9: if word != '' then\n// 10:    lst.append(word)\n// 11: return lst", "entry_point": "stringToList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = stringToList(string(\"python programming\"));\n    if (!(compare(x0, {string(\"python\"), string(\"programming\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = stringToList(string(\"lists tuples strings\"));\n    if (!(compare(x1, {string(\"lists\"), string(\"tuples\"), string(\"strings\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = stringToList(string(\"write a program\"));\n    if (!(compare(x2, {string(\"write\"), string(\"a\"), string(\"program\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/119", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the element that appears only once in a sorted array.\n */\nint search(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of int, n: int\n// Output: int\n// 1: if n == 1 then\n// 2:    return arr[0]\n// 3: if arr[0] != arr[1] then\n// 4:    return arr[0]\n// 5: if arr[n-1] != arr[n-2] then\n// 6:    return arr[n-1]\n// 7: left, right <- 0, n-1\n// 8: while left <= right do\n// 9:    mid <- (left+right) // 2\n// 10:   if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1] then\n// 11:       return arr[mid]\n// 12:   if arr[mid] == arr[mid-1] then\n// 13:       if (mid-left) % 2 == 0 then\n// 14:           right <- mid-2\n// 15:       else:\n// 16:           left <- mid+1\n// 17:   else:\n// 18:       if (right-mid) % 2 == 0 then\n// 19:           left <- mid+2\n// 20:       else:\n// 21:           right <- mid-1", "entry_point": "search", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = search(vector<int>{1, 1, 2, 2, 3}, 5);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = search(vector<int>{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}, 11);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = search(vector<int>{1, 2, 2, 3, 3, 4, 4}, 7);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the element that appears only once in a sorted array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/120", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product from the pairs of tuples within a given list.\n */\nint maxProductTuple(vector<vector<int>> list1) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of tuples\n// Output: max_product: int\n// 1: max_product <- -inf\n// 2: for i in range(len(list1)-1) do\n// 3:    for j in range(i+1, len(list1)) do\n// 4:        product <- list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n// 5:        if product > max_product then\n// 6:            max_product <- product\n// 7: return max_product", "entry_point": "maxProductTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxProductTuple(vector<vector<int>>{{2, 7}, {2, 6}, {1, 8}, {4, 9}});\n    if (!(compare(x0, 36))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxProductTuple(vector<vector<int>>{{10, 20}, {15, 2}, {5, 10}});\n    if (!(compare(x1, 200))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxProductTuple(vector<vector<int>>{{11, 44}, {10, 15}, {20, 5}, {12, 9}});\n    if (!(compare(x2, 484))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum product from the pairs of tuples within a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/121", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the triplet with sum of the given array\n */\nbool checkTriplet(vector<int> a, int n, int sum, int count) {\n}\n\n// The pseudo code of the above function:\n// Input: a: list of integers, n: int, sum: int, count: int\n// Output: True or False\n// 1: for i <- 0 to n-3 do\n// 2:    for j <- i+1 to n-2 do\n// 3:        for k <- j+1 to n-1 do\n// 4:            if a[i] + a[j] + a[k] == sum then\n// 5:                count <- count + 1\n// 6:                if count >= 1 then\n// 7:                    return True\n// 8: return False", "entry_point": "checkTriplet", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkTriplet(vector<int>{2, 7, 4, 0, 9, 5, 1, 3}, 8, 6, 0);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkTriplet(vector<int>{1, 4, 5, 6, 7, 8, 5, 9}, 8, 6, 0);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkTriplet(vector<int>{10, 4, 2, 3, 5}, 5, 15, 0);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the triplet with sum of the given array", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/122", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find n\u2019th smart number.\n */\nint smartnumber(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: smart_num: int\n// 1: smart_nums <- [1]\n// 2: i <- 0\n// 3: j <- 0\n// 4: while len(smart_nums) < n do\n// 5:    next_num <- min(smart_nums[i]*2, smart_nums[j]*3, smart_nums[k]*5)\n// 6:    if next_num == smart_nums[i]*2 then i <- i + 1\n// 7:    if next_num == smart_nums[j]*3 then j <- j + 1\n// 8:    if next_num == smart_nums[k]*5 then k <- k + 1\n// 9:    smart_nums.append(next_num)\n// 10: return smart_nums[-1]", "entry_point": "smartnumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = smartnumber(1);\n    if (!(compare(x0, 30))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = smartnumber(50);\n    if (!(compare(x1, 273))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = smartnumber(1000);\n    if (!(compare(x2, 2664))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find n\u2019th smart number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/123", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sum all amicable numbers from 1 to a specified number.\n */\nint amicableNumbersSum(int limit) {\n}\n\n// The pseudo code of the above function:\n// Input: limit: int\n// Output: sum: int\n// 1: def d(n): # returns sum of proper divisors of n\n// 2:    sum <- 0\n// 3:    for i <- 1 to n/2 do\n// 4:        if n % i == 0 then\n// 5:            sum <- sum + i\n// 6:    return sum\n// 7: sum <- 0\n// 8: for i <- 1 to limit-1 do\n// 9:    j <- d(i)\n// 10:   if i != j and d(j) == i then\n// 11:       sum <- sum + i\n// 12: return sum", "entry_point": "amicableNumbersSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = amicableNumbersSum(999);\n    if (!(compare(x0, 504))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = amicableNumbersSum(9999);\n    if (!(compare(x1, 31626))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = amicableNumbersSum(99);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sum all amicable numbers from 1 to a specified number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/125", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n */\nint findLength(string str, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: str: string, n: int\n// Output: max_diff: int\n// 1: max_diff <- 0\n// 2: count_0 <- 0, count_1 <- 0\n// 3: for i in range(n) do\n// 4:    if str[i] == '0' then\n// 5:        count_0 += 1\n// 6:    else:\n// 7:        count_1 += 1\n// 8:    diff <- count_0 - count_1\n// 9:    if diff > max_diff then\n// 10:       max_diff <- diff\n// 11:  if count_1 > count_0 then\n// 12:       count_1 <- 0\n// 13:       count_0 <- 0\n// 14:  if count_0 > count_1 then\n// 15:       count_0 <- 0\n// 16:       count_1 <- 0\n// 17: return max_diff", "entry_point": "findLength", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findLength(string(\"11000010001\"), 11);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findLength(string(\"10111\"), 5);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findLength(string(\"11011101100101\"), 14);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/126", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of common divisors of two given numbers.\n */\nint sum(int a, int b) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, b: int\n// Output: sum: int\n// 1: gcd <- __gcd(a, b)\n// 2: sum <- 0\n// 3: for i <- 1 to sqrt(gcd) do\n// 4:    if gcd % i == 0 then\n// 5:        if i == gcd/i then\n// 6:            sum <- sum + i\n// 7:        else\n// 8:            sum <- sum + i + gcd/i\n// 9: return sum", "entry_point": "sum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sum(10, 15);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sum(100, 150);\n    if (!(compare(x1, 93))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sum(4, 6);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of common divisors of two given numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/127", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply two integers without using the * operator in c++.\n */\nint multiplyInt(int x, int y) {\n}\n\n// The pseudo code of the above function:\n// Input: x: int, y: int\n// Output: res: int\n// 1: res <- 0\n// 2: while y > 0 do\n// 3:    if y % 2 != 0 then\n// 4:        res <- res + x\n// 5:    x <- x * 2\n// 6:    y <- y / 2\n// 7: return res", "entry_point": "multiplyInt", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = multiplyInt(10, 20);\n    if (!(compare(x0, 200))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = multiplyInt(5, 10);\n    if (!(compare(x1, 50))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = multiplyInt(4, 8);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to multiply two integers without using the * operator in c++.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/128", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to shortlist words that are longer than n from a given list of words.\n */\nvector<string> longWords(int n, string str) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int, str: list of strings\n// Output: result: list of strings\n// 1: result <- empty list\n// 2: for each word in str do\n// 3:    if length of word > n then\n// 4:        append word to result\n// 5: return result", "entry_point": "longWords", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = longWords(3, string(\"python is a programming language\"));\n    if (!(compare(x0, {string(\"python\"), string(\"programming\"), string(\"language\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = longWords(2, string(\"writing a program\"));\n    if (!(compare(x1, {string(\"writing\"), string(\"program\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = longWords(5, string(\"sorting list\"));\n    if (!(compare(x2, {string(\"sorting\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to shortlist words that are longer than n from a given list of words.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/129", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate magic square.\n */\nbool magicSquareTest(vector<vector<int>> myMatrix) {\n}\n\n// The pseudo code of the above function:\n// Input: myMatrix: list of lists of int\n// Output: True or False\n// 1: n <- len(myMatrix)\n// 2: sum1 <- 0\n// 3: sum2 <- 0\n// 4: for i <- 0 to n-1 do\n// 5:    sum1 <- sum1 + myMatrix[i][i]\n// 6:    sum2 <- sum2 + myMatrix[i][n-1-i]\n// 7: if sum1 != sum2 then\n// 8:    return False\n// 9: for i <- 0 to n-1 do\n// 10:    sum_row <- 0\n// 11:    sum_col <- 0\n// 12:    for j <- 0 to n-1 do\n// 13:        sum_row <- sum_row + myMatrix[i][j]\n// 14:        sum_col <- sum_col + myMatrix[j][i]\n// 15:    if sum_row != sum_col or sum_row != sum1 then\n// 16:        return False\n// 17: return True", "entry_point": "magicSquareTest", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = magicSquareTest(vector<vector<int>>{{7, 12, 1, 14}, {2, 13, 8, 11}, {16, 3, 10, 5}, {9, 6, 15, 4}});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = magicSquareTest(vector<vector<int>>{{2, 7, 6}, {9, 5, 1}, {4, 3, 8}});\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = magicSquareTest(vector<vector<int>>{{2, 7, 6}, {9, 5, 1}, {4, 3, 7}});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate magic square.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/130", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the item with maximum frequency in a given list.\n */\nvector<int> maxOccurrences(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of integers\n// Output: list of integers\n// 1: freq <- {}\n// 2: max_freq <- 0\n// 3: for num in nums do\n// 4:    if num not in freq then\n// 5:        freq[num] <- 1\n// 6:    else:\n// 7:        freq[num] <- freq[num] + 1\n// 8:        if freq[num] > max_freq then\n// 9:            max_freq <- freq[num]\n// 10: result <- []\n// 11: for num, f in freq.items() do\n// 12:    if f == max_freq then\n// 13:        result.append(num)\n// 14: return result", "entry_point": "maxOccurrences", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2});\n    if (!(compare(x0, {2, 5}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18});\n    if (!(compare(x1, {8, 2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = maxOccurrences(vector<int>{10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10});\n    if (!(compare(x2, {20, 3}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the item with maximum frequency in a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/131", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to reverse only the vowels of a given string.\n */\nstring reverseVowels(string str1) {\n}\n\n// The pseudo code of the above function:\n// Input: str1: str\n// Output: str2: str\n// 1: vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n// 2: left = 0, right = len(str1)-1\n// 3: str2 = list(str1)\n// 4: while left < right do\n// 5:    if str1[left] not in vowels then\n// 6:        left += 1\n// 7:    elif str1[right] not in vowels then\n// 8:        right -= 1\n// 9:    else:\n// 10:       str2[left], str2[right] = str2[right], str2[left]\n// 11:       left += 1\n// 12:       right -= 1\n// 13: return ''.join(str2)", "entry_point": "reverseVowels", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = reverseVowels(string(\"Python\"));\n    if (!(compare(x0, string(\"Python\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = reverseVowels(string(\"USA\"));\n    if (!(compare(x1, string(\"ASU\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = reverseVowels(string(\"ab\"));\n    if (!(compare(x2, string(\"ab\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to reverse only the vowels of a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/132", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert tuple to a string.\n */\nstring tupString(vector<string> tup1) {\n}\n\n// The pseudo code of the above function:\n// Input: tup1: tuple\n// Output: str: string\n// 1: str <- \"(\"\n// 2: for i in range(len(tup1)) do\n// 3:    str <- str + str(tup1[i])\n// 4:    if i < len(tup1)-1 then\n// 5:        str <- str + \",\"\n// 6: str <- str + \")\"\n// 7: return str", "entry_point": "tupString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = tupString(vector<string>{string(\"e\"), string(\"x\"), string(\"e\"), string(\"r\"), string(\"c\"), string(\"i\"), string(\"s\"), string(\"e\"), string(\"s\")});\n    if (!(compare(x0, string(\"exercises\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = tupString(vector<string>{string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")});\n    if (!(compare(x1, string(\"python\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = tupString(vector<string>{string(\"p\"), string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\")});\n    if (!(compare(x2, string(\"program\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert tuple to a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/133", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n */\nint sumNegativenum(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for each num in nums do\n// 3:    if num < 0 then\n// 4:        sum += num\n// 5: return sum", "entry_point": "sumNegativenum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumNegativenum(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17});\n    if (!(compare(x0, -32))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumNegativenum(vector<int>{10, 15, -14, 13, -18, 12, -20});\n    if (!(compare(x1, -52))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumNegativenum(vector<int>{19, -65, 57, 39, 152, -639, 121, 44, 90, -190});\n    if (!(compare(x2, -894))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/134", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the last element of given array is even or odd after performing an operation p times.\n */\nstring checkLast(vector<int> arr, int n, int p) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, n: int, p: int\n// Output: \"Even\" or \"Odd\"\n// 1: if arr[n-1] % 2 == 0 then\n// 2:    return \"Even\"\n// 3: else if p == 0 then\n// 4:    if arr[n-1] % 2 == 0 then\n// 5:        return \"Even\"\n// 6:    else\n// 7:        return \"Odd\"\n// 8: else if p % 2 == 0 then\n// 9:    return \"Even\"\n// 10: else\n// 11:    return \"Odd\"", "entry_point": "checkLast", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkLast(vector<int>{5, 7, 10}, 3, 1);\n    if (!(compare(x0, string(\"ODD\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkLast(vector<int>{2, 3}, 2, 3);\n    if (!(compare(x1, string(\"EVEN\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkLast(vector<int>{1, 2, 3}, 3, 1);\n    if (!(compare(x2, string(\"ODD\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the last element of given array is even or odd after performing an operation p times.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/135", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth hexagonal number.\n */\nint hexagonalNum(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: hex_num: int\n// 1: hex_num <- n * (2*n - 1)\n// 2: return hex_num", "entry_point": "hexagonalNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = hexagonalNum(10);\n    if (!(compare(x0, 190))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = hexagonalNum(5);\n    if (!(compare(x1, 45))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = hexagonalNum(7);\n    if (!(compare(x2, 91))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the nth hexagonal number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/136", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate electricity bill.\n */\ndouble calElectbill(int units) {\n}\n\n// The pseudo code of the above function:\n// Input: units: int\n// Output: bill: double\n// 1: if units <= 100 then\n// 2:    bill <- units * 0.5\n// 3: else if units <= 200 then\n// 4:    bill <- 50 + (units - 100) * 0.75\n// 5: else if units <= 300 then\n// 6:    bill <- 100 + (units - 200) * 1.20\n// 7: else\n// 8:    bill <- 220 + (units - 300) * 1.50\n// 9: return bill", "entry_point": "calElectbill", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = calElectbill(75);\n    if (!(compare(x0, 246.25))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = calElectbill(265);\n    if (!(compare(x1, 1442.75))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = calElectbill(100);\n    if (!(compare(x2, 327.5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate electricity bill.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/137", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ration of zeroes in an array of integers.\n */\ndouble zeroCount(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of integers\n// Output: ratio: float\n// 1: count <- 0\n// 2: for num in nums do\n// 3:    if num == 0 then\n// 4:        count <- count + 1\n// 5: ratio <- count / len(nums)\n// 6: return ratio", "entry_point": "zeroCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = zeroCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8});\n    if (!(compare(x0, 0.15))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = zeroCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8});\n    if (!(compare(x1, 0.0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = zeroCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17});\n    if (!(compare(x2, 0.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the ration of zeroes in an array of integers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/138", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n */\nbool isSumOfPowersOfTwo(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: True or False\n// 1: if n == 0 then\n// 2:    return False\n// 3: while n > 0 do\n// 4:    if n % 2 == 0 then\n// 5:        n <- n/2\n// 6:    else if n == 1 then\n// 7:        return True\n// 8:    else\n// 9:        return False\n// 10: return True", "entry_point": "isSumOfPowersOfTwo", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isSumOfPowersOfTwo(10);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isSumOfPowersOfTwo(7);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isSumOfPowersOfTwo(14);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/139", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the circumference of a circle.\n */\ndouble circleCircumference(int r) {\n}\n\n// The pseudo code of the above function:\n// Input: r: int\n// Output: c: double\n// 1: c <- 2 * pi * r\n// 2: return c", "entry_point": "circleCircumference", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = circleCircumference(10);\n    if (!(compare(x0, 62.830000000000005))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = circleCircumference(5);\n    if (!(compare(x1, 31.415000000000003))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = circleCircumference(4);\n    if (!(compare(x2, 25.132))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the circumference of a circle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/140", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract elements that occur singly in the given tuple list.\n */\nvector<int> extractSingly(vector<vector<int>> testList) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of tuples\n// Output: res: list of int\n// 1: freq_dict <- {}\n// 2: for t in test_list do\n// 3:    for i in t do\n// 4:        if i in freq_dict then\n// 5:            freq_dict[i] += 1\n// 6:        else:\n// 7:            freq_dict[i] = 1\n// 8: res <- []\n// 9: for k, v in freq_dict.items() do\n// 10:    if v == 1 then\n// 11:        res.append(k)\n// 12: return res", "entry_point": "extractSingly", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = extractSingly(vector<vector<int>>{{3, 4, 5}, {4, 5, 7}, {1, 4}});\n    if (!(compare(x0, {3, 4, 5, 7, 1}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = extractSingly(vector<vector<int>>{{1, 2, 3}, {4, 2, 3}, {7, 8}});\n    if (!(compare(x1, {1, 2, 3, 4, 7, 8}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = extractSingly(vector<vector<int>>{{7, 8, 9}, {10, 11, 12}, {10, 11}});\n    if (!(compare(x2, {7, 8, 9, 10, 11, 12}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract elements that occur singly in the given tuple list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/141", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of elements using pancake sort.\n */\nvector<int> pancakeSort(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of integers\n// Output: sorted_list: list of integers\n// 1: for i from len(nums) to 1 do\n// 2:    max_idx <- index of max element in nums[0:i]\n// 3:    flip(nums, max_idx+1)\n// 4:    flip(nums, i)\n// 5: return nums\n// \n// Function flip(nums, k):\n// 1: i <- 0\n// 2: while i < k/2 do\n// 3:    swap nums[i] with nums[k-i-1]\n// 4:    i <- i + 1", "entry_point": "pancakeSort", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = pancakeSort(vector<int>{15, 79, 25, 38, 69});\n    if (!(compare(x0, {15, 25, 38, 69, 79}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = pancakeSort(vector<int>{98, 12, 54, 36, 85});\n    if (!(compare(x1, {12, 36, 54, 85, 98}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = pancakeSort(vector<int>{41, 42, 32, 12, 23});\n    if (!(compare(x2, {12, 23, 32, 41, 42}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort a list of elements using pancake sort.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/142", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the same pair in three given lists.\n */\nint countSamepair(vector<int> list1, vector<int> list2, vector<int> list3) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of int, list2: list of int, list3: list of int\n// Output: count: int\n// 1: count <- 0\n// 2: for each x in list1 do\n// 3:    for each y in list2 do\n// 4:        if x == y and (x,y) in zip(list1,list2) then\n// 5:            for each z in list3 do\n// 6:                if y == z and (x,y,z) in zip(list1,list2,list3) then\n// 7:                    count <- count + 1\n// 8: return count", "entry_point": "countSamepair", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSamepair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 9}, vector<int>{2, 1, 3, 1, 2, 6, 7, 9});\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSamepair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 8}, vector<int>{2, 1, 3, 1, 2, 6, 7, 8});\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSamepair(vector<int>{1, 2, 3, 4, 2, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 8}, vector<int>{2, 1, 3, 1, 2, 6, 7, 8});\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count the same pair in three given lists.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/144", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of absolute differences in all pairs of the given array.\n */\nint sumPairs(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, n: int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for i in range(n) do\n// 3:    for j in range(i+1, n) do\n// 4:        sum <- sum + abs(arr[i] - arr[j])\n// 5: return sum", "entry_point": "sumPairs", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumPairs(vector<int>{1, 8, 9, 15, 16}, 5);\n    if (!(compare(x0, 74))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumPairs(vector<int>{1, 2, 3, 4}, 4);\n    if (!(compare(x1, 10))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumPairs(vector<int>{1, 2, 3, 4, 5, 7, 9, 11, 14}, 9);\n    if (!(compare(x2, 188))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of absolute differences in all pairs of the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/145", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum difference between any two elements in a given array.\n */\nint maxAbsDiff(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of int, n: int\n// Output: max_diff: int\n// 1: max_diff <- 0\n// 2: for i <- 0 to n-1 do\n// 3:    for j <- i+1 to n-1 do\n// 4:        if abs(arr[i]-arr[j]) > max_diff then\n// 5:            max_diff <- abs(arr[i]-arr[j])\n// 6: return max_diff", "entry_point": "maxAbsDiff", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxAbsDiff(vector<int>{2, 1, 5, 3}, 4);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxAbsDiff(vector<int>{9, 3, 2, 5, 1}, 5);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxAbsDiff(vector<int>{3, 2, 1}, 3);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the maximum difference between any two elements in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/146", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ascii value of total characters in a string.\n */\nint asciiValueString(string str1) {\n}\n\n// The pseudo code of the above function:\n// Input: str1: str\n// Output: ascii_value: int\n// 1: ascii_value <- 0\n// 2: for c in str1 do\n// 3:    ascii_value <- ascii_value + ord(c)\n// 4: return ascii_value", "entry_point": "asciiValueString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = asciiValueString(string(\"python\"));\n    if (!(compare(x0, 112))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = asciiValueString(string(\"Program\"));\n    if (!(compare(x1, 80))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = asciiValueString(string(\"Language\"));\n    if (!(compare(x2, 76))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the ascii value of total characters in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/147", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum total path sum in the given triangle.\n */\nint maxPathSum(vector<vector<int>> tri, int m, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: tri: list of lists, m: int, n: int\n// Output: max_sum: int\n// 1: for i from m-1 to 0 do\n// 2:    for j from 0 to i do\n// 3:        tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n// 4: return tri[0][0]", "entry_point": "maxPathSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxPathSum(vector<vector<int>>{{1, 0, 0}, {4, 8, 0}, {1, 5, 3}}, 2, 2);\n    if (!(compare(x0, 14))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxPathSum(vector<vector<int>>{{13, 0, 0}, {7, 4, 0}, {2, 4, 6}}, 2, 2);\n    if (!(compare(x1, 24))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxPathSum(vector<vector<int>>{{2, 0, 0}, {11, 18, 0}, {21, 25, 33}}, 2, 2);\n    if (!(compare(x2, 53))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum total path sum in the given triangle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/148", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to divide a number into two parts such that the sum of digits is maximum.\n */\nint sumDigitsTwoparts(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: sum: int\n// 1: Convert n to string and get the length of the string.\n// 2: If the length of the string is even, split it into two equal parts.\n// 3: If the length of the string is odd, split it into two parts such that the first part has one more digit than the second part.\n// 4: Convert the two parts to integers and add them.\n// 5: Return the sum.", "entry_point": "sumDigitsTwoparts", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumDigitsTwoparts(35);\n    if (!(compare(x0, 17))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumDigitsTwoparts(7);\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumDigitsTwoparts(100);\n    if (!(compare(x2, 19))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/149", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n */\nint longestSubseqWithDiffOne(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of int, n: int\n// Output: length: int\n// 1: Initialize a dictionary to store the length of subsequence ending at each element\n// 2: Initialize a variable \"maxLength\" to 1\n// 3: for each element in the array do the following:\n// 4:    if element-1 is in the dictionary, then update the length of subsequence ending at current element to be length of subsequence ending at element-1 + 1\n// 5:    if element+1 is in the dictionary, then update the length of subsequence ending at current element to be length of subsequence ending at element+1 + 1\n// 6:    if element is not in the dictionary, then set the length of subsequence ending at current element to be 1\n// 7:    update maxLength to be the maximum of maxLength and length of subsequence ending at current element\n// 8: return maxLength", "entry_point": "longestSubseqWithDiffOne", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = longestSubseqWithDiffOne(vector<int>{1, 2, 3, 4, 5, 3, 2}, 7);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = longestSubseqWithDiffOne(vector<int>{10, 9, 4, 5, 4, 8, 6}, 7);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = longestSubseqWithDiffOne(vector<int>{1, 2, 3, 2, 3, 7, 2, 1}, 8);\n    if (!(compare(x2, 7))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/150", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find whether the given number is present in the infinite sequence or not.\n */\nbool doesContainB(int a, int b, int c) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, b: int, c: int\n// Output: True or False\n// 1: if a == b then\n// 2:    return True\n// 3: if c == 0 then\n// 4:    return False\n// 5: return doesContainB(b, a%b, c-1)", "entry_point": "doesContainB", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = doesContainB(1, 7, 3);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = doesContainB(1, -3, 5);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = doesContainB(3, 2, 5);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find whether the given number is present in the infinite sequence or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/151", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number is co-prime or not.\n */\nbool isCoprime(int x, int y) {\n}\n\n// The pseudo code of the above function:\n// Input: x, y: int\n// Output: True or False\n// 1: if gcd(x, y) == 1 then\n// 2:    return True\n// 3: return False\n\n// Helper function gcd:\n// Input: x, y: int\n// Output: gcd: int\n// 1: if y == 0 then\n// 2:    return x\n// 3: return gcd(y, x % y)", "entry_point": "isCoprime", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isCoprime(17, 13);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isCoprime(15, 21);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isCoprime(25, 45);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given number is co-prime or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/152", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using merge sort.\n */\nvector<int> mergeSort(vector<int> x) {\n}\n\n// The pseudo code of the above function:\n// Input: x: list of integers\n// Output: sorted_x: list of integers\n// 1: if len(x) <= 1 then\n// 2:    return x\n// 3: mid <- len(x) // 2\n// 4: left <- mergeSort(x[:mid])\n// 5: right <- mergeSort(x[mid:])\n// 6: sorted_x <- []\n// 7: while len(left) > 0 and len(right) > 0 do\n// 8:    if left[0] < right[0] then\n// 9:        sorted_x.append(left[0])\n// 10:       left.pop(0)\n// 11:   else then\n// 12:       sorted_x.append(right[0])\n// 13:       right.pop(0)\n// 14: if len(left) > 0 then\n// 15:   sorted_x.extend(left)\n// 16: if len(right) > 0 then\n// 17:   sorted_x.extend(right)\n// 18: return sorted_x", "entry_point": "mergeSort", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = mergeSort(vector<int>{3, 4, 2, 6, 5, 7, 1, 9});\n    if (!(compare(x0, {1, 2, 3, 4, 5, 6, 7, 9}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = mergeSort(vector<int>{7, 25, 45, 78, 11, 33, 19});\n    if (!(compare(x1, {7, 11, 19, 25, 33, 45, 78}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = mergeSort(vector<int>{3, 1, 4, 9, 8});\n    if (!(compare(x2, {1, 3, 4, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort the given array by using merge sort.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/153", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the vertex of a parabola.\n */\nvector<double> parabolaVertex(int a, int b, int c) {\n}\n\n// The pseudo code of the above function:\n// Input: a, b, c: int\n// Output: vertex: vector of double\n// 1: xVertex <- -b / (2*a)\n// 2: yVertex <- a*xVertex*xVertex + b*xVertex + c\n// 3: return {xVertex, yVertex}", "entry_point": "parabolaVertex", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<double> x0 = parabolaVertex(5, 3, 2);\n    if (!(compare(x0, {-0.3, 1.55}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<double> x1 = parabolaVertex(9, 8, 4);\n    if (!(compare(x1, {-0.4444444444444444, 2.2222222222222223}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<double> x2 = parabolaVertex(2, 4, 6);\n    if (!(compare(x2, {-1.0, 4.0}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the vertex of a parabola.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/154", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract every specified element from a given two dimensional list.\n */\nvector<int> specifiedElement(vector<vector<int>> nums, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of lists, n: int\n// Output: result: list\n// 1: result <- []\n// 2: for each lst in nums do\n// 3:    if len(lst) >= n then\n// 4:        result.append(lst[n-1])\n// 5: return result", "entry_point": "specifiedElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0);\n    if (!(compare(x0, {1, 4, 7}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2);\n    if (!(compare(x1, {3, 6, 9}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 3);\n    if (!(compare(x2, {2, 2, 5}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract every specified element from a given two dimensional list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/155", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle all even bits of a given number.\n */\nint evenBitToggleNumber(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: result: int\n// 1: mask <- 0xAAAAAAAA // 1010101010101010 in binary\n// 2: result <- n xor mask\n// 3: return result", "entry_point": "evenBitToggleNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = evenBitToggleNumber(10);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = evenBitToggleNumber(20);\n    if (!(compare(x1, 30))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = evenBitToggleNumber(30);\n    if (!(compare(x2, 20))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to toggle all even bits of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/156", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\nvector<vector<int>> tupleIntStr(vector<vector<string>> tupleStr) {\n}\n\n// The pseudo code of the above function:\n// Input: tuple_str: list of tuples\n// Output: list of tuples\n// 1: new_tuple_list <- []\n// 2: for each t in tuple_str do\n// 3:    new_tuple <- []\n// 4:    for s in t do\n// 5:        new_tuple.append(int(s))\n// 6:    new_tuple_list.append(new_tuple)\n// 7: return new_tuple_list", "entry_point": "tupleIntStr", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = tupleIntStr(vector<vector<string>>{{string(\"333\"), string(\"33\")}, {string(\"1416\"), string(\"55\")}});\n    if (!(compare(x0, {{333, 33}, {1416, 55}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = tupleIntStr(vector<vector<string>>{{string(\"999\"), string(\"99\")}, {string(\"1000\"), string(\"500\")}});\n    if (!(compare(x1, {{999, 99}, {1000, 500}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = tupleIntStr(vector<vector<string>>{{string(\"666\"), string(\"66\")}, {string(\"1500\"), string(\"555\")}});\n    if (!(compare(x2, {{666, 66}, {1500, 555}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert a tuple of string values to a tuple of integer values.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/158", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find k number of operations required to make all elements equal.\n */\nint minOps(vector<int> arr, int n, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, n: int, k: int\n// Output: count: int\n// 1: count <- 0\n// 2: while True do\n// 3:    max_val <- max(arr)\n// 4:    min_val <- min(arr)\n// 5:    if max_val - min_val <= k then\n// 6:        return count\n// 7:    else do\n// 8:        arr[arr.index(max_val)] <- max_val - k\n// 9:        count <- count + 1", "entry_point": "minOps", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minOps(vector<int>{2, 2, 2, 2}, 4, 3);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minOps(vector<int>{4, 2, 6, 8}, 4, 3);\n    if (!(compare(x1, -1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minOps(vector<int>{21, 33, 9, 45, 63}, 5, 6);\n    if (!(compare(x2, 24))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find k number of operations required to make all elements equal.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/159", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print the season for the given month and day.\n */\nstring monthSeason(string month, int days) {\n}\n\n// The pseudo code of the above function:\n// Input: month: str, days: int\n// Output: season: str\n// 1: if month in ['December', 'January', 'February'] then\n// 2:    season <- 'Winter'\n// 3: elif month in ['March', 'April', 'May'] then\n// 4:    season <- 'Spring'\n// 5: elif month in ['June', 'July', 'August'] then\n// 6:    season <- 'Summer'\n// 7: else\n// 8:    season <- 'Fall'\n// 9: if month == 'March' and days >= 20 or month == 'June' and days >= 21 or month == 'September' and days >= 22 or month == 'December' and days >= 21 then\n// 10:    if season == 'Winter' then\n// 11:        season <- 'Spring'\n// 12:    elif season == 'Spring' then\n// 13:        season <- 'Summer'\n// 14:    elif season == 'Summer' then\n// 15:        season <- 'Fall'\n// 16:    else\n// 17:        season <- 'Winter'\n// 18: return season", "entry_point": "monthSeason", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = monthSeason(string(\"January\"), 4);\n    if (!(compare(x0, string(\"winter\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = monthSeason(string(\"October\"), 28);\n    if (!(compare(x1, string(\"autumn\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = monthSeason(string(\"June\"), 6);\n    if (!(compare(x2, string(\"spring\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to print the season for the given month and day.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/161", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all elements from a given list present in another list.\n */\nvector<int> removeElements(vector<int> list1, vector<int> list2) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of integers, list2: list of integers\n// Output: res: list of integers\n// 1: res <- []\n// 2: for each element in list1 do\n// 3:    if element not in list2 then\n// 4:        append element to res\n// 5: return res", "entry_point": "removeElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{2, 4, 6, 8});\n    if (!(compare(x0, {1, 3, 5, 7, 9, 10}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{1, 3, 5, 7});\n    if (!(compare(x1, {2, 4, 6, 8, 9, 10}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{5, 7});\n    if (!(compare(x2, {1, 2, 3, 4, 6, 8, 9, 10}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove all elements from a given list present in another list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/162", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n */\nint sumSeries(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for i <- n, i >= 1, i -= 2 do\n// 3:    sum <- sum + i\n// 4: return sum", "entry_point": "sumSeries", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumSeries(6);\n    if (!(compare(x0, 12))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumSeries(10);\n    if (!(compare(x1, 30))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumSeries(9);\n    if (!(compare(x2, 25))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/163", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the area of a regular polygon.\n */\ndouble areaPolygon(int s, int l) {\n}\n\n// The pseudo code of the above function:\n// Input: s: int (length of a side), l: int (number of sides)\n// Output: area: double\n// 1: apothem <- s / (2 * tan(pi/l))\n// 2: perimeter <- l * s\n// 3: area <- 0.5 * apothem * perimeter\n// 4: return area", "entry_point": "areaPolygon", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = areaPolygon(4, 20);\n    if (!(compare(x0, 400.00000000000006))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = areaPolygon(10, 15);\n    if (!(compare(x1, 1731.1969896610804))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = areaPolygon(9, 7);\n    if (!(compare(x2, 302.90938549487214))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the area of a regular polygon.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/164", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the sum of divisors are same or not.\n */\nbool areequivalent(int num1, int num2) {\n}\n\n// The pseudo code of the above function:\n// Input: num1: int, num2: int\n// Output: True or False\n// 1: sum1 <- 1\n// 2: sum2 <- 1\n// 3: for i <- 2 to sqrt(num1) do\n// 4:    if num1 % i == 0 then\n// 5:        sum1 <- sum1 + i + num1/i\n// 6: for i <- 2 to sqrt(num2) do\n// 7:    if num2 % i == 0 then\n// 8:        sum2 <- sum2 + i + num2/i\n// 9: if sum1 == sum2 then\n// 10:    return True\n// 11: else\n// 12:    return False", "entry_point": "areequivalent", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = areequivalent(36, 57);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = areequivalent(2, 4);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = areequivalent(23, 47);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the sum of divisors are same or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/165", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n */\nint countCharPosition(string str1) {\n}\n\n// The pseudo code of the above function:\n// Input: str1: str\n// Output: count: int\n// 1: count <- 0\n// 2: for i in range(len(str1)) do\n// 3:    if str1[i].lower() == chr(i+97) or str1[i].upper() == chr(i+97) then\n// 4:        count <- count + 1\n// 5: return count", "entry_point": "countCharPosition", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countCharPosition(string(\"xbcefg\"));\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countCharPosition(string(\"ABcED\"));\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countCharPosition(string(\"AbgdeF\"));\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/166", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the pairs with xor as an even number.\n */\nint findEvenPair(vector<int> a, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: a: list of integers, n: int\n// Output: count: int\n// 1: count <- 0\n// 2: for i in range(n) do\n// 3:    for j in range(i+1, n) do\n// 4:        if (a[i]^a[j])%2 == 0 then\n// 5:            count <- count + 1\n// 6: return count", "entry_point": "findEvenPair", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findEvenPair(vector<int>{5, 4, 7, 2, 1}, 5);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findEvenPair(vector<int>{7, 2, 8, 1, 0, 5, 11}, 7);\n    if (!(compare(x1, 9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findEvenPair(vector<int>{1, 2, 3}, 3);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the pairs with xor as an even number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/167", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find smallest power of 2 greater than or equal to n.\n */\nint nextPowerOf2(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: power: int\n// 1: power <- 1\n// 2: while power < n do\n// 3:    power <- power * 2\n// 4: return power", "entry_point": "nextPowerOf2", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = nextPowerOf2(0);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = nextPowerOf2(5);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = nextPowerOf2(17);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find smallest power of 2 greater than or equal to n.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/168", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of a number in a given array.\n */\nint frequency(vector<int> a, int x) {\n}\n\n// The pseudo code of the above function:\n// Input: a: list of integers, x: int\n// Output: freq: int\n// 1: freq <- 0\n// 2: for i in a do\n// 3:    if i == x then\n// 4:        freq <- freq + 1\n// 5: return freq", "entry_point": "frequency", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = frequency(vector<int>{1, 2, 3}, 4);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = frequency(vector<int>{1, 2, 2, 3, 3, 3, 4}, 3);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = frequency(vector<int>{0, 1, 2, 3, 1, 2}, 1);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the frequency of a number in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/169", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the nth pell number.\n */\nint getPell(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: pell: int\n// 1: if n == 0 then\n// 2:    return 0\n// 3: if n == 1 then\n// 4:    return 1\n// 5: pell_prev_prev <- 0\n// 6: pell_prev <- 1\n// 7: for i <- 2 to n do\n// 8:    pell <- 2 * pell_prev + pell_prev_prev\n// 9:    pell_prev_prev <- pell_prev\n// 10:   pell_prev <- pell\n// 11: return pell", "entry_point": "getPell", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getPell(4);\n    if (!(compare(x0, 12))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getPell(7);\n    if (!(compare(x1, 169))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getPell(8);\n    if (!(compare(x2, 408))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the nth pell number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/170", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sum of the numbers in a list between the indices of a specified range.\n */\nint sumRangeList(vector<int> list1, int m, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of int, m: int, n: int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for i <- m to n do\n// 3:    sum <- sum + list1[i]\n// 4: return sum", "entry_point": "sumRangeList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 8, 10);\n    if (!(compare(x0, 29))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 5, 7);\n    if (!(compare(x1, 16))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 7, 10);\n    if (!(compare(x2, 38))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/171", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a pentagon.\n */\nint perimeterPentagon(int a) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int\n// Output: perimeter: int\n// 1: perimeter <- 5*a\n// 2: return perimeter", "entry_point": "perimeterPentagon", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = perimeterPentagon(5);\n    if (!(compare(x0, 25))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = perimeterPentagon(10);\n    if (!(compare(x1, 50))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = perimeterPentagon(15);\n    if (!(compare(x2, 75))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the perimeter of a pentagon.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/172", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n */\nint countOccurance(string s) {\n}\n\n// The pseudo code of the above function:\n// Input: s: str\n// Output: count: int\n// 1: count <- 0\n// 2: for i in range(len(s)-2) do\n// 3:    if s[i:i+3] == \"std\" then\n// 4:        count <- count + 1\n// 5: return count", "entry_point": "countOccurance", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countOccurance(string(\"letstdlenstdporstd\"));\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countOccurance(string(\"truststdsolensporsd\"));\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countOccurance(string(\"makestdsostdworthit\"));\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/173", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove everything except alphanumeric characters from a string.\n */\nstring removeSplchar(string text) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: result: str\n// 1: result <- \"\"\n// 2: for i in range(len(text)) do\n// 3:    if text[i].isalnum() then\n// 4:        result += text[i]\n// 5: return result", "entry_point": "removeSplchar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeSplchar(string(\"python  @#&^%$*program123\"));\n    if (!(compare(x0, string(\"pythonprogram123\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeSplchar(string(\"python %^$@!^&*()  programming24%$^^()    language\"));\n    if (!(compare(x1, string(\"pythonprogramming24language\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeSplchar(string(\"python   ^%&^()(+_)(_^&67)                  program\"));\n    if (!(compare(x2, string(\"python67program\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove everything except alphanumeric characters from a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/175", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to verify validity of a string of parentheses.\n */\nbool isValidParenthese(string str1) {\n}\n\n// The pseudo code of the above function:\n// Input: str1: str\n// Output: True or False\n// 1: stack s\n// 2: for i in range(len(str1)) do\n// 3:    if str1[i] == '(' or str1[i] == '[' or str1[i] == '{' then\n// 4:        s.push(str1[i])\n// 5:    else if str1[i] == ')' or str1[i] == ']' or str1[i] == '}' then\n// 6:        if s.empty() then\n// 7:            return False\n// 8:        else if (str1[i] == ')' and s.top() != '(') or (str1[i] == ']' and s.top() != '[') or (str1[i] == '}' and s.top() != '{') then\n// 9:            return False\n// 10:       s.pop()\n// 11: if not s.empty() then\n// 12:    return False\n// 13: return True", "entry_point": "isValidParenthese", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isValidParenthese(string(\"(){}[]\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isValidParenthese(string(\"()[{)}\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isValidParenthese(string(\"()\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to verify validity of a string of parentheses.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/176", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a triangle.\n */\nint perimeterTriangle(int a, int b, int c) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, b: int, c: int\n// Output: perimeter: int\n// 1: perimeter <- a + b + c\n// 2: return perimeter", "entry_point": "perimeterTriangle", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = perimeterTriangle(10, 20, 30);\n    if (!(compare(x0, 60))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = perimeterTriangle(3, 4, 5);\n    if (!(compare(x1, 12))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = perimeterTriangle(25, 35, 45);\n    if (!(compare(x2, 105))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the perimeter of a triangle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/177", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find two distinct numbers such that their lcm lies within the given range.\n */\nvector<int> answer(int l, int r) {\n}\n\n// The pseudo code of the above function:\n// Input: l: int, r: int\n// Output: ans: list of 2 int\n// 1: for i <- l to r do\n// 2:    for j <- i+1 to r do\n// 3:        if lcm(i,j) <= r and lcm(i,j) >= l then\n// 4:            return [i,j]\n// 5: return []", "entry_point": "answer", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = answer(3, 8);\n    if (!(compare(x0, {3, 6}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = answer(2, 6);\n    if (!(compare(x1, {2, 4}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = answer(1, 3);\n    if (!(compare(x2, {1, 2}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find two distinct numbers such that their lcm lies within the given range.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/178", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search some literals strings in a string.\n */\nstring stringLiterals(vector<string> patterns, string text) {\n}\n\n// The pseudo code of the above function:\n// Input: patterns: list of str, text: str\n// Output: str\n// 1: result <- \"\"\n// 2: for pattern in patterns do\n// 3:    if pattern in text then\n// 4:        result += pattern + \" \"\n// 5: return result", "entry_point": "stringLiterals", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = stringLiterals(vector<string>{string(\"language\")}, string(\"python language\"));\n    if (!(compare(x0, string(\"Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = stringLiterals(vector<string>{string(\"program\")}, string(\"python language\"));\n    if (!(compare(x1, string(\"Not Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = stringLiterals(vector<string>{string(\"python\")}, string(\"programming language\"));\n    if (!(compare(x2, string(\"Not Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to search some literals strings in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/179", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find if the given number is a keith number or not.\n */\nbool isNumKeith(int x) {\n}\n\n// The pseudo code of the above function:\n// Input: x: int\n// Output: True or False\n// 1: digits <- []\n// 2: while x > 0 do\n// 3:    digits.append(x % 10)\n// 4:    x <- x // 10\n// 5: n <- len(digits)\n// 6: sequence <- digits + [0] * (n - 1)\n// 7: while sequence[-1] < x do\n// 8:    next_num <- sum(sequence[-n:])\n// 9:    sequence.append(next_num)\n// 10: if sequence[-1] == x then\n// 11:    return True\n// 12: return False", "entry_point": "isNumKeith", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isNumKeith(14);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isNumKeith(12);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isNumKeith(197);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find if the given number is a keith number or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/181", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest common prefix in the given set of strings.\n */\nstring commonPrefix(vector<string> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of strings, n: int\n// Output: prefix: str\n// 1: prefix <- \"\"\n// 2: for i in range(len(arr[0])) do\n// 3:    curr_char <- arr[0][i]\n// 4:    for j in range(1,n) do\n// 5:        if i >= len(arr[j]) or arr[j][i] != curr_char then\n// 6:            return prefix\n// 7:    prefix += curr_char\n// 8: return prefix", "entry_point": "commonPrefix", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = commonPrefix(vector<string>{string(\"tablets\"), string(\"tables\"), string(\"taxi\"), string(\"tamarind\")}, 4);\n    if (!(compare(x0, string(\"ta\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = commonPrefix(vector<string>{string(\"apples\"), string(\"ape\"), string(\"april\")}, 3);\n    if (!(compare(x1, string(\"ap\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = commonPrefix(vector<string>{string(\"teens\"), string(\"teenager\"), string(\"teenmar\")}, 3);\n    if (!(compare(x2, string(\"teen\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the longest common prefix in the given set of strings.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/183", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count all the distinct pairs having a difference of k in any array.\n */\nint countPairs(vector<int> arr, int n, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, n: int, k: int\n// Output: count: int\n// 1: sort arr\n// 2: count <- 0\n// 3: i <- 0, j <- 1\n// 4: while i < n and j < n do\n// 5:    if arr[j] - arr[i] == k then\n// 6:        count <- count + 1\n// 7:        i <- i + 1\n// 8:        j <- j + 1\n// 9:    else if arr[j] - arr[i] > k then\n// 10:       i <- i + 1\n// 11:   else j <- j + 1\n// 12: return count", "entry_point": "countPairs", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countPairs(vector<int>{1, 5, 3, 4, 2}, 5, 3);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countPairs(vector<int>{8, 12, 16, 4, 0, 20}, 6, 4);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countPairs(vector<int>{2, 4, 1, 3, 4}, 5, 2);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count all the distinct pairs having a difference of k in any array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/184", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all the values in a list that are greater than a specified number.\n */\nbool greaterSpecificnum(vector<int> list, int num) {\n}\n\n// The pseudo code of the above function:\n// Input: lst: list of integers, num: int\n// Output: ans: list of integers\n// 1: ans <- empty list\n// 2: for i in lst do\n// 3:    if i > num then\n// 4:        ans.append(i)\n// 5: return ans", "entry_point": "greaterSpecificnum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = greaterSpecificnum(vector<int>{220, 330, 500}, 200);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = greaterSpecificnum(vector<int>{12, 17, 21}, 20);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = greaterSpecificnum(vector<int>{1, 2, 3, 4}, 10);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find all the values in a list that are greater than a specified number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/185", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the focus of a parabola.\n */\nvector<double> parabolaFocus(int a, int b, int c) {\n}\n\n// The pseudo code of the above function:\n// Input: a, b, c: int\n// Output: focus: list of double\n// 1: p <- 1/(4*a)\n// 2: q <- -b/(2*a)\n// 3: focus <- [q, c-1/(4*a)]\n// 4: return focus", "entry_point": "parabolaFocus", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<double> x0 = parabolaFocus(5, 3, 2);\n    if (!(compare(x0, {-0.3, 1.6}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<double> x1 = parabolaFocus(9, 8, 4);\n    if (!(compare(x1, {-0.4444444444444444, 2.25}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<double> x2 = parabolaFocus(2, 4, 6);\n    if (!(compare(x2, {-1.0, 4.125}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the focus of a parabola.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/186", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search some literals strings in a string by using regex.\n */\nstring checkLiterals(string text, vector<string> patterns) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str, patterns: list of str\n// Output: result: str\n// 1: regex_pattern <- '|'.join(map(re.escape, patterns))\n// 2: match <- re.search(regex_pattern, text)\n// 3: if match then\n// 4:    result <- match.group()\n// 5: else:\n// 6:    result <- None\n// 7: return result", "entry_point": "checkLiterals", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"fox\")});\n    if (!(compare(x0, string(\"Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"horse\")});\n    if (!(compare(x1, string(\"Not Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"lazy\")});\n    if (!(compare(x2, string(\"Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to search some literals strings in a string by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/187", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest common subsequence for the given two sequences.\n */\nint longestCommonSubsequence(string x, string y, int m, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: x: str, y: str, m: int, n: int\n// Output: length of longest common subsequence: int\n// 1: if m == 0 or n == 0 then\n// 2:    return 0\n// 3: if x[m-1] == y[n-1] then\n// 4:    return 1 + longestCommonSubsequence(x, y, m-1, n-1)\n// 5: else:\n// 6:    return max(longestCommonSubsequence(x, y, m, n-1), longestCommonSubsequence(x, y, m-1, n))", "entry_point": "longestCommonSubsequence", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = longestCommonSubsequence(string(\"AGGTAB\"), string(\"GXTXAYB\"), 6, 7);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = longestCommonSubsequence(string(\"ABCDGH\"), string(\"AEDFHR\"), 6, 6);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = longestCommonSubsequence(string(\"AXYT\"), string(\"AYZX\"), 4, 4);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the longest common subsequence for the given two sequences.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/188", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented by product of two squares or not.\n */\nbool prodSquare(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: True or False\n// 1: for i <- 0 to sqrt(n) do\n// 2:    for j <- i to sqrt(n) do\n// 3:        if i*i*j*j == n then\n// 4:            return True\n// 5: return False", "entry_point": "prodSquare", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = prodSquare(25);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = prodSquare(30);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = prodSquare(16);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given number can be represented by product of two squares or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/189", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first missing positive number.\n */\nint firstMissingPositive(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, n: int\n// Output: int\n// 1: for i in range(n) do\n// 2:    while arr[i] > 0 and arr[i] <= n and arr[arr[i]-1] != arr[i] do\n// 3:        swap(arr[i], arr[arr[i]-1])\n// 4: for i in range(n) do\n// 5:    if arr[i] != i+1 then\n// 6:        return i+1\n// 7: return n+1", "entry_point": "firstMissingPositive", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = firstMissingPositive(vector<int>{1, 2, 3, -1, 5}, 5);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = firstMissingPositive(vector<int>{0, -1, -2, 1, 5, 8}, 6);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = firstMissingPositive(vector<int>{0, 1, 2, 5, -8}, 5);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the first missing positive number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/190", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of integral co-ordinates that lie inside a square.\n */\nint countIntgralPoints(int x1, int y1, int x2, int y2) {\n}\n\n// The pseudo code of the above function:\n// Input: x1: int, y1: int, x2: int, y2: int\n// Output: count: int\n// 1: dx <- abs(x2 - x1)\n// 2: dy <- abs(y2 - y1)\n// 3: gcd <- __gcd(dx, dy)\n// 4: count <- gcd + 1\n// 5: return count", "entry_point": "countIntgralPoints", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countIntgralPoints(1, 1, 4, 4);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countIntgralPoints(1, 2, 1, 2);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countIntgralPoints(4, 2, 6, 4);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the number of integral co-ordinates that lie inside a square.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/191", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month name contains 30 days or not.\n */\nbool checkMonthnumber(string monthname3) {\n}\n\n// The pseudo code of the above function:\n// Input: monthname3: str\n// Output: True or False\n// 1: if monthname3 in [\"Apr\", \"Jun\", \"Sep\", \"Nov\"] then\n// 2:    return True\n// 3: else\n// 4:    return False", "entry_point": "checkMonthnumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkMonthnumber(string(\"February\"));\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkMonthnumber(string(\"June\"));\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkMonthnumber(string(\"April\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether the given month name contains 30 days or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/192", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether a string has atleast one letter and one number.\n */\nbool checkString(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: True or False\n// 1: has_letter <- False\n// 2: has_number <- False\n// 3: for ch in str do\n// 4:    if ch.isalpha() then\n// 5:        has_letter <- True\n// 6:    elif ch.isdigit() then\n// 7:        has_number <- True\n// 8: if has_letter and has_number then\n// 9:    return True\n// 10: else:\n// 11:    return False", "entry_point": "checkString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkString(string(\"thishasboth29\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkString(string(\"python\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether a string has atleast one letter and one number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/193", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove the duplicates from the given tuple.\n */\nvector<int> removeTuple(vector<int> testTup) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup: tuple\n// Output: unique_tup: tuple\n// 1: unique_tup <- ()\n// 2: for each element in test_tup do\n// 3:    if element not in unique_tup then\n// 4:        add element to unique_tup\n// 5: return unique_tup", "entry_point": "removeTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = removeTuple(vector<int>{1, 3, 5, 2, 3, 5, 1, 1, 3});\n    if (!(compare(x0, {1, 2, 3, 5}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = removeTuple(vector<int>{2, 3, 4, 4, 5, 6, 6, 7, 8, 8});\n    if (!(compare(x1, {2, 3, 4, 5, 6, 7, 8}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = removeTuple(vector<int>{11, 12, 13, 11, 11, 12, 14, 13});\n    if (!(compare(x2, {11, 12, 13, 14}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove the duplicates from the given tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/194", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert octal number to decimal number.\n */\nint octalToDecimal(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: decimal: int\n// 1: decimal <- 0\n// 2: power <- 0\n// 3: while n > 0 do\n// 4:    digit <- n % 10\n// 5:    decimal <- decimal + digit * pow(8, power)\n// 6:    power <- power + 1\n// 7:    n <- n / 10\n// 8: return decimal", "entry_point": "octalToDecimal", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = octalToDecimal(25);\n    if (!(compare(x0, 21))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = octalToDecimal(30);\n    if (!(compare(x1, 24))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = octalToDecimal(40);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to convert octal number to decimal number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/195", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first position of an element in a sorted array.\n */\nint first(vector<int> arr, int x, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: sorted array, x: int, n: int (size of array)\n// Output: index: int\n// 1: low <- 0, high <- n-1\n// 2: while low <= high do\n// 3:    mid <- (low + high) / 2\n// 4:    if x > arr[mid] then\n// 5:        low <- mid + 1\n// 6:    else if x < arr[mid] then\n// 7:        high <- mid - 1\n// 8:    else:\n// 9:        if mid == 0 or arr[mid-1] != x then\n// 10:           return mid\n// 11:       high <- mid - 1\n// 12: return -1", "entry_point": "first", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = first(vector<int>{1, 2, 3, 4, 5, 6, 6}, 6, 6);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = first(vector<int>{1, 2, 2, 2, 3, 2, 2, 4, 2}, 2, 9);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = first(vector<int>{1, 2, 3}, 1, 3);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the first position of an element in a sorted array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/196", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all the tuples with length k.\n */\nvector<vector<int>> removeTuples(vector<vector<int>> testList, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of tuples, k: int\n// Output: new_list: list of tuples\n// 1: new_list <- []\n// 2: for each t in test_list do\n// 3:    if len(t) != k then\n// 4:        new_list.append(t)\n// 5: return new_list", "entry_point": "removeTuples", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = removeTuples(vector<vector<int>>{{4, 5}, {4}, {8, 6, 7}, {1}, {3, 4, 6, 7}}, 1);\n    if (!(compare(x0, {{4, 5}, {8, 6, 7}, {3, 4, 6, 7}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = removeTuples(vector<vector<int>>{{4, 5}, {4, 5}, {6, 7}, {1, 2, 3}, {3, 4, 6, 7}}, 2);\n    if (!(compare(x1, {{1, 2, 3}, {3, 4, 6, 7}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = removeTuples(vector<vector<int>>{{1, 4, 4}, {4, 3}, {8, 6, 7}, {1}, {3, 6, 7}}, 3);\n    if (!(compare(x2, {{4, 3}, {1}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove all the tuples with length k.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/197", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the exponentiation of the given two tuples.\n */\nvector<int> findExponentio(vector<int> testTup1, vector<int> testTup2) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup1: tuple, test_tup2: tuple\n// Output: result: tuple\n// 1: result <- (test_tup1[0] ** test_tup2[0], test_tup1[1] ** test_tup2[1])\n// 2: return result", "entry_point": "findExponentio", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = findExponentio(vector<int>{10, 4, 5, 6}, vector<int>{5, 6, 7, 5});\n    if (!(compare(x0, {100000, 4096, 78125, 7776}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = findExponentio(vector<int>{11, 5, 6, 7}, vector<int>{6, 7, 8, 6});\n    if (!(compare(x1, {1771561, 78125, 1679616, 117649}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = findExponentio(vector<int>{12, 6, 7, 8}, vector<int>{7, 8, 9, 7});\n    if (!(compare(x2, {35831808, 1679616, 40353607, 2097152}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to perform the exponentiation of the given two tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/198", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest triangle that can be inscribed in an ellipse.\n */\ndouble largestTriangle(int a, int b) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, b: int\n// Output: area: double\n// 1: semi_major_axis <- max(a, b)\n// 2: semi_minor_axis <- min(a, b)\n// 3: area <- 0.25 * pi * semi_major_axis * semi_minor_axis\n// 4: return area", "entry_point": "largestTriangle", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = largestTriangle(4, 2);\n    if (!(compare(x0, 10.392304845413264))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = largestTriangle(5, 7);\n    if (!(compare(x1, 4.639421805988064))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = largestTriangle(9, 1);\n    if (!(compare(x2, 105.2220865598093))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/199", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find highest power of 2 less than or equal to given number.\n */\nint highestPowerOf2(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: pow: int\n// 1: pow <- 1\n// 2: while pow <= n do\n// 3:    pow <- pow * 2\n// 4: return pow / 2", "entry_point": "highestPowerOf2", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = highestPowerOf2(10);\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = highestPowerOf2(19);\n    if (!(compare(x1, 16))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = highestPowerOf2(32);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find highest power of 2 less than or equal to given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/200", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all index positions of the maximum values in a given list.\n */\nvector<int> positionMax(vector<int> list1) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of integers\n// Output: res: list of integers\n// 1: max_val <- max(list1)\n// 2: res <- empty list\n// 3: for i in range(len(list1)) do\n// 4:    if list1[i] == max_val then\n// 5:        res.append(i)\n// 6: return res", "entry_point": "positionMax", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = positionMax(vector<int>{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54});\n    if (!(compare(x0, {7}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = positionMax(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5});\n    if (!(compare(x1, {7, 8, 9, 10}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = positionMax(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12});\n    if (!(compare(x2, {11}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find all index positions of the maximum values in a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/201", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the elements in a list are same or not.\n */\nbool chklist(vector<string> lst) {\n}\n\n// The pseudo code of the above function:\n// Input: lst: list of str\n// Output: True or False\n// 1: for i in range(1, len(lst)) do\n// 2:    if lst[i] != lst[0] then\n// 3:        return False\n// 4: return True", "entry_point": "chklist", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = chklist(vector<string>{string(\"one\"), string(\"one\"), string(\"one\")});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = chklist(vector<string>{string(\"one\"), string(\"Two\"), string(\"Three\")});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = chklist(vector<string>{string(\"bigdata\"), string(\"python\"), string(\"Django\")});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the elements in a list are same or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/202", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove even characters in a string.\n */\nstring removeEven(string str1) {\n}\n\n// The pseudo code of the above function:\n// Input: str1: str\n// Output: str2: str\n// 1: str2 <- \"\"\n// 2: for i in range(len(str1)) do\n// 3:    if i % 2 != 0 then\n// 4:        str2 += str1[i]\n// 5: return str2", "entry_point": "removeEven", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeEven(string(\"python\"));\n    if (!(compare(x0, string(\"pto\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeEven(string(\"program\"));\n    if (!(compare(x1, string(\"porm\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeEven(string(\"language\"));\n    if (!(compare(x2, string(\"lnug\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove even characters in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/203", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the hamming distance between given two integers.\n */\nint hammingDistance(int n1, int n2) {\n}\n\n// The pseudo code of the above function:\n// Input: n1: int, n2: int\n// Output: hamming_distance: int\n// 1: xor_result <- n1 XOR n2\n// 2: hamming_distance <- 0\n// 3: while xor_result > 0 do\n// 4:    if xor_result % 2 == 1 then\n// 5:        hamming_distance <- hamming_distance + 1\n// 6:    xor_result <- xor_result / 2\n// 7: return hamming_distance", "entry_point": "hammingDistance", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = hammingDistance(4, 8);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = hammingDistance(2, 4);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = hammingDistance(1, 2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the hamming distance between given two integers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/204", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the occurrence of a given character in a string.\n */\nint count(string s, string c) {\n}\n\n// The pseudo code of the above function:\n// Input: s: str, c: str\n// Output: count: int\n// 1: count <- 0\n// 2: for i in range(len(s)) do\n// 3:    if s[i:i+len(c)] == c then\n// 4:        count <- count + 1\n// 5: return count", "entry_point": "count", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = count(string(\"abcc\"), string(\"c\"));\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = count(string(\"ababca\"), string(\"a\"));\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = count(string(\"mnmm0pm\"), string(\"m\"));\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the occurrence of a given character in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/205", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the inversions of tuple elements in the given tuple list.\n */\nvector<int> inversionElements(vector<int> testTup) {\n}\n\n// The pseudo code of the above function:\n// Input: testTup: tuple\n// Output: invList: list of ints\n// 1: invList <- []\n// 2: for i in range(len(testTup)) do\n// 3:    for j in range(i+1, len(testTup)) do\n// 4:        if testTup[i] > testTup[j] then\n// 5:            invList.append((i,j))\n// 6: return invList", "entry_point": "inversionElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = inversionElements(vector<int>{7, 8, 9, 1, 10, 7});\n    if (!(compare(x0, {-8, -9, -10, -2, -11, -8}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = inversionElements(vector<int>{2, 4, 5, 6, 1, 7});\n    if (!(compare(x1, {-3, -5, -6, -7, -2, -8}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = inversionElements(vector<int>{8, 9, 11, 14, 12, 13});\n    if (!(compare(x2, {-9, -10, -12, -15, -13, -14}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the inversions of tuple elements in the given tuple list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/206", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the adjacent element concatenation in the given tuples.\n */\nvector<string> concatenateElements(vector<string> testTup) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup: list of tuples\n// Output: result: list of strings\n// 1: result <- []\n// 2: for tup in test_tup do\n// 3:    temp_str <- \"\"\n// 4:    for i in range(len(tup)-1) do\n// 5:        temp_str += str(tup[i]) + str(tup[i+1])\n// 6:    result.append(temp_str)\n// 7: return result", "entry_point": "concatenateElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = concatenateElements(vector<string>{string(\"DSP \"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"UTS\")});\n    if (!(compare(x0, {string(\"DSP IS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL UTS\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = concatenateElements(vector<string>{string(\"RES \"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"QESR\")});\n    if (!(compare(x1, {string(\"RES IS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL QESR\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = concatenateElements(vector<string>{string(\"MSAM\"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"SKD\")});\n    if (!(compare(x2, {string(\"MSAMIS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL SKD\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to perform the adjacent element concatenation in the given tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/207", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n */\nint findLongestRepeatingSubseq(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: longest_count: int\n// 1: n <- length of str\n// 2: initialize a n x n matrix dp with 0s\n// 3: for i <- 1 to n do\n// 4:    for j <- 1 to n do\n// 5:        if str[i-1] == str[j-1] and i != j then\n// 6:            dp[i][j] <- dp[i-1][j-1] + 1\n// 7:        else:\n// 8:            dp[i][j] <- max(dp[i-1][j], dp[i][j-1])\n// 9: return dp[n][n]", "entry_point": "findLongestRepeatingSubseq", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findLongestRepeatingSubseq(string(\"AABEBCDD\"));\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findLongestRepeatingSubseq(string(\"aabb\"));\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findLongestRepeatingSubseq(string(\"aab\"));\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/208", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check the given decimal with a precision of 2 by using regex.\n */\nbool isDecimal(string num) {\n}\n\n// The pseudo code of the above function:\n// Input: num: str\n// Output: True or False\n// 1: pattern <- \"^\\d+\\.\\d{2}$\"\n// 2: if regex_match(num, pattern) then\n// 3:    return True\n// 4: else\n// 5:    return False", "entry_point": "isDecimal", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isDecimal(string(\"123.11\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isDecimal(string(\"0.21\"));\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isDecimal(string(\"123.1214\"));\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check the given decimal with a precision of 2 by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/209", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to delete the smallest element from the given heap and then insert a new item.\n */\nvector<int> heapReplace(vector<int> heap, int a) {\n}\n\n// The pseudo code of the above function:\n// Input: heap: list, a: int\n// Output: heap: list\n// 1: heap[0] <- a\n// 2: i <- 0\n// 3: while True do\n// 4:    left <- 2*i + 1\n// 5:    right <- 2*i + 2\n// 6:    if left >= len(heap) then\n// 7:        break\n// 8:    max_child <- left\n// 9:    if right < len(heap) and heap[right] > heap[left] then\n// 10:       max_child <- right\n// 11:   if heap[i] < heap[max_child] then\n// 12:       heap[i], heap[max_child] <- heap[max_child], heap[i]\n// 13:       i <- max_child\n// 14:   else:\n// 15:       break\n// 16: return heap", "entry_point": "heapReplace", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = heapReplace(vector<int>{25, 44, 68, 21, 39, 23, 89}, 21);\n    if (!(compare(x0, {21, 25, 23, 44, 39, 68, 89}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = heapReplace(vector<int>{25, 44, 68, 21, 39, 23, 89}, 110);\n    if (!(compare(x1, {23, 25, 68, 44, 39, 110, 89}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = heapReplace(vector<int>{25, 44, 68, 21, 39, 23, 89}, 500);\n    if (!(compare(x2, {23, 25, 68, 44, 39, 500, 89}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to delete the smallest element from the given heap and then insert a new item.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/210", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n */\nbool isAllowedSpecificChar(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: True or False\n// 1: pattern <- regex pattern for allowed characters (a-z, A-Z, 0-9)\n// 2: if regex_match(str, pattern) then\n// 3:    return True\n// 4: else\n// 5:    return False", "entry_point": "isAllowedSpecificChar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isAllowedSpecificChar(string(\"ABCDEFabcdef123450\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isAllowedSpecificChar(string(\"*&%@#!}{\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isAllowedSpecificChar(string(\"HELLOhowareyou98765\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/211", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count numbers whose oth and nth bits are set.\n */\nint countNum(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: count: int\n// 1: count <- 0\n// 2: for i in range(32) do\n// 3:    if n & (1 << i) and n & (1 << (i-1)) then\n// 4:        count <- count + 1\n// 5: return count", "entry_point": "countNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countNum(2);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countNum(3);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countNum(1);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count numbers whose oth and nth bits are set.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/212", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fourth power of n natural numbers.\n */\nint fourthPowerSum(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for i <- 1 to n do\n// 3:    sum <- sum + i^4\n// 4: return sum", "entry_point": "fourthPowerSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = fourthPowerSum(2);\n    if (!(compare(x0, 17))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = fourthPowerSum(4);\n    if (!(compare(x1, 354))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = fourthPowerSum(6);\n    if (!(compare(x2, 2275))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of fourth power of n natural numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/213", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the concatenation of two string tuples.\n */\nvector<string> concatenateStrings(vector<string> testTup1, vector<string> testTup2) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup1: tuple of strings, test_tup2: tuple of strings\n// Output: result: tuple of strings\n// 1: result <- empty tuple\n// 2: for i <- 0 to len(test_tup1) do\n// 3:    result.push_back(test_tup1[i] + test_tup2[i])\n// 4: return result", "entry_point": "concatenateStrings", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = concatenateStrings(vector<string>{string(\"Manjeet\"), string(\"Nikhil\"), string(\"Akshat\")}, vector<string>{string(\" Singh\"), string(\" Meherwal\"), string(\" Garg\")});\n    if (!(compare(x0, {string(\"Manjeet Singh\"), string(\"Nikhil Meherwal\"), string(\"Akshat Garg\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = concatenateStrings(vector<string>{string(\"Shaik\"), string(\"Ayesha\"), string(\"Sanya\")}, vector<string>{string(\" Dawood\"), string(\" Begum\"), string(\" Singh\")});\n    if (!(compare(x1, {string(\"Shaik Dawood\"), string(\"Ayesha Begum\"), string(\"Sanya Singh\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = concatenateStrings(vector<string>{string(\"Harpreet\"), string(\"Priyanka\"), string(\"Muskan\")}, vector<string>{string(\"Kour\"), string(\" Agarwal\"), string(\"Sethi\")});\n    if (!(compare(x2, {string(\"HarpreetKour\"), string(\"Priyanka Agarwal\"), string(\"MuskanSethi\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to perform the concatenation of two string tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/214", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert radians to degrees.\n */\ndouble degreeRadian(int radian) {\n}\n\n// The pseudo code of the above function:\n// Input: radian: int\n// Output: degree: double\n// 1: degree <- radian * 180 / pi\n// 2: return degree", "entry_point": "degreeRadian", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = degreeRadian(90);\n    if (!(compare(x0, 5156.620156177409))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = degreeRadian(60);\n    if (!(compare(x1, 3437.746770784939))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = degreeRadian(120);\n    if (!(compare(x2, 6875.493541569878))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert radians to degrees.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/218", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum operations required to make two numbers equal.\n */\nint minOperations(int a, int b) {\n}\n\n// The pseudo code of the above function:\n// Input: a, b: int\n// Output: count: int\n// 1: count <- 0\n// 2: while a != b do\n// 3:    if a > b then\n// 4:        a <- a - b\n// 5:    else\n// 6:        b <- b - a\n// 7:    count <- count + 1\n// 8: return count", "entry_point": "minOperations", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minOperations(2, 4);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minOperations(4, 10);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minOperations(1, 4);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the minimum operations required to make two numbers equal.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/219", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract maximum and minimum k elements in the given tuple.\n */\nvector<int> extractMinMax(vector<int> testTup, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup: tuple, k: int\n// Output: res: list\n// 1: res <- []\n// 2: sort test_tup\n// 3: for i in range(k) do\n// 4:    res.append(test_tup[i])\n// 5:    res.append(test_tup[-(i+1)])\n// 6: return res", "entry_point": "extractMinMax", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = extractMinMax(vector<int>{5, 20, 3, 7, 6, 8}, 2);\n    if (!(compare(x0, {3, 5, 8, 20}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = extractMinMax(vector<int>{4, 5, 6, 1, 2, 7}, 3);\n    if (!(compare(x1, {1, 2, 4, 5, 6, 7}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = extractMinMax(vector<int>{2, 3, 4, 8, 9, 11, 7}, 4);\n    if (!(compare(x2, {2, 3, 4, 7, 8, 9, 11}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract maximum and minimum k elements in the given tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/220", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n */\nstring replaceMaxSpecialchar(string text, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str, n: int\n// Output: modified_text: str\n// 1: count <- 0\n// 2: modified_text <- \"\"\n// 3: for i in range(len(text)) do\n// 4:    if (text[i] == ' ' or text[i] == ',' or text[i] == '.') and count < n then\n// 5:        modified_text += ':'\n// 6:        count += 1\n// 7:    else:\n// 8:        modified_text += text[i]\n// 9: return modified_text", "entry_point": "replaceMaxSpecialchar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = replaceMaxSpecialchar(string(\"Python language, Programming language.\"), 2);\n    if (!(compare(x0, string(\"Python:language: Programming language.\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = replaceMaxSpecialchar(string(\"a b c,d e f\"), 3);\n    if (!(compare(x1, string(\"a:b:c:d e f\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = replaceMaxSpecialchar(string(\"ram reshma,ram rahim\"), 1);\n    if (!(compare(x2, string(\"ram:reshma,ram rahim\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/221", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first even number in a given list of numbers.\n */\nint firstEven(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of integers\n// Output: even_num: integer\n// 1: for num in nums do\n// 2:    if num % 2 == 0 then\n// 3:        return num\n// 4: return None", "entry_point": "firstEven", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = firstEven(vector<int>{2, 3, 4});\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = firstEven(vector<int>{5, 6, 7});\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the first even number in a given list of numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/222", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if all the elements in tuple have same data type or not.\n */\nbool checkType(vector<int> testTuple) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tuple: tuple\n// Output: True or False\n// 1: typeOfFirst <- type(test_tuple[0])\n// 2: for each element in test_tuple[1:] do\n// 3:    if type(element) != typeOfFirst then\n// 4:        return False\n// 5: return True", "entry_point": "checkType", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkType(vector<int>{5, 6, 7, 3, 5, 6});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x2 = checkType(vector<int>{3, 2, 1, 4, 5});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if all the elements in tuple have same data type or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/223", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check for majority element in the given sorted array.\n */\nbool isMajority(vector<int> arr, int n, int x) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of int, n: int, x: int\n// Output: True or False\n// 1: count <- 0\n// 2: for i in range(n) do\n// 3:    if arr[i] == x then\n// 4:        count <- count + 1\n// 5:    else if count > n/2 then\n// 6:        return True\n// 7: return False", "entry_point": "isMajority", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isMajority(vector<int>{1, 2, 3, 3, 3, 3, 10}, 7, 3);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isMajority(vector<int>{1, 1, 2, 4, 4, 4, 6, 6}, 8, 4);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isMajority(vector<int>{1, 1, 1, 2, 2}, 5, 1);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check for majority element in the given sorted array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/224", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count set bits of a given number.\n */\nint countSetBits(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: count: int\n// 1: count <- 0\n// 2: while n > 0 do\n// 3:    if n & 1 == 1 then\n// 4:        count <- count + 1\n// 5:    n <- n >> 1\n// 6: return count", "entry_point": "countSetBits", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSetBits(2);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSetBits(4);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSetBits(6);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count set bits of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/225", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum element in a sorted and rotated array.\n */\nint findMin(vector<int> arr, int low, int high) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of int, low: int, high: int\n// Output: min: int\n// 1: if high < low then\n// 2:    return arr[0]\n// 3: if high == low then\n// 4:    return arr[low]\n// 5: mid <- (low + high) / 2\n// 6: if mid < high and arr[mid+1] < arr[mid] then\n// 7:    return arr[mid+1]\n// 8: if mid > low and arr[mid] < arr[mid-1] then\n// 9:    return arr[mid]\n// 10: if arr[high] > arr[mid] then\n// 11:    return findMin(arr, low, mid-1)\n// 12: return findMin(arr, mid+1, high)", "entry_point": "findMin", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMin(vector<int>{1, 2, 3, 4, 5}, 0, 4);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMin(vector<int>{4, 6, 8}, 0, 2);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMin(vector<int>{2, 3, 5, 7, 9}, 0, 4);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the minimum element in a sorted and rotated array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/226", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove the characters which have odd index values of a given string.\n */\nstring oddValuesString(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: new_str: str\n// 1: new_str <- ''\n// 2: for i in range(len(str)) do\n// 3:    if i % 2 == 0 then\n// 4:        new_str += str[i]\n// 5: return new_str", "entry_point": "oddValuesString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = oddValuesString(string(\"abcdef\"));\n    if (!(compare(x0, string(\"ace\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = oddValuesString(string(\"python\"));\n    if (!(compare(x1, string(\"pto\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = oddValuesString(string(\"data\"));\n    if (!(compare(x2, string(\"dt\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to remove the characters which have odd index values of a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/227", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find minimum of three numbers.\n */\nint minOfThree(int a, int b, int c) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, b: int, c: int\n// Output: min: int\n// 1: if a <= b and a <= c then\n// 2:    return a\n// 3: else if b <= a and b <= c then\n// 4:    return b\n// 5: else\n// 6:    return c", "entry_point": "minOfThree", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minOfThree(10, 20, 0);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minOfThree(19, 15, 18);\n    if (!(compare(x1, 15))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minOfThree(-10, -20, -30);\n    if (!(compare(x2, -30))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find minimum of three numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/228", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the bits are unset in the given range or not.\n */\nbool allBitsSetInTheGivenRange(int n, int l, int r) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int, l: int, r: int\n// Output: True or False\n// 1: mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n// 2: if (n & mask) == 0 then\n// 3:    return True\n// 4: else\n// 5:    return False", "entry_point": "allBitsSetInTheGivenRange", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = allBitsSetInTheGivenRange(4, 1, 2);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = allBitsSetInTheGivenRange(17, 2, 4);\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = allBitsSetInTheGivenRange(39, 4, 6);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether all the bits are unset in the given range or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/229", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n */\nvector<int> reArrangeArray(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, n: int\n// Output: arr: list of integers\n// 1: i <- 0, j <- n-1\n// 2: while i < j do\n// 3:    while arr[i] < 0 do\n// 4:        i <- i+1\n// 5:    while arr[j] >= 0 do\n// 6:        j <- j-1\n// 7:    if i < j then\n// 8:        swap arr[i], arr[j]\n// 9: return arr", "entry_point": "reArrangeArray", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = reArrangeArray(vector<int>{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9);\n    if (!(compare(x0, {-1, -3, -7, 4, 5, 6, 2, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = reArrangeArray(vector<int>{12, -14, -26, 13, 15}, 5);\n    if (!(compare(x1, {-14, -26, 12, 13, 15}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = reArrangeArray(vector<int>{10, 24, 36, -42, -39, -78, 85}, 7);\n    if (!(compare(x2, {-42, -39, -78, 10, 24, 36, 85}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/230", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace blank spaces with any character in a string.\n */\nstring replaceBlank(string str1, string chr) {\n}\n\n// The pseudo code of the above function:\n// Input: str1: str, chr: str\n// Output: res: str\n// 1: res <- \"\"\n// 2: for each c in str1 do\n// 3:    if c == \" \" then\n// 4:        res += chr\n// 5:    else\n// 6:        res += c\n// 7: return res", "entry_point": "replaceBlank", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = replaceBlank(string(\"hello people\"), string(\"@\"));\n    if (!(compare(x0, string(\"hello@people\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = replaceBlank(string(\"python program language\"), string(\"$\"));\n    if (!(compare(x1, string(\"python$program$language\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = replaceBlank(string(\"blank space\"), string(\"-\"));\n    if (!(compare(x2, string(\"blank-space\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to replace blank spaces with any character in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/231", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum in the given right triangle of numbers.\n */\nint maxSum(vector<vector<int>> tri, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: tri: list of lists, n: int\n// Output: max_sum: int\n// 1: for i <- n-1 downto 0 do\n// 2:    for j <- 0 to i do\n// 3:        tri[i][j] <- tri[i][j] + max(tri[i+1][j], tri[i+1][j+1])\n// 4: return tri[0][0]", "entry_point": "maxSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSum(vector<vector<int>>{{1}, {2, 1}, {3, 3, 2}}, 3);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSum(vector<vector<int>>{{1}, {1, 2}, {4, 1, 12}}, 3);\n    if (!(compare(x1, 15))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSum(vector<vector<int>>{{2}, {3, 2}, {13, 23, 12}}, 3);\n    if (!(compare(x2, 28))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum sum in the given right triangle of numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/232", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the n largest items from a dataset.\n */\nvector<int> largNnum(vector<int> list1, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of integers, n: int\n// Output: res: list of integers\n// 1: res <- []\n// 2: sort list1 in descending order\n// 3: for i in range(n) do\n// 4:    res.append(list1[i])\n// 5: return res", "entry_point": "largNnum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 2);\n    if (!(compare(x0, {100, 90}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 5);\n    if (!(compare(x1, {100, 90, 80, 70, 60}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 3);\n    if (!(compare(x2, {100, 90, 80}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to get the n largest items from a dataset.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/233", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of a cylinder.\n */\ndouble lateralsufaceCylinder(int r, int h) {\n}\n\n// The pseudo code of the above function:\n// Input: r: int, h: int\n// Output: lateral surface area: double\n// 1: lateral surface area <- 2 * pi * r * h\n// 2: return lateral surface area", "entry_point": "lateralsufaceCylinder", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = lateralsufaceCylinder(10, 5);\n    if (!(compare(x0, 314.15000000000003))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = lateralsufaceCylinder(4, 5);\n    if (!(compare(x1, 125.66000000000001))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = lateralsufaceCylinder(4, 10);\n    if (!(compare(x2, 251.32000000000002))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the lateral surface area of a cylinder.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/234", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cube.\n */\nint volumeCube(int l) {\n}\n\n// The pseudo code of the above function:\n// Input: l: int (length of the side of the cube)\n// Output: vol: int (volume of the cube)\n// 1: vol <- l * l * l\n// 2: return vol", "entry_point": "volumeCube", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = volumeCube(3);\n    if (!(compare(x0, 27))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = volumeCube(2);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = volumeCube(5);\n    if (!(compare(x2, 125))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the volume of a cube.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/235", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set all even bits of a given number.\n */\nint evenBitSetNumber(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: num: int\n// Output: res: int\n// 1: res <- 0\n// 2: for i <- 0 to 31 do\n// 3:    if i % 2 == 0 then\n// 4:        res <- res | (1 << i)\n// 5: return res & num", "entry_point": "evenBitSetNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = evenBitSetNumber(10);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = evenBitSetNumber(20);\n    if (!(compare(x1, 30))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = evenBitSetNumber(30);\n    if (!(compare(x2, 30))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to set all even bits of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/236", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\nint noOfTriangle(int n, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int, k: int\n// Output: count: int\n// 1: count <- 0\n// 2: for i <- 1 to k do\n// 3:    count <- count + (n-i)*(n-i)\n// 4: return count", "entry_point": "noOfTriangle", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = noOfTriangle(4, 2);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = noOfTriangle(4, 3);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = noOfTriangle(1, 3);\n    if (!(compare(x2, -1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/238", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of non-empty substrings of a given string.\n */\nint numberOfSubstrings(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: count: int\n// 1: count <- 0\n// 2: for i in range(len(str)) do\n// 3:    for j in range(i+1, len(str)+1) do\n// 4:        if str[i:j] != '' then\n// 5:            count <- count + 1\n// 6: return count", "entry_point": "numberOfSubstrings", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = numberOfSubstrings(string(\"abc\"));\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = numberOfSubstrings(string(\"abcd\"));\n    if (!(compare(x1, 10))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = numberOfSubstrings(string(\"abcde\"));\n    if (!(compare(x2, 15))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count number of non-empty substrings of a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/239", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n */\nint getTotalNumberOfSequences(int m, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: m: int, n: int\n// Output: total: int\n// 1: if n == 0 then\n// 2:    return 1\n// 3: total <- 0\n// 4: for i <- 1 to m do\n// 5:    if i >= 2 * getTotalNumberOfSequences(m, n-1) then\n// 6:        break\n// 7:    total <- total + getTotalNumberOfSequences(m, n-1)\n// 8: return total", "entry_point": "getTotalNumberOfSequences", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getTotalNumberOfSequences(10, 4);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getTotalNumberOfSequences(5, 2);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getTotalNumberOfSequences(16, 3);\n    if (!(compare(x2, 84))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/241", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to generate a 3d array having each element as '*'.\n */\nvector<vector<vector<string>>> array3d(int m, int n, int o) {\n}\n\n// The pseudo code of the above function:\n// Input: m: int, n: int, o: int\n// Output: arr: 3D vector of string\n// 1: arr <- empty 3D vector of size (m x n x o)\n// 2: for i <- 0 to m-1 do\n// 3:    for j <- 0 to n-1 do\n// 4:        for k <- 0 to o-1 do\n// 5:            arr[i][j][k] <- '*'\n// 6: return arr", "entry_point": "array3d", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<vector<string>>> x0 = array3d(6, 4, 3);\n    if (!(compare(x0, {{{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<vector<string>>> x1 = array3d(5, 3, 4);\n    if (!(compare(x1, {{{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<vector<string>>> x2 = array3d(1, 2, 3);\n    if (!(compare(x2, {{{string(\"*\")}, {string(\"*\")}}, {{string(\"*\")}, {string(\"*\")}}, {{string(\"*\")}, {string(\"*\")}}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to generate a 3d array having each element as '*'.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/242", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count total characters in a string.\n */\nint countCharac(string str1) {\n}\n\n// The pseudo code of the above function:\n// Input: str1: str\n// Output: count: int\n// 1: count <- 0\n// 2: for i in range(len(str1)) do\n// 3:    count <- count + 1\n// 4: return count", "entry_point": "countCharac", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countCharac(string(\"python programming\"));\n    if (!(compare(x0, 18))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countCharac(string(\"language\"));\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countCharac(string(\"words\"));\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count total characters in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/244", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the next perfect square greater than a given number.\n */\nint nextPerfectSquare(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: int\n// 1: root <- ceil(sqrt(n))\n// 2: while True do\n// 3:    square <- root*root\n// 4:    if square > n then\n// 5:        return square\n// 6:    root <- root + 1", "entry_point": "nextPerfectSquare", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = nextPerfectSquare(35);\n    if (!(compare(x0, 36))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = nextPerfectSquare(6);\n    if (!(compare(x1, 9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = nextPerfectSquare(9);\n    if (!(compare(x2, 16))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the next perfect square greater than a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/245", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n */\nint maxSum(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, n: int\n// Output: max_sum: int\n// 1: left_to_right <- [0]*n\n// 2: right_to_left <- [0]*n\n// 3: left_to_right[0] <- arr[0]\n// 4: right_to_left[n-1] <- arr[n-1]\n// 5: for i <- 1 to n-1 do\n// 6:    if arr[i] > arr[i-1] then\n// 7:        left_to_right[i] <- left_to_right[i-1] + arr[i]\n// 8:    else:\n// 9:        left_to_right[i] <- arr[i]\n// 10: for i <- n-2 to 0 do\n// 11:    if arr[i] > arr[i+1] then\n// 12:        right_to_left[i] <- right_to_left[i+1] + arr[i]\n// 13:    else:\n// 14:        right_to_left[i] <- arr[i]\n// 15: max_sum <- -inf\n// 16: for i <- 0 to n-1 do\n// 17:    if left_to_right[i] + right_to_left[i] - arr[i] > max_sum then\n// 18:        max_sum <- left_to_right[i] + right_to_left[i] -", "entry_point": "maxSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSum(vector<int>{1, 15, 51, 45, 33, 100, 12, 18, 9}, 9);\n    if (!(compare(x0, 194))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSum(vector<int>{80, 60, 30, 40, 20, 10}, 6);\n    if (!(compare(x1, 210))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSum(vector<int>{2, 3, 14, 16, 21, 23, 29, 30}, 8);\n    if (!(compare(x2, 138))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/246", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function for computing square roots using the babylonian method.\n */\ndouble babylonianSquareroot(int number) {\n}\n\n// The pseudo code of the above function:\n// Input: number: int\n// Output: square root of number: double\n// 1: if number < 0 then\n// 2:    return NaN\n// 3: if number == 0 then\n// 4:    return 0\n// 5: x <- number\n// 6: y <- 1\n// 7: while abs(x - y) > precision do\n// 8:    x <- (x + y) / 2\n// 9:    y <- number / x\n// 10: return x", "entry_point": "babylonianSquareroot", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = babylonianSquareroot(10);\n    if (!(compare(x0, 3.162277660168379))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = babylonianSquareroot(2);\n    if (!(compare(x1, 1.414213562373095))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = babylonianSquareroot(9);\n    if (!(compare(x2, 3.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function for computing square roots using the babylonian method.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/247", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest palindromic subsequence in the given string.\n */\nint lps(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: length: int\n// 1: n <- length of str\n// 2: create a 2D array dp with size n*n and fill it with 0s\n// 3: for i <- 0 to n-1 do\n// 4:    dp[i][i] <- 1\n// 5: for l <- 2 to n do\n// 6:    for i <- 0 to n-l do\n// 7:        j <- i+l-1\n// 8:        if str[i] == str[j] and l == 2 then\n// 9:            dp[i][j] <- 2\n// 10:       else if str[i] == str[j] then\n// 11:           dp[i][j] <- dp[i+1][j-1] + 2\n// 12:       else\n// 13:           dp[i][j] <- max(dp[i+1][j], dp[i][j-1])\n// 14: return dp[0][n-1]", "entry_point": "lps", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = lps(string(\"TENS FOR TENS\"));\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = lps(string(\"CARDIO FOR CARDS\"));\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = lps(string(\"PART OF THE JOURNEY IS PART\"));\n    if (!(compare(x2, 9))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the longest palindromic subsequence in the given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/249", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the intersection of two arrays using lambda function.\n */\nvector<int> intersectionArray(vector<int> arrayNums1, vector<int> arrayNums2) {\n}\n\n// The pseudo code of the above function:\n// Input: arrayNums1: list, arrayNums2: list\n// Output: result: list\n// 1: set1 <- set of arrayNums1\n// 2: set2 <- set of arrayNums2\n// 3: result <- filter(lambda x: x in set2, set1)\n// 4: return result", "entry_point": "intersectionArray", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{1, 2, 4, 8, 9});\n    if (!(compare(x0, {1, 2, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{3, 5, 7, 9});\n    if (!(compare(x1, {3, 5, 7, 9}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{10, 20, 30, 40});\n    if (!(compare(x2, {10}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the intersection of two arrays using lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/250", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the occcurences of an element in a tuple.\n */\nint countX(vector<int> tup, int x) {\n}\n\n// The pseudo code of the above function:\n// Input: tup: list, x: int\n// Output: count: int\n// 1: count <- 0\n// 2: for i in range(len(tup)) do\n// 3:    if tup[i] == x then\n// 4:        count <- count + 1\n// 5: return count", "entry_point": "countX", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 4);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 10);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 8);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the occcurences of an element in a tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/251", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to insert an element before each element of a list.\n */\nvector<string> insertElement(vector<string> list, string element) {\n}\n\n// The pseudo code of the above function:\n// Input: list: list of strings, element: string\n// Output: res: list of strings\n// 1: res <- empty list\n// 2: for each item in list do\n// 3:    append element to res\n// 4:    append item to res\n// 5: return res", "entry_point": "insertElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = insertElement(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Black\")}, string(\"c\"));\n    if (!(compare(x0, {string(\"c\"), string(\"Red\"), string(\"c\"), string(\"Green\"), string(\"c\"), string(\"Black\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = insertElement(vector<string>{string(\"python\"), string(\"java\")}, string(\"program\"));\n    if (!(compare(x1, {string(\"program\"), string(\"python\"), string(\"program\"), string(\"java\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = insertElement(vector<string>{string(\"happy\"), string(\"sad\")}, string(\"laugh\"));\n    if (!(compare(x2, {string(\"laugh\"), string(\"happy\"), string(\"laugh\"), string(\"sad\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to insert an element before each element of a list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/252", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert complex numbers to polar coordinates.\n */\nvector<double> convert(int numbers) {\n}\n\n// The pseudo code of the above function:\n// Input: numbers: complex number\n// Output: polar coordinates in the form of [r, theta]\n// 1: r <- abs(numbers)\n// 2: theta <- atan2(imag(numbers), real(numbers))\n// 3: return [r, theta]", "entry_point": "convert", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<double> x0 = convert(1);\n    if (!(compare(x0, {1.0, 0.0}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<double> x1 = convert(4);\n    if (!(compare(x1, {4.0, 0.0}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<double> x2 = convert(5);\n    if (!(compare(x2, {5.0, 0.0}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to convert complex numbers to polar coordinates.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/253", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count integers from a given list.\n */\nint countInteger(vector<int> list1) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of integers\n// Output: count: int\n// 1: count <- 0\n// 2: for each i in list1 do\n// 3:    if type(i) == int then\n// 4:        count <- count + 1\n// 5: return count", "entry_point": "countInteger", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x1 = countInteger(vector<int>{1, 2, 3});\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count integers from a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/254", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all words starting with 'a' or 'e' in a given string.\n */\nvector<string> wordsAe(string text) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: List of strings\n// 1: words <- split text into words\n// 2: result <- empty list\n// 3: for each word in words do\n// 4:    if word[0] in ['a', 'e'] then\n// 5:        result.append(word)\n// 6: return result", "entry_point": "wordsAe", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = wordsAe(string(\"python programe\"));\n    if (!(compare(x0, {string(\"ame\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = wordsAe(string(\"python programe language\"));\n    if (!(compare(x1, {string(\"ame\"), string(\"anguage\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = wordsAe(string(\"assert statement\"));\n    if (!(compare(x2, {string(\"assert\"), string(\"atement\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find all words starting with 'a' or 'e' in a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/255", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n */\nvector<vector<string>> combinationsColors(vector<string> l, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: l: list of str, n: int\n// Output: list of lists of str\n// 1: if n == 0 then\n// 2:    return [[]]\n// 3: res <- []\n// 4: for i in range(len(l)) do\n// 5:    for c in combinationsColors(l[i:], n-1) do\n// 6:        res.append([l[i]] + c)\n// 7: return res", "entry_point": "combinationsColors", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<string>> x0 = combinationsColors(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\")}, 1);\n    if (!(compare(x0, {{string(\"Red\")}, {string(\"Green\")}, {string(\"Blue\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<string>> x1 = combinationsColors(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\")}, 2);\n    if (!(compare(x1, {{string(\"Red\"), string(\"Red\")}, {string(\"Red\"), string(\"Green\")}, {string(\"Red\"), string(\"Blue\")}, {string(\"Green\"), string(\"Green\")}, {string(\"Green\"), string(\"Blue\")}, {string(\"Blue\"), string(\"Blue\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<string>> x2 = combinationsColors(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\")}, 3);\n    if (!(compare(x2, {{string(\"Red\"), string(\"Red\"), string(\"Red\")}, {string(\"Red\"), string(\"Red\"), string(\"Green\")}, {string(\"Red\"), string(\"Red\"), string(\"Blue\")}, {string(\"Red\"), string(\"Green\"), string(\"Green\")}, {string(\"Red\"), string(\"Green\"), string(\"Blue\")}, {string(\"Red\"), string(\"Blue\"), string(\"Blue\")}, {string(\"Green\"), string(\"Green\"), string(\"Green\")}, {string(\"Green\"), string(\"Green\"), string(\"Blue\")}, {string(\"Green\"), string(\"Blue\"), string(\"Blue\")}, {string(\"Blue\"), string(\"Blue\"), string(\"Blue\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/256", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of prime numbers less than a given non-negative number.\n */\nint countPrimesNums(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: count: int\n// 1: if n < 2 then\n// 2:    return 0\n// 3: primes <- [True] * n\n// 4: primes[0] <- primes[1] <- False\n// 5: for i <- 2 to sqrt(n) do\n// 6:    if primes[i] then\n// 7:        for j <- i*i to n step i do\n// 8:            primes[j] <- False\n// 9: count <- 0\n// 10: for i <- 2 to n-1 do\n// 11:    if primes[i] then\n// 12:        count <- count + 1\n// 13: return count", "entry_point": "countPrimesNums", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countPrimesNums(5);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countPrimesNums(10);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countPrimesNums(100);\n    if (!(compare(x2, 25))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the number of prime numbers less than a given non-negative number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/257", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to swap two numbers.\n */\nvector<int> swapNumbers(int a, int b) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, b: int\n// Output: result: list of int\n// 1: result[0] <- b\n// 2: result[1] <- a\n// 3: return result", "entry_point": "swapNumbers", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = swapNumbers(10, 20);\n    if (!(compare(x0, {20, 10}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = swapNumbers(15, 17);\n    if (!(compare(x1, {17, 15}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = swapNumbers(100, 200);\n    if (!(compare(x2, {200, 100}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to swap two numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/258", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find number of odd elements in the given list using lambda function.\n */\nint countOdd(vector<int> arrayNums) {\n}\n\n// The pseudo code of the above function:\n// Input: array_nums: list of int\n// Output: count: int\n// 1: count <- 0\n// 2: odd_func <- lambda x: x % 2 == 1\n// 3: odd_nums <- list(filter(odd_func, array_nums))\n// 4: count <- len(odd_nums)\n// 5: return count", "entry_point": "countOdd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countOdd(vector<int>{1, 2, 3, 5, 7, 8, 10});\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countOdd(vector<int>{10, 15, 14, 13, -18, 12, -20});\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countOdd(vector<int>{1, 2, 4, 8, 9});\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find number of odd elements in the given list using lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/259", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to maximize the given two tuples.\n */\nvector<vector<int>> maximizeElements(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup1: list of tuples, test_tup2: list of tuples\n// Output: max_tup: list of tuples\n// 1: max_tup <- empty list\n// 2: for i in range(len(test_tup1)) do\n// 3:    tup <- []\n// 4:    for j in range(len(test_tup1[i])) do\n// 5:        tup.append(max(test_tup1[i][j], test_tup2[i][j]))\n// 6:    max_tup.append(tup)\n// 7: return max_tup", "entry_point": "maximizeElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = maximizeElements(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}});\n    if (!(compare(x0, {{6, 7}, {4, 9}, {2, 9}, {7, 10}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = maximizeElements(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}});\n    if (!(compare(x1, {{7, 8}, {5, 10}, {3, 10}, {8, 11}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = maximizeElements(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}});\n    if (!(compare(x2, {{8, 9}, {6, 11}, {4, 11}, {9, 12}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to maximize the given two tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/260", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */\nint newmanPrime(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: nth NSW prime number: int\n// 1: if n == 1 then\n// 2:    return 7\n// 3: p <- newmanPrime(n-1)\n// 4: i <- p + 1\n// 5: while True do\n// 6:    if isNSW(i) then\n// 7:        return i\n// 8:    i <- i + 1\n\n// Helper function to check if a number is a NSW prime number\n// Input: num: int\n// Output: True or False\n// 1: if num == 0 or num == 1 then\n// 2:    return False\n// 3: for i in range(2, int(sqrt(num))+1) do\n// 4:    if num % i == 0 then\n// 5:        return False\n// 6: nsw_num <- 2\n// 7: while nsw_num <= num do\n// 8:    if (num-1) % nsw_num == 0 then\n// 9:        if pow(2, (num-1)//nsw_num, num) != 1 then\n// 10:           return False\n// 11:   nsw_num <- nsw_num * 2\n// 12: return True", "entry_point": "newmanPrime", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = newmanPrime(3);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = newmanPrime(4);\n    if (!(compare(x1, 17))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = newmanPrime(5);\n    if (!(compare(x2, 41))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/261", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform mathematical division operation across the given tuples.\n */\nvector<int> divisionElements(vector<int> testTup1, vector<int> testTup2) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup1: tuple, test_tup2: tuple\n// Output: res: tuple\n// 1: res <- []\n// 2: for i in range(len(test_tup1)) do\n// 3:    if test_tup2[i] == 0 then\n// 4:        return None\n// 5:    res.append(test_tup1[i] / test_tup2[i])\n// 6: return res", "entry_point": "divisionElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = divisionElements(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3});\n    if (!(compare(x0, {2, 2, 2, 3}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = divisionElements(vector<int>{12, 6, 8, 16}, vector<int>{6, 3, 4, 4});\n    if (!(compare(x1, {2, 2, 2, 4}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = divisionElements(vector<int>{20, 14, 36, 18}, vector<int>{5, 7, 6, 9});\n    if (!(compare(x2, {4, 2, 6, 2}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to perform mathematical division operation across the given tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/263", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge two dictionaries.\n */\nunordered_map<string, int> mergeDict(unordered_map<string, int> d1, unordered_map<string, int> d2) {\n}\n\n// The pseudo code of the above function:\n// Input: d1: unordered_map, d2: unordered_map\n// Output: merged_dict: unordered_map\n// 1: merged_dict <- d1\n// 2: for key, value in d2 do\n// 3:    if key in merged_dict then\n// 4:        merged_dict[key] += value\n// 5:    else:\n// 6:        merged_dict[key] = value\n// 7: return merged_dict", "entry_point": "mergeDict", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<string, int> x0 = mergeDict(unordered_map<string, int>{{string(\"a\"), 100}, {string(\"b\"), 200}}, unordered_map<string, int>{{string(\"x\"), 300}, {string(\"y\"), 200}});\n    if (!(compare(x0, {{string(\"x\"), 300}, {string(\"y\"), 200}, {string(\"a\"), 100}, {string(\"b\"), 200}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<string, int> x1 = mergeDict(unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}}, unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}});\n    if (!(compare(x1, {{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<string, int> x2 = mergeDict(unordered_map<string, int>{{string(\"a\"), 10}, {string(\"b\"), 20}}, unordered_map<string, int>{{string(\"x\"), 30}, {string(\"y\"), 40}});\n    if (!(compare(x2, {{string(\"x\"), 30}, {string(\"y\"), 40}, {string(\"a\"), 10}, {string(\"b\"), 20}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to merge two dictionaries.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/264", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate a dog's age in dog's years.\n */\nint dogAge(int hAge) {\n}\n\n// The pseudo code of the above function:\n// Input: human_age: int\n// Output: dog_age: int\n// 1: if human_age <= 0 then\n// 2:    return 0\n// 3: else if human_age == 1 then\n// 4:    return 15\n// 5: else if human_age == 2 then\n// 6:    return 24\n// 7: else\n// 8:    dog_age <- 24\n// 9:    for i <- 3 to human_age do\n// 10:        dog_age <- dog_age + 4\n// 11:    return dog_age", "entry_point": "dogAge", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = dogAge(12);\n    if (!(compare(x0, 61))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = dogAge(15);\n    if (!(compare(x1, 73))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = dogAge(24);\n    if (!(compare(x2, 109))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate a dog's age in dog's years.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/266", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of a cube.\n */\nint lateralsurfaceCube(int l) {\n}\n\n// The pseudo code of the above function:\n// Input: l: int\n// Output: area: int\n// 1: area <- 4 * l * l\n// 2: return area", "entry_point": "lateralsurfaceCube", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = lateralsurfaceCube(5);\n    if (!(compare(x0, 100))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = lateralsurfaceCube(9);\n    if (!(compare(x1, 324))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = lateralsurfaceCube(10);\n    if (!(compare(x2, 400))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the lateral surface area of a cube.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/267", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of squares of first n odd natural numbers.\n */\nint squareSum(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for i <- 1 to n*2 step 2 do\n// 3:    sum <- sum + i*i\n// 4: return sum", "entry_point": "squareSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = squareSum(2);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = squareSum(3);\n    if (!(compare(x1, 35))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = squareSum(4);\n    if (!(compare(x2, 84))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of squares of first n odd natural numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/268", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th star number.\n */\nint findStarNum(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: star_num: int\n// 1: star_num <- 6*n*(n-1) + 1\n// 2: return star_num", "entry_point": "findStarNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findStarNum(3);\n    if (!(compare(x0, 37))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findStarNum(4);\n    if (!(compare(x1, 73))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findStarNum(5);\n    if (!(compare(x2, 121))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the n'th star number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/269", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ascii value of a character.\n */\nint asciiValue(string k) {\n}\n\n// The pseudo code of the above function:\n// Input: k: str\n// Output: val: int\n// 1: val <- ord(k)\n// 2: return val", "entry_point": "asciiValue", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = asciiValue(string(\"A\"));\n    if (!(compare(x0, 65))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = asciiValue(string(\"R\"));\n    if (!(compare(x1, 82))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = asciiValue(string(\"S\"));\n    if (!(compare(x2, 83))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the ascii value of a character.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/270", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of even numbers at even positions.\n */\nint sumEvenAndEvenIndex(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, n: int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for i in range(0, n, 2) do\n// 3:    if arr[i] % 2 == 0 then\n// 4:        sum <- sum + arr[i]\n// 5: return sum", "entry_point": "sumEvenAndEvenIndex", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumEvenAndEvenIndex(vector<int>{5, 6, 12, 1, 18, 8}, 6);\n    if (!(compare(x0, 30))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumEvenAndEvenIndex(vector<int>{3, 20, 17, 9, 2, 10, 18, 13, 6, 18}, 10);\n    if (!(compare(x1, 26))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumEvenAndEvenIndex(vector<int>{5, 6, 12, 1}, 4);\n    if (!(compare(x2, 12))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of even numbers at even positions.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/271", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fifth power of first n even natural numbers.\n */\nint evenPowerSum(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for i <- 1 to n do\n// 3:    sum <- sum + (2*i)^5\n// 4: return sum", "entry_point": "evenPowerSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = evenPowerSum(2);\n    if (!(compare(x0, 1056))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = evenPowerSum(3);\n    if (!(compare(x1, 8832))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = evenPowerSum(1);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of fifth power of first n even natural numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/273", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to substract the contents of one tuple with corresponding index of other tuple.\n */\nvector<int> substractElements(vector<int> testTup1, vector<int> testTup2) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup1: tuple, test_tup2: tuple\n// Output: result: tuple\n// 1: result <- empty tuple\n// 2: for i in range(len(test_tup1)) do\n// 3:    result[i] <- test_tup1[i] - test_tup2[i]\n// 4: return result", "entry_point": "substractElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = substractElements(vector<int>{10, 4, 5}, vector<int>{2, 5, 18});\n    if (!(compare(x0, {8, -1, -13}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = substractElements(vector<int>{11, 2, 3}, vector<int>{24, 45, 16});\n    if (!(compare(x1, {-13, -43, -13}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = substractElements(vector<int>{7, 18, 9}, vector<int>{10, 11, 12});\n    if (!(compare(x2, {-3, 7, -3}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/274", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of even index binomial coefficients.\n */\nint evenBinomialCoeffSum(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for i <- 0 to n do\n// 3:    if i is even then\n// 4:        sum <- sum + binomial_coefficient(n, i)\n// 5: return sum", "entry_point": "evenBinomialCoeffSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = evenBinomialCoeffSum(4);\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = evenBinomialCoeffSum(6);\n    if (!(compare(x1, 32))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = evenBinomialCoeffSum(2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find sum of even index binomial coefficients.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/275", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the position of the last removed element from the given array.\n */\nint getPosition(vector<int> a, int n, int m) {\n}\n\n// The pseudo code of the above function:\n// Input: a: list of integers, n: int, m: int\n// Output: pos: int\n// 1: pos <- -1\n// 2: for i <- 0 to n-1 do\n// 3:    if a[i] == m then\n// 4:        pos <- i\n// 5:        a.erase(a.begin()+i)\n// 6: return pos", "entry_point": "getPosition", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getPosition(vector<int>{2, 5, 4}, 3, 2);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getPosition(vector<int>{4, 3}, 2, 2);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getPosition(vector<int>{1, 2, 3, 4}, 4, 1);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the position of the last removed element from the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/276", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cylinder.\n */\ndouble volumeCylinder(int r, int h) {\n}\n\n// The pseudo code of the above function:\n// Input: r: int (radius), h: int (height)\n// Output: volume: float\n// 1: pi <- 3.14159265358979323846\n// 2: volume <- pi * r * r * h\n// 3: return volume", "entry_point": "volumeCylinder", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = volumeCylinder(10, 5);\n    if (!(compare(x0, 1570.7500000000002))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = volumeCylinder(4, 5);\n    if (!(compare(x1, 251.32000000000002))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = volumeCylinder(4, 10);\n    if (!(compare(x2, 502.64000000000004))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the volume of a cylinder.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/277", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter a dictionary based on values.\n */\nunordered_map<string, int> dictFilter(unordered_map<string, int> dict, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: dict: unordered_map<string, int>, n: int\n// Output: filtered_dict: unordered_map<string, int>\n// 1: filtered_dict <- empty unordered_map\n// 2: for each key, value in dict do\n// 3:    if value >= n then\n// 4:        add key, value to filtered_dict\n// 5: return filtered_dict", "entry_point": "dictFilter", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<string, int> x0 = dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 170);\n    if (!(compare(x0, {{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Pierre Cox\"), 190}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<string, int> x1 = dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 180);\n    if (!(compare(x1, {{string(\"Alden Cantrell\"), 180}, {string(\"Pierre Cox\"), 190}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<string, int> x2 = dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 190);\n    if (!(compare(x2, {{string(\"Pierre Cox\"), 190}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to filter a dictionary based on values.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/279", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth decagonal number.\n */\nint isNumDecagonal(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: decagonal_number: int\n// 1: decagonal_number <- n * (3 * n - 1) / 2\n// 2: return decagonal_number", "entry_point": "isNumDecagonal", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = isNumDecagonal(3);\n    if (!(compare(x0, 27))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = isNumDecagonal(7);\n    if (!(compare(x1, 175))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = isNumDecagonal(10);\n    if (!(compare(x2, 370))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the nth decagonal number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/281", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if the elements of a given list are unique or not.\n */\nbool allUnique(vector<int> testList) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of integers\n// Output: True or False\n// 1: seen <- set()\n// 2: for i in test_list do\n// 3:    if i in seen then\n// 4:        return False\n// 5:    seen.add(i)\n// 6: return True", "entry_point": "allUnique", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = allUnique(vector<int>{1, 2, 3});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = allUnique(vector<int>{1, 2, 1, 2});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = allUnique(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check if the elements of a given list are unique or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/282", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to substaract two lists using map and lambda function.\n */\nvector<int> subList(vector<int> nums1, vector<int> nums2) {\n}\n\n// The pseudo code of the above function:\n// Input: nums1: list of int, nums2: list of int\n// Output: result: list of int\n// 1: num_map1 <- map(lambda x: (x, 1), nums1)\n// 2: num_map2 <- map(lambda x: (x, 1), nums2)\n// 3: for num in num_map2 do\n// 4:    if num[0] in num_map1 then\n// 5:        num_map1[num[0]] -= 1\n// 6: for num in num_map1 do\n// 7:    if num_map1[num[0]] > 0 then\n// 8:        result.append(num[0])\n// 9: return result", "entry_point": "subList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = subList(vector<int>{1, 2, 3}, vector<int>{4, 5, 6});\n    if (!(compare(x0, {-3, -3, -3}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = subList(vector<int>{1, 2}, vector<int>{3, 4});\n    if (!(compare(x1, {-2, -2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = subList(vector<int>{90, 120}, vector<int>{50, 70});\n    if (!(compare(x2, {40, 50}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to substaract two lists using map and lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/283", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the frequency of each digit is less than or equal to the digit itself.\n */\nbool validate(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: True or False\n// 1: freq_list <- list of 10 zeros\n// 2: while n > 0 do\n// 3:    digit <- n % 10\n// 4:    freq_list[digit] += 1\n// 5:    n //= 10\n// 6: for i <- 0 to 9 do\n// 7:    if freq_list[i] > i then\n// 8:        return False\n// 9: return True", "entry_point": "validate", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = validate(1234);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = validate(51241);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = validate(321);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the frequency of each digit is less than or equal to the digit itself.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/285", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by two to three 'b'.\n */\nstring textMatchTwoThree(string text) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: True or False\n// 1: pattern <- \"ab{2,3}\"\n// 2: matchObj <- search(pattern, text)\n// 3: if matchObj then\n// 4:    return True\n// 5: else\n// 6:    return False", "entry_point": "textMatchTwoThree", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatchTwoThree(string(\"ac\"));\n    if (!(compare(x0, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatchTwoThree(string(\"dc\"));\n    if (!(compare(x1, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatchTwoThree(string(\"abbbba\"));\n    if (!(compare(x2, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function that matches a string that has an a followed by two to three 'b'.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/286", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n */\nint maxSubArraySumRepeated(vector<int> a, int n, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: a: list of integers, n: int, k: int\n// Output: maxSum: int\n// 1: maxSum <- -inf\n// 2: for i from 0 to n*k-1 do\n// 3:    currSum <- 0\n// 4:    for j from i to n*k-1 do\n// 5:        currSum <- currSum + a[j % n]\n// 6:        if currSum > maxSum then\n// 7:            maxSum <- currSum\n// 8: return maxSum", "entry_point": "maxSubArraySumRepeated", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSubArraySumRepeated(vector<int>{10, 20, -30, -1}, 4, 3);\n    if (!(compare(x0, 30))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSubArraySumRepeated(vector<int>{-1, 10, 20}, 3, 2);\n    if (!(compare(x1, 59))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSubArraySumRepeated(vector<int>{-1, -2, -3}, 3, 3);\n    if (!(compare(x2, -1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/287", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of squares of first n even natural numbers.\n */\nint squareSum(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for i <- 1 to n do\n// 3:    if i % 2 == 0 then\n// 4:        sum <- sum + i*i\n// 5: return sum", "entry_point": "squareSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = squareSum(2);\n    if (!(compare(x0, 20))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = squareSum(3);\n    if (!(compare(x1, 56))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = squareSum(4);\n    if (!(compare(x2, 120))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of squares of first n even natural numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/288", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count array elements having modular inverse under given prime number p equal to itself.\n */\nint modularInverse(vector<int> arr, int n, int p) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, n: int, p: int\n// Output: count: int\n// 1: count <- 0\n// 2: for i <- 0 to n-1 do\n// 3:    if arr[i] % p == 0 or arr[i] % p == 1 then\n// 4:        count <- count + 1\n// 5:    else do\n// 6:        for j <- 2 to p-1 do\n// 7:            if (arr[i] * j) % p == 1 then\n// 8:                count <- count + 1\n// 9:                break\n// 10: return count", "entry_point": "modularInverse", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = modularInverse(vector<int>{1, 6, 4, 5}, 4, 7);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = modularInverse(vector<int>{1, 3, 8, 12, 12}, 5, 13);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = modularInverse(vector<int>{2, 3, 4, 5}, 4, 6);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/289", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to calculate the number of odd days in a given year.\n */\nint oddDays(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: odd_days: int\n// 1: if n % 4 == 0 then\n// 2:    if n % 100 == 0 then\n// 3:        if n % 400 == 0 then\n// 4:            odd_days <- 2\n// 5:        else\n// 6:            odd_days <- 1\n// 7:    else\n// 8:        odd_days <- 2\n// 9: else\n// 10:   odd_days <- 1\n// 11: return odd_days", "entry_point": "oddDays", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = oddDays(100);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = oddDays(50);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = oddDays(75);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to calculate the number of odd days in a given year.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/291", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n */\nint countNoOfWays(int n, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int, k: int\n// Output: count: int\n// 1: if n == 0 then\n// 2:    return 0\n// 3: if n == 1 then\n// 4:    return k\n// 5: same <- k\n// 6: diff <- k * (k-1)\n// 7: for i <- 3 to n do\n// 8:    prevSame <- same\n// 9:    same <- diff\n// 10:   diff <- (prevSame + diff) * (k-1)\n// 11: count <- same + diff\n// 12: return count", "entry_point": "countNoOfWays", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countNoOfWays(2, 4);\n    if (!(compare(x0, 16))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countNoOfWays(3, 2);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countNoOfWays(4, 4);\n    if (!(compare(x2, 228))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/292", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find quotient of two numbers.\n */\nint find(int n, int m) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int, m: int\n// Output: quotient: int\n// 1: quotient <- n/m\n// 2: return quotient", "entry_point": "find", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = find(10, 3);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = find(4, 2);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = find(20, 5);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find quotient of two numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/295", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to return the sum of all divisors of a number.\n */\nint sumDiv(int number) {\n}\n\n// The pseudo code of the above function:\n// Input: number: int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for i <- 1 to number do\n// 3:    if number % i == 0 then\n// 4:        sum <- sum + i\n// 5: return sum", "entry_point": "sumDiv", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumDiv(8);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumDiv(12);\n    if (!(compare(x1, 16))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumDiv(7);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to return the sum of all divisors of a number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/296", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count inversions in an array.\n */\nint getInvCount(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of int, n: int\n// Output: count: int\n// 1: count <- 0\n// 2: for i <- 0 to n-1 do\n// 3:    for j <- i+1 to n-1 do\n// 4:        if arr[i] > arr[j] then\n// 5:            count <- count + 1\n// 6: return count", "entry_point": "getInvCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getInvCount(vector<int>{1, 20, 6, 4, 5}, 5);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getInvCount(vector<int>{1, 2, 1}, 3);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getInvCount(vector<int>{1, 2, 5, 6, 1}, 5);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count inversions in an array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/297", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to flatten a given nested list structure.\n */\nvector<int> flattenList(vector<vector<int>> list1) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of lists\n// Output: flat_list: list\n// 1: flat_list <- []\n// 2: for sublist in list1 do\n// 3:    for item in sublist do\n// 4:        flat_list.append(item)\n// 5: return flat_list", "entry_point": "flattenList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x1 = flattenList(vector<vector<int>>{{10, 20}, {40}, {30, 56, 25}, {10, 20}, {33}, {40}});\n    if (!(compare(x1, {10, 20, 40, 30, 56, 25, 10, 20, 33, 40}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = flattenList(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}});\n    if (!(compare(x2, {1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to flatten a given nested list structure.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/300", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n */\ndouble countBinarySeq(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: count: double\n// 1: count <- 0\n// 2: for i <- 0 to (2^n - 1) do\n// 3:    bin_i <- binary representation of i\n// 4:    if count_bits(bin_i) == n then\n// 5:        left_sum <- sum of first n bits in bin_i\n// 6:        right_sum <- sum of last n bits in bin_i\n// 7:        if left_sum == right_sum then\n// 8:            count <- count + 1\n// 9: return count", "entry_point": "countBinarySeq", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = countBinarySeq(1);\n    if (!(compare(x0, 2.0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = countBinarySeq(2);\n    if (!(compare(x1, 6.0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = countBinarySeq(3);\n    if (!(compare(x2, 20.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/302", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the most significant bit number which is also a set bit.\n */\nint setBitNumber(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: msb: int\n// 1: msb <- 0\n// 2: while n > 0 do\n// 3:    n <- n >> 1\n// 4:    msb <- msb + 1\n// 5: return msb", "entry_point": "setBitNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = setBitNumber(6);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = setBitNumber(10);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = setBitNumber(18);\n    if (!(compare(x2, 16))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the most significant bit number which is also a set bit.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/303", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the count of inversion of two types are same or not.\n */\nbool solve(vector<int> a, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: a: list of integers, n: int\n// Output: True or False\n// 1: even_count <- 0\n// 2: odd_count <- 0\n// 3: for i in range(n) do\n// 4:    for j in range(i+1, n) do\n// 5:        if a[i] > a[j] then\n// 6:            if (a[i] + a[j]) % 2 == 0 then\n// 7:                even_count <- even_count + 1\n// 8:            else\n// 9:                odd_count <- odd_count + 1\n// 10: if even_count == odd_count then\n// 11:    return True\n// 12: else\n// 13:    return False", "entry_point": "solve", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = solve(vector<int>{1, 0, 2}, 3);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = solve(vector<int>{1, 2, 0}, 3);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = solve(vector<int>{1, 2, 1}, 3);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the count of inversion of two types are same or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/304", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find element at a given index after number of rotations.\n */\nint findElement(vector<int> arr, vector<vector<int>> ranges, int rotations, int index) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, ranges: list of tuples, rotations: int, index: int\n// Output: element: int\n// 1: for i <- 1 to rotations do\n// 2:    for r in ranges do\n// 3:        temp <- arr[r[0]]\n// 4:        for j <- r[0]+1 to r[1] do\n// 5:            arr[j-1] <- arr[j]\n// 6:        arr[r[1]] <- temp\n// 7: return arr[index]", "entry_point": "findElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findElement(vector<int>{1, 2, 3, 4, 5}, vector<vector<int>>{{0, 2}, {0, 3}}, 2, 1);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findElement(vector<int>{1, 2, 3, 4}, vector<vector<int>>{{0, 1}, {0, 2}}, 1, 2);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findElement(vector<int>{1, 2, 3, 4, 5, 6}, vector<vector<int>>{{0, 1}, {0, 2}}, 1, 1);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find element at a given index after number of rotations.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/305", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to match two words from a list of words starting with letter 'p'.\n */\nvector<string> startWithp(vector<string> words) {\n}\n\n// The pseudo code of the above function:\n// Input: words: list of strings\n// Output: matched_words: list of strings\n// 1: matched_words <- []\n// 2: for each word in words do\n// 3:    if word[0] == 'p' then\n// 4:        matched_words.append(word)\n// 5: return matched_words", "entry_point": "startWithp", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = startWithp(vector<string>{string(\"Python PHP\"), string(\"Java JavaScript\"), string(\"c c++\")});\n    if (!(compare(x0, {string(\"Python\"), string(\"PHP\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = startWithp(vector<string>{string(\"Python Programming\"), string(\"Java Programming\")});\n    if (!(compare(x1, {string(\"Python\"), string(\"Programming\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = startWithp(vector<string>{string(\"Pqrst Pqr\"), string(\"qrstuv\")});\n    if (!(compare(x2, {string(\"Pqrst\"), string(\"Pqr\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to match two words from a list of words starting with letter 'p'.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/306", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n */\nint maxSumIncreasingSubseq(vector<int> a, int n, int index, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: a: list of int, n: int, index: int, k: int\n// Output: max_sum: int\n// 1: dp <- [0]*n\n// 2: dp[index] <- a[index]\n// 3: for i <- index+1 to k do\n// 4:    for j <- 0 to i-1 do\n// 5:        if a[j] < a[i] then\n// 6:            dp[i] = max(dp[i], dp[j]+a[i])\n// 7: max_sum <- dp[index]\n// 8: for i <- index+1 to k do\n// 9:    max_sum = max(max_sum, dp[i])\n// 10: return max_sum", "entry_point": "maxSumIncreasingSubseq", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSumIncreasingSubseq(vector<int>{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6);\n    if (!(compare(x0, 11))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSumIncreasingSubseq(vector<int>{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5);\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSumIncreasingSubseq(vector<int>{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4);\n    if (!(compare(x2, 71))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/308", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the specified number of largest products from two given lists.\n */\nvector<int> largeProduct(vector<int> nums1, vector<int> nums2, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: nums1, nums2: list of int, n: int\n// Output: res: list of int\n// 1: create an empty heap\n// 2: for i in nums1 do\n// 3:    for j in nums2 do\n// 4:        push i*j into heap\n// 5: create an empty list res\n// 6: for i in range(n) do\n// 7:    pop the largest element from the heap and append it to res\n// 8: return res", "entry_point": "largeProduct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 3);\n    if (!(compare(x0, {60, 54, 50}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 4);\n    if (!(compare(x1, {60, 54, 50, 48}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 5);\n    if (!(compare(x2, {60, 54, 50, 48, 45}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the specified number of largest products from two given lists.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/309", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum of two numbers.\n */\nint maximum(int a, int b) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, b: int\n// Output: max: int\n// 1: if a > b then\n// 2:    return a\n// 3: else\n// 4:    return b", "entry_point": "maximum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maximum(5, 10);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maximum(-1, -2);\n    if (!(compare(x1, -1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maximum(9, 7);\n    if (!(compare(x2, 9))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the maximum of two numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/310", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a given string to a tuple.\n */\nvector<string> stringToTuple(string str1) {\n}\n\n// The pseudo code of the above function:\n// Input: str1: str\n// Output: tuple: list\n// 1: str2 <- str1.strip(\"()\")  # remove parenthesis\n// 2: tuple <- str2.split(\",\")  # split into list\n// 3: return tuple", "entry_point": "stringToTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = stringToTuple(string(\"python 3.0\"));\n    if (!(compare(x0, {string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\"), string(\"3\"), string(\".\"), string(\"0\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = stringToTuple(string(\"item1\"));\n    if (!(compare(x1, {string(\"i\"), string(\"t\"), string(\"e\"), string(\"m\"), string(\"1\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = stringToTuple(string(\"15.10\"));\n    if (!(compare(x2, {string(\"1\"), string(\"5\"), string(\".\"), string(\"1\"), string(\"0\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert a given string to a tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/311", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set the left most unset bit.\n */\nint setLeftMostUnsetBit(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: res: int\n// 1: if n == 0 then\n// 2:    return 1\n// 3: res <- 1\n// 4: while n & res != 0 do\n// 5:    res <<= 1\n// 6: return n | res", "entry_point": "setLeftMostUnsetBit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = setLeftMostUnsetBit(10);\n    if (!(compare(x0, 14))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = setLeftMostUnsetBit(12);\n    if (!(compare(x1, 14))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = setLeftMostUnsetBit(15);\n    if (!(compare(x2, 15))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to set the left most unset bit.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/312", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cone.\n */\ndouble volumeCone(int r, int h) {\n}\n\n// The pseudo code of the above function:\n// Input: r: int, h: int\n// Output: vol: double\n// 1: pi <- 3.14159\n// 2: vol <- (1/3) * pi * r^2 * h\n// 3: return vol", "entry_point": "volumeCone", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = volumeCone(5, 12);\n    if (!(compare(x0, 314.15926535897927))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = volumeCone(10, 15);\n    if (!(compare(x1, 1570.7963267948965))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = volumeCone(19, 17);\n    if (!(compare(x2, 6426.651371693521))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the volume of a cone.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/314", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n */\nint maxSumRectangularGrid(vector<vector<int>> grid, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: grid: list of lists of ints, n: int\n// Output: max_sum: int\n// 1: if n == 1 then\n// 2:    return max(grid[0][0], grid[1][0])\n// 3: prev_prev <- max(grid[0][0], grid[1][0])\n// 4: prev <- max(grid[0][0] + grid[1][1], grid[0][1] + grid[1][0])\n// 5: for i <- 2 to n-1 do\n// 6:    curr <- max(prev, prev_prev + max(grid[0][i], grid[1][i]))\n// 7:    prev_prev <- prev\n// 8:    prev <- curr\n// 9: return prev", "entry_point": "maxSumRectangularGrid", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSumRectangularGrid(vector<vector<int>>{{1, 4, 5}, {2, 0, 0}}, 3);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSumRectangularGrid(vector<vector<int>>{{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}}, 5);\n    if (!(compare(x1, 24))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSumRectangularGrid(vector<vector<int>>{{7, 9, 11, 15, 19}, {21, 25, 28, 31, 32}}, 5);\n    if (!(compare(x2, 81))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/315", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first maximum length of even word.\n */\nstring findMaxLenEven(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: maxLenEven: str\n// 1: words <- split(str, \" \")\n// 2: maxLenEven <- \"\"\n// 3: for w in words do\n// 4:    if len(w) % 2 == 0 and len(w) > len(maxLenEven) then\n// 5:        maxLenEven <- w\n// 6: return maxLenEven", "entry_point": "findMaxLenEven", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = findMaxLenEven(string(\"python language\"));\n    if (!(compare(x0, string(\"language\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = findMaxLenEven(string(\"maximum even length\"));\n    if (!(compare(x1, string(\"length\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = findMaxLenEven(string(\"eve\"));\n    if (!(compare(x2, string(\"-1\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the first maximum length of even word.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/316", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the index of the last occurrence of a given number in a sorted array.\n */\nint findLastOccurrence(vector<int> a, int x) {\n}\n\n// The pseudo code of the above function:\n// Input: a: list of integers, x: int\n// Output: index: int\n// 1: low <- 0\n// 2: high <- len(a) - 1\n// 3: index <- -1\n// 4: while low <= high do\n// 5:    mid <- (low + high) / 2\n// 6:    if a[mid] == x then\n// 7:        index <- mid\n// 8:        low <- mid + 1\n// 9:    elif a[mid] < x then\n// 10:       low <- mid + 1\n// 11:   else\n// 12:       high <- mid - 1\n// 13: return index", "entry_point": "findLastOccurrence", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findLastOccurrence(vector<int>{2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findLastOccurrence(vector<int>{2, 3, 5, 8, 6, 6, 8, 9, 9, 9}, 9);\n    if (!(compare(x1, 9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findLastOccurrence(vector<int>{2, 2, 1, 5, 6, 6, 6, 9, 9, 9}, 6);\n    if (!(compare(x2, 6))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/318", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum volume of a cuboid with given sum of sides.\n */\nint maxVolume(int s) {\n}\n\n// The pseudo code of the above function:\n// Input: s: int\n// Output: max_vol: int\n// 1: max_vol <- -1\n// 2: for l <- 1 to s/3 do\n// 3:    w <- (s - 2*l) / 2\n// 4:    h <- s - l - w\n// 5:    vol <- l * w * h\n// 6:    if vol > max_vol then\n// 7:        max_vol <- vol\n// 8: return max_vol", "entry_point": "maxVolume", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxVolume(8);\n    if (!(compare(x0, 18))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxVolume(4);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxVolume(1);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the maximum volume of a cuboid with given sum of sides.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/319", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\nvector<string> findLongWord(string text) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: words: list of str\n// 1: pattern <- r'\\b\\w{5}\\b'\n// 2: words <- findall(pattern, text)\n// 3: return words", "entry_point": "findLongWord", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = findLongWord(string(\"Please move back to strem\"));\n    if (!(compare(x0, {string(\"strem\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = findLongWord(string(\"4K Ultra HD streaming player\"));\n    if (!(compare(x1, {string(\"Ultra\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = findLongWord(string(\"Streaming Media Player\"));\n    if (!(compare(x2, {string(\"Media\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find all five characters long word in the given string by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/320", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n */\nint sumDifference(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: diff: int\n// 1: sumOfSq <- 0\n// 2: sqOfSum <- 0\n// 3: for i <- 1 to n do\n// 4:    sumOfSq <- sumOfSq + i*i\n// 5:    sqOfSum <- sqOfSum + i\n// 6: sqOfSum <- sqOfSum * sqOfSum\n// 7: diff <- sqOfSum - sumOfSq\n// 8: return diff", "entry_point": "sumDifference", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumDifference(12);\n    if (!(compare(x0, 5434))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumDifference(20);\n    if (!(compare(x1, 41230))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumDifference(54);\n    if (!(compare(x2, 2151270))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/321", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the demlo number for the given number.\n */\nstring findDemlo(string s) {\n}\n\n// The pseudo code of the above function:\n// Input: s: str\n// Output: demlo_num: str\n// 1: if len(s) % 2 == 0 then\n// 2:    return \"INVALID\"\n// 3: demlo_num <- \"\"\n// 4: for i in range(0, len(s), 2) do\n// 5:    count <- int(s[i])\n// 6:    ch <- s[i+1]\n// 7:    demlo_num += ch * count\n// 8: return demlo_num", "entry_point": "findDemlo", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = findDemlo(string(\"111111\"));\n    if (!(compare(x0, string(\"12345654321\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = findDemlo(string(\"1111\"));\n    if (!(compare(x1, string(\"1234321\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = findDemlo(string(\"13333122222\"));\n    if (!(compare(x2, string(\"123456789101110987654321\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the demlo number for the given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/322", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all index positions of the minimum values in a given list.\n */\nvector<int> positionMin(vector<int> list1) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of int\n// Output: positions: list of int\n// 1: min_val <- min(list1)\n// 2: positions <- []\n// 3: for i in range(len(list1)) do\n// 4:    if list1[i] == min_val then\n// 5:        positions.append(i)\n// 6: return positions", "entry_point": "positionMin", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = positionMin(vector<int>{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54});\n    if (!(compare(x0, {3, 11}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = positionMin(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5});\n    if (!(compare(x1, {0}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = positionMin(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12});\n    if (!(compare(x2, {1}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find all index positions of the minimum values in a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/323", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to re-arrange the given array in alternating positive and negative items.\n */\nvector<int> reArrange(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of ints, n: int\n// Output: res: list of ints\n// 1: pos <- []\n// 2: neg <- []\n// 3: for i in range(n) do\n// 4:    if arr[i] >= 0 then\n// 5:        pos.append(arr[i])\n// 6:    else:\n// 7:        neg.append(arr[i])\n// 8: i <- 0\n// 9: j <- 0\n// 10: res <- []\n// 11: while i < len(pos) and j < len(neg) do\n// 12:    res.append(pos[i])\n// 13:    res.append(neg[j])\n// 14:    i <- i + 1\n// 15:    j <- j + 1\n// 16: while i < len(pos) do\n// 17:    res.append(pos[i])\n// 18:    i <- i + 1\n// 19: while j < len(neg) do\n// 20:    res.append(neg[j])\n// 21:    j <- j + 1\n// 22: return res", "entry_point": "reArrange", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = reArrange(vector<int>{-5, -2, 5, 2, 4, 7, 1, 8, 0, -8}, 10);\n    if (!(compare(x0, {-5, 5, -2, 2, -8, 4, 7, 1, 8, 0}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = reArrange(vector<int>{1, 2, 3, -4, -1, 4}, 6);\n    if (!(compare(x1, {-4, 1, -1, 2, 3, 4}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = reArrange(vector<int>{4, 7, 9, 77, -4, 5, -3, -9}, 8);\n    if (!(compare(x2, {-4, 4, -3, 7, -9, 9, 77, 5}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to re-arrange the given array in alternating positive and negative items.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/324", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the sum of alternate chains of tuples.\n */\nvector<int> sumOfAlternates(vector<int> testTuple) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tuple: tuple\n// Output: sums: list\n// 1: sums <- empty list\n// 2: for i in range(0, len(test_tuple), 2) do\n// 3:    current_sum <- 0\n// 4:    for j in range(i, min(i+2, len(test_tuple))) do\n// 5:        current_sum <- current_sum + test_tuple[j]\n// 6:    sums.append(current_sum)\n// 7: return sums", "entry_point": "sumOfAlternates", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = sumOfAlternates(vector<int>{5, 6, 3, 6, 10, 34});\n    if (!(compare(x0, {46, 18}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = sumOfAlternates(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x1, {6, 9}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = sumOfAlternates(vector<int>{6, 7, 8, 9, 4, 5});\n    if (!(compare(x2, {21, 18}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract the sum of alternate chains of tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/325", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum number of squares whose sum is equal to a given number.\n */\nint getMinSquares(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: count: int\n// 1: if n < 4 then\n// 2:    return n\n// 3: count <- n\n// 4: for i from 1 to n do\n// 5:    curr <- i * i\n// 6:    if curr > n then\n// 7:        break\n// 8:    else\n// 9:        count <- min(count, 1 + getMinSquares(n - curr))\n// 10: return count", "entry_point": "getMinSquares", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getMinSquares(6);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getMinSquares(2);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getMinSquares(4);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the minimum number of squares whose sum is equal to a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/326", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the word with most number of occurrences in the given strings list.\n */\nstring mostOccurrences(vector<string> testList) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of strings\n// Output: word: str\n// 1: word_count <- {}\n// 2: for each string in test_list do\n// 3:    words <- string.split()\n// 4:    for each word in words do\n// 5:        if word not in word_count then\n// 6:            word_count[word] <- 0\n// 7:        word_count[word] <- word_count[word] + 1\n// 8: max_count <- -inf\n// 9: for word, count in word_count.items() do\n// 10:    if count > max_count then\n// 11:        max_count <- count\n// 12:        max_word <- word\n// 13: return max_word", "entry_point": "mostOccurrences", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = mostOccurrences(vector<string>{string(\"UTS is best for RTF\"), string(\"RTF love UTS\"), string(\"UTS is best\")});\n    if (!(compare(x0, string(\"UTS\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = mostOccurrences(vector<string>{string(\"Its been a great year\"), string(\"this year is so worse\"), string(\"this year is okay\")});\n    if (!(compare(x1, string(\"year\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = mostOccurrences(vector<string>{string(\"Families can be reunited\"), string(\"people can be reunited\"), string(\"Tasks can be achieved \")});\n    if (!(compare(x2, string(\"can\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to get the word with most number of occurrences in the given strings list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/327", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print check if the triangle is isosceles or not.\n */\nbool checkIsosceles(int x, int y, int z) {\n}\n\n// The pseudo code of the above function:\n// Input: x: int, y: int, z: int\n// Output: True or False\n// 1: if x == y or y == z or z == x then\n// 2:    return True\n// 3: else:\n// 4:    return False", "entry_point": "checkIsosceles", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkIsosceles(6, 8, 12);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkIsosceles(6, 6, 12);\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkIsosceles(6, 16, 20);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to print check if the triangle is isosceles or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/328", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to rotate a given list by specified number of items to the left direction.\n */\nvector<int> rotateLeft(vector<int> list1, int m, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of integers, m: int, n: int\n// Output: rotated_list: list of integers\n// 1: m <- m % n\n// 2: reverse(list1[0:m])\n// 3: reverse(list1[m:])\n// 4: reverse(list1)\n// 5: return list1", "entry_point": "rotateLeft", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3, 4);\n    if (!(compare(x0, {4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2, 2);\n    if (!(compare(x1, {3, 4, 5, 6, 7, 8, 9, 10, 1, 2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5, 2);\n    if (!(compare(x2, {6, 7, 8, 9, 10, 1, 2}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to rotate a given list by specified number of items to the left direction.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/329", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count negative numbers in a list.\n */\nint negCount(vector<int> list) {\n}\n\n// The pseudo code of the above function:\n// Input: lst: list of integers\n// Output: count: int\n// 1: count <- 0\n// 2: for each num in lst do\n// 3:    if num < 0 then\n// 4:        count <- count + 1\n// 5: return count", "entry_point": "negCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = negCount(vector<int>{-1, -2, 3, -4, -5});\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = negCount(vector<int>{1, 2, 3});\n    if (!(compare(x1, 0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = negCount(vector<int>{1, 2, -3, -10, 20});\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count negative numbers in a list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/330", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all three, four, five characters long words in the given string by using regex.\n */\nvector<string> findChar(string text) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: words: list of str\n// 1: pattern <- regex pattern to match words of length 3, 4, and 5\n// 2: words <- empty list\n// 3: for match in regex finditer(pattern, text) do\n// 4:    words.append(match.group())\n// 5: return words", "entry_point": "findChar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = findChar(string(\"For the four consumer complaints contact manager AKR reddy\"));\n    if (!(compare(x0, {string(\"For\"), string(\"the\"), string(\"four\"), string(\"AKR\"), string(\"reddy\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = findChar(string(\"Certain service are subject to change MSR\"));\n    if (!(compare(x1, {string(\"are\"), string(\"MSR\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = findChar(string(\"Third party legal desclaimers\"));\n    if (!(compare(x2, {string(\"Third\"), string(\"party\"), string(\"legal\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find all three, four, five characters long words in the given string by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/331", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count unset bits of a given number.\n */\nint countUnsetBits(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: count: int\n// 1: count <- 0\n// 2: while n > 0 do\n// 3:    if (n & 1) == 0 then\n// 4:        count <- count + 1\n// 5:    n <- n >> 1\n// 6: return count", "entry_point": "countUnsetBits", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countUnsetBits(2);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countUnsetBits(4);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countUnsetBits(6);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count unset bits of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/332", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count character frequency of a given string.\n */\nunordered_map<string, int> charFrequency(string str1) {\n}\n\n// The pseudo code of the above function:\n// Input: str1: str\n// Output: char_freq: dict\n// 1: char_freq <- {}\n// 2: for c in str1 do\n// 3:    if c in char_freq then\n// 4:        char_freq[c] += 1\n// 5:    else:\n// 6:        char_freq[c] = 1\n// 7: return char_freq", "entry_point": "charFrequency", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<string, int> x0 = charFrequency(string(\"python\"));\n    if (!(compare(x0, {{string(\"p\"), 1}, {string(\"y\"), 1}, {string(\"t\"), 1}, {string(\"h\"), 1}, {string(\"o\"), 1}, {string(\"n\"), 1}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<string, int> x1 = charFrequency(string(\"program\"));\n    if (!(compare(x1, {{string(\"p\"), 1}, {string(\"r\"), 2}, {string(\"o\"), 1}, {string(\"g\"), 1}, {string(\"a\"), 1}, {string(\"m\"), 1}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<string, int> x2 = charFrequency(string(\"language\"));\n    if (!(compare(x2, {{string(\"l\"), 1}, {string(\"a\"), 2}, {string(\"n\"), 1}, {string(\"g\"), 2}, {string(\"u\"), 1}, {string(\"e\"), 1}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count character frequency of a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/334", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the triangle is valid or not if sides are given.\n */\nbool checkValidity(int a, int b, int c) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, b: int, c: int\n// Output: True or False\n// 1: if a + b > c and b + c > a and a + c > b then\n// 2:    return True\n// 3: else\n// 4:    return False", "entry_point": "checkValidity", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkValidity(1, 2, 3);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkValidity(2, 3, 5);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkValidity(7, 10, 5);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the triangle is valid or not if sides are given.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/335", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of arithmetic progression.\n */\nint apSum(int a, int n, int d) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, n: int, d: int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for i <- 0 to n-1 do\n// 3:    sum <- sum + a + i*d\n// 4: return sum", "entry_point": "apSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = apSum(1, 5, 2);\n    if (!(compare(x0, 25))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = apSum(2, 6, 4);\n    if (!(compare(x1, 72))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = apSum(1, 4, 5);\n    if (!(compare(x2, 34))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the sum of arithmetic progression.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/336", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month name contains 28 days or not.\n */\nbool checkMonthnum(string monthname1) {\n}\n\n// The pseudo code of the above function:\n// Input: month_name: str\n// Output: True or False\n// 1: if month_name == \"February\" then\n// 2:    return True\n// 3: else\n// 4:    return False", "entry_point": "checkMonthnum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkMonthnum(string(\"February\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkMonthnum(string(\"January\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkMonthnum(string(\"March\"));\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether the given month name contains 28 days or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/337", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word at the end of a string, with optional punctuation.\n */\nstring textMatchWord(string text) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: word: str\n// 1: words <- split text by spaces\n// 2: last_word <- words[-1]\n// 3: if last_word ends with punctuation then\n// 4:    last_word <- last_word[:-1]\n// 5: return last_word", "entry_point": "textMatchWord", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatchWord(string(\"python.\"));\n    if (!(compare(x0, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatchWord(string(\"python.\"));\n    if (!(compare(x1, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatchWord(string(\"  lang  .\"));\n    if (!(compare(x2, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function that matches a word at the end of a string, with optional punctuation.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/338", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of substrings with same first and last characters.\n */\nint countSubstringWithEqualEnds(string s) {\n}\n\n// The pseudo code of the above function:\n// Input: s: str\n// Output: count: int\n// 1: count <- 0\n// 2: for i in range(len(s)) do\n// 3:    for j in range(i, len(s)) do\n// 4:        if s[i] == s[j] then\n// 5:            count <- count + 1\n// 6: return count", "entry_point": "countSubstringWithEqualEnds", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSubstringWithEqualEnds(string(\"aba\"));\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSubstringWithEqualEnds(string(\"abcab\"));\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSubstringWithEqualEnds(string(\"abc\"));\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the number of substrings with same first and last characters.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/339", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum occuring divisor in an interval.\n */\nint findDivisor(int x, int y) {\n}\n\n// The pseudo code of the above function:\n// Input: x, y: int\n// Output: max_div: int\n// 1: max_div <- 0\n// 2: for i <- 1 to min(x, y) do\n// 3:    if x % i == 0 and y % i == 0 then\n// 4:        max_div <- max(max_div, i)\n// 5: return max_div", "entry_point": "findDivisor", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findDivisor(2, 2);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findDivisor(2, 5);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findDivisor(5, 10);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the maximum occuring divisor in an interval.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/340", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of the three lowest positive numbers from a given list of numbers.\n */\nint sumThreeSmallestNums(vector<int> lst) {\n}\n\n// The pseudo code of the above function:\n// Input: lst: list of integers\n// Output: sum: int\n// 1: sort lst in ascending order\n// 2: sum <- 0\n// 3: for i in range(3) do\n// 4:    sum <- sum + lst[i]\n// 5: return sum", "entry_point": "sumThreeSmallestNums", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumThreeSmallestNums(vector<int>{10, 20, 30, 40, 50, 60, 7});\n    if (!(compare(x0, 37))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumThreeSmallestNums(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumThreeSmallestNums(vector<int>{0, 1, 2, 3, 4, 5});\n    if (!(compare(x2, 6))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of the three lowest positive numbers from a given list of numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/341", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given set into tuples.\n */\nvector<int> setToTuple(unordered_set<int> s) {\n}\n\n// The pseudo code of the above function:\n// Input: s: set\n// Output: tuple: list of int\n// 1: tuple <- []\n// 2: for x in s do\n// 3:    tuple.append(x)\n// 4: return tuple", "entry_point": "setToTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = setToTuple(unordered_set<int>{1, 2, 3, 4, 5});\n    if (!(compare(x0, {1, 2, 3, 4, 5}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = setToTuple(unordered_set<int>{6, 7, 8, 9, 10, 11});\n    if (!(compare(x1, {6, 7, 8, 9, 10, 11}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = setToTuple(unordered_set<int>{12, 13, 14, 15, 16});\n    if (!(compare(x2, {12, 13, 14, 15, 16}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert the given set into tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/342", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */\nvector<int> findMinimumRange(vector<vector<int>> list) {\n}\n\n// The pseudo code of the above function:\n// Input: list: list of lists of integers\n// Output: range: list of two integers\n// 1: n <- length of list\n// 2: pointers <- list of n integers initialized to 0\n// 3: range <- [0, inf]\n// 4: while True do\n// 5:    min_val <- min(list[i][pointers[i]] for i in range(n))\n// 6:    max_val <- max(list[i][pointers[i]] for i in range(n))\n// 7:    if max_val - min_val < range[1] - range[0] then\n// 8:        range <- [min_val, max_val]\n// 9:    min_index <- -1\n// 10:   for i in range(n) do\n// 11:       if pointers[i] == len(list[i]) or list[i][pointers[i]] > min_val then\n// 12:           if pointers[i] == 0 then\n// 13:               return range\n// 14:           pointers[i] <- pointers[i] - 1\n// 15:           if max_val - list[i][pointers[i]] < range[1] - range[0] then\n// 16:               range <- [list[i][pointers[i]], max_val]\n// 17:           break\n// 18:       elif list[i][pointers[i", "entry_point": "findMinimumRange", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = findMinimumRange(vector<vector<int>>{{3, 6, 8, 10, 15}, {1, 5, 12}, {4, 8, 15, 16}, {2, 6}});\n    if (!(compare(x0, {4, 6}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = findMinimumRange(vector<vector<int>>{{2, 3, 4, 8, 10, 15}, {1, 5, 12}, {7, 8, 15, 16}, {3, 6}});\n    if (!(compare(x1, {4, 7}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = findMinimumRange(vector<vector<int>>{{4, 7, 9, 11, 16}, {2, 6, 13}, {5, 9, 16, 17}, {3, 7}});\n    if (!(compare(x2, {5, 7}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/343", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the number of digits and letters in a string.\n */\nvector<int> digLet(string s) {\n}\n\n// The pseudo code of the above function:\n// Input: s: str\n// Output: res: list of int\n// 1: digits <- 0\n// 2: letters <- 0\n// 3: for c in s do\n// 4:    if c.isdigit() then\n// 5:        digits <- digits + 1\n// 6:    elif c.isalpha() then\n// 7:        letters <- letters + 1\n// 8: res <- [digits, letters]\n// 9: return res", "entry_point": "digLet", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = digLet(string(\"python\"));\n    if (!(compare(x0, {6, 0}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = digLet(string(\"program\"));\n    if (!(compare(x1, {7, 0}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = digLet(string(\"python3.0\"));\n    if (!(compare(x2, {6, 2}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the number of digits and letters in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/344", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find number of elements with odd factors in a given range.\n */\nint countOddSquares(int n, int m) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int, m: int\n// Output: count: int\n// 1: count <- 0\n// 2: for i in range(n, m+1) do\n// 3:    if sqrt(i) % 1 == 0 and sqrt(i) % 2 == 1 then\n// 4:        count <- count + 1\n// 5: return count", "entry_point": "countOddSquares", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countOddSquares(5, 100);\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countOddSquares(8, 65);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countOddSquares(2, 5);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find number of elements with odd factors in a given range.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/345", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the difference between two consecutive numbers in a given list.\n */\nvector<int> diffConsecutivenums(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of integers\n// Output: diff_list: list of integers\n// 1: diff_list <- []\n// 2: for i <- 0 to len(nums)-2 do\n// 3:    diff_list.append(abs(nums[i+1] - nums[i]))\n// 4: return diff_list", "entry_point": "diffConsecutivenums", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = diffConsecutivenums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7});\n    if (!(compare(x0, {0, 2, 1, 0, 1, 1, 1}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = diffConsecutivenums(vector<int>{4, 5, 8, 9, 6, 10});\n    if (!(compare(x1, {1, 3, 1, -3, 4}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = diffConsecutivenums(vector<int>{0, 1, 2, 3, 4, 4, 4, 4, 5, 7});\n    if (!(compare(x2, {1, 1, 1, 1, 0, 0, 0, 1, 2}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the difference between two consecutive numbers in a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/346", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find entringer number e(n, k).\n */\nint zigzag(int n, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: n, k: int\n// Output: e: int\n// 1: if k == 1 or k == n then\n// 2:    return 1\n// 3: e <- 0\n// 4: for i <- 1 to k do\n// 5:    e <- e + zigzag(n-1, i)\n// 6: return e", "entry_point": "zigzag", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = zigzag(4, 3);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = zigzag(4, 2);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = zigzag(3, 1);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find entringer number e(n, k).", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/347", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of squares in a rectangle.\n */\nint countSquares(int m, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: m: int, n: int\n// Output: count: int\n// 1: if m == 0 or n == 0 then\n// 2:    return 0\n// 3: count <- 0\n// 4: for i <- 1 to min(m, n) do\n// 5:    count <- count + (m-i+1) * (n-i+1)\n// 6: return count", "entry_point": "countSquares", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSquares(4, 3);\n    if (!(compare(x0, 20))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSquares(1, 2);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSquares(2, 2);\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the number of squares in a rectangle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/348", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n */\nint findWays(int m) {\n}\n\n// The pseudo code of the above function:\n// Input: m: int\n// Output: count: int\n// 1: dp <- array of size m+1, initialized with 0\n// 2: dp[0] <- 1\n// 3: for i <- 1 to m do\n// 4:    for j <- 0 to i-1 do\n// 5:        dp[i] <- dp[i] + dp[j]\n// 6: count <- dp[m] - 1\n// 7: return count", "entry_point": "findWays", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findWays(4);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findWays(6);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findWays(8);\n    if (!(compare(x2, 14))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/349", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given string is a binary string or not.\n */\nstring check(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: \"Yes\" or \"No\"\n// 1: for s in str do\n// 2:    if s != '0' and s != '1' then\n// 3:        return \"No\"\n// 4: return \"Yes\"", "entry_point": "check", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = check(string(\"01010101010\"));\n    if (!(compare(x0, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = check(string(\"name0\"));\n    if (!(compare(x1, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = check(string(\"101\"));\n    if (!(compare(x2, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given string is a binary string or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/350", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to minimize the length of the string by removing occurrence of only one character.\n */\nint minimumLength(string s) {\n}\n\n// The pseudo code of the above function:\n// Input: s: str\n// Output: min_length: int\n// 1: create a map to store frequency of characters in s\n// 2: set min_length to the length of s\n// 3: for each character c in s do\n// 4:    decrement the frequency of c in the map\n// 5:    if the frequency of c is now 0 then remove c from the map\n// 6:    create a new string by removing all occurrences of the keys in the map from s\n// 7:    set min_length to the minimum of min_length and the length of the new string\n// 8: return min_length", "entry_point": "minimumLength", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minimumLength(string(\"mnm\"));\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minimumLength(string(\"abcda\"));\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minimumLength(string(\"abcb\"));\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to minimize the length of the string by removing occurrence of only one character.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/351", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first element occurring k times in a given array.\n */\nint firstElement(vector<int> arr, int n, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of int, n: int, k: int\n// Output: first_element: int\n// 1: count_dict <- dictionary of {int: int}\n// 2: for i in range(n) do\n// 3:    if arr[i] in count_dict.keys() then\n// 4:        count_dict[arr[i]] <- count_dict[arr[i]] + 1\n// 5:    else then\n// 6:        count_dict[arr[i]] <- 1\n// 7: for i in range(n) do\n// 8:    if count_dict[arr[i]] == k then\n// 9:        return arr[i]\n// 10: return -1", "entry_point": "firstElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = firstElement(vector<int>{0, 1, 2, 3, 4, 5}, 6, 1);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = firstElement(vector<int>{1, 2, 1, 3, 4}, 5, 2);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = firstElement(vector<int>{2, 3, 4, 3, 5, 7, 1, 2, 3, 5}, 10, 2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the first element occurring k times in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/352", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the characters in a given string are unique.\n */\nbool uniqueCharacters(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: True or False\n// 1: for i in range(len(str)) do\n// 2:    if str[i] in str[i+1:] then\n// 3:        return False\n// 4: return True", "entry_point": "uniqueCharacters", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = uniqueCharacters(string(\"aba\"));\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = uniqueCharacters(string(\"abc\"));\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = uniqueCharacters(string(\"abab\"));\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether all the characters in a given string are unique.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/353", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove a specified column from a given nested list.\n */\nvector<vector<int>> removeColumn(vector<vector<int>> list1, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of lists, n: int\n// Output: list2: list of lists\n// 1: for i in range(len(list1)) do\n// 2:    list1[i].pop(n)\n// 3: return list1", "entry_point": "removeColumn", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = removeColumn(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}, 0);\n    if (!(compare(x0, {{2, 3}, {4, 5}, {1, 1}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = removeColumn(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}, 2);\n    if (!(compare(x1, {{1, 2}, {-2, 4}, {1, -1}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = removeColumn(vector<vector<int>>{{1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11}}, 0);\n    if (!(compare(x2, {{3}, {7}, {3}, {15, 17}, {7}, {11}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove a specified column from a given nested list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/354", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find t-nth term of arithemetic progression.\n */\nint tnAp(int a, int n, int d) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, n: int, d: int\n// Output: tn: int\n// 1: tn <- a + (n-1)*d\n// 2: return tn", "entry_point": "tnAp", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = tnAp(1, 5, 2);\n    if (!(compare(x0, 9))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = tnAp(2, 6, 4);\n    if (!(compare(x1, 22))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = tnAp(1, 4, 5);\n    if (!(compare(x2, 16))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find t-nth term of arithemetic progression.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/355", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of rectangles in a circle of radius r.\n */\nint countRectangles(int radius) {\n}\n\n// The pseudo code of the above function:\n// Input: radius: int\n// Output: count: int\n// 1: count <- 0\n// 2: for i <- 1 to radius do\n// 3:    for j <- 1 to radius do\n// 4:        if i*i + j*j <= radius*radius then\n// 5:            count <- count + 1\n// 6: return count * 4", "entry_point": "countRectangles", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countRectangles(2);\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countRectangles(1);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countRectangles(0);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the number of rectangles in a circle of radius r.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/356", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the third angle of a triangle using two angles.\n */\nint findAngle(int a, int b) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, b: int\n// Output: angle: int\n// 1: sum_of_angles <- a + b\n// 2: angle <- 180 - sum_of_angles\n// 3: return angle", "entry_point": "findAngle", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findAngle(47, 89);\n    if (!(compare(x0, 44))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findAngle(45, 95);\n    if (!(compare(x1, 40))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findAngle(50, 40);\n    if (!(compare(x2, 90))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the third angle of a triangle using two angles.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/357", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum element of all the given tuple records.\n */\nint findMax(vector<vector<int>> testList) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of tuples\n// Output: max: int\n// 1: max <- -inf\n// 2: for each t in test_list do\n// 3:    for each elem in t do\n// 4:        if elem > max then\n// 5:            max <- elem\n// 6: return max", "entry_point": "findMax", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMax(vector<vector<int>>{{2, 4}, {6, 7}, {5, 1}, {6, 10}, {8, 7}});\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMax(vector<vector<int>>{{3, 5}, {7, 8}, {6, 2}, {7, 11}, {9, 8}});\n    if (!(compare(x1, 11))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMax(vector<vector<int>>{{4, 6}, {8, 9}, {7, 3}, {8, 12}, {10, 9}});\n    if (!(compare(x2, 12))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum element of all the given tuple records.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/358", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find modulo division of two lists using map and lambda function.\n */\nvector<int> moddivList(vector<int> nums1, vector<int> nums2) {\n}\n\n// The pseudo code of the above function:\n// Input: nums1: list of integers, nums2: list of integers\n// Output: res: list of integers\n// 1: res <- map(lambda x, y: x % y, nums1, nums2)\n// 2: return res", "entry_point": "moddivList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = moddivList(vector<int>{4, 5, 6}, vector<int>{1, 2, 3});\n    if (!(compare(x0, {0, 1, 0}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = moddivList(vector<int>{3, 2}, vector<int>{1, 4});\n    if (!(compare(x1, {0, 2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = moddivList(vector<int>{90, 120}, vector<int>{50, 70});\n    if (!(compare(x2, {40, 50}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find modulo division of two lists using map and lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/359", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether one root of the quadratic equation is twice of the other or not.\n */\nstring checkSolution(int a, int b, int c) {\n}\n\n// The pseudo code of the above function:\n// Input: a, b, c: int\n// Output: \"Yes\" or \"No\"\n// 1: delta <- b^2 - 4*a*c\n// 2: if delta < 0 then\n// 3:    return \"No\"\n// 4: else if delta == 0 then\n// 5:    x <- (-b)/(2*a)\n// 6:    if x*2 == x then\n// 7:        return \"Yes\"\n// 8:    else\n// 9:        return \"No\"\n// 10: else\n// 11:    x1 <- (-b + sqrt(delta))/(2*a)\n// 12:    x2 <- (-b - sqrt(delta))/(2*a)\n// 13:    if x1*2 == x2 or x2*2 == x1 then\n// 14:        return \"Yes\"\n// 15:    else\n// 16:        return \"No\"", "entry_point": "checkSolution", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkSolution(1, 3, 2);\n    if (!(compare(x0, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkSolution(1, 2, 3);\n    if (!(compare(x1, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkSolution(1, -5, 6);\n    if (!(compare(x2, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether one root of the quadratic equation is twice of the other or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/360", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n\u2019th carol number.\n */\nint getCarol(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: carol_number: int\n// 1: carol_number <- ((2**(n+1))-1)**2 - 2**(2*n+1) \n// 2: return carol_number", "entry_point": "getCarol", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getCarol(2);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getCarol(4);\n    if (!(compare(x1, 223))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getCarol(5);\n    if (!(compare(x2, 959))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the n\u2019th carol number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/363", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add the k elements to each element in the tuple.\n */\nvector<vector<int>> addKElement(vector<vector<int>> testList, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of tuples, K: int\n// Output: new_list: list of tuples\n// 1: new_list <- empty list\n// 2: for each t in test_list do\n// 3:    new_t <- empty tuple\n// 4:    for i <- 0 to len(t)-1 do\n// 5:        new_t[i] <- t[i] + k\n// 6:    new_list.append(new_t)\n// 7: return new_list", "entry_point": "addKElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = addKElement(vector<vector<int>>{{1, 3, 4}, {2, 4, 6}, {3, 8, 1}}, 4);\n    if (!(compare(x0, {{5, 7, 8}, {6, 8, 10}, {7, 12, 5}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = addKElement(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 8);\n    if (!(compare(x1, {{9, 10, 11}, {12, 13, 14}, {15, 16, 17}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = addKElement(vector<vector<int>>{{11, 12, 13}, {14, 15, 16}, {17, 18, 19}}, 9);\n    if (!(compare(x2, {{20, 21, 22}, {23, 24, 25}, {26, 27, 28}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to add the k elements to each element in the tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/364", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n */\nint minFlipToMakeStringAlternate(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: flips: int\n// 1: flips <- 0\n// 2: for i <- 0 to len(str)-2 do\n// 3:    if str[i] == str[i+1] then\n// 4:        flips <- flips+1\n// 5: return flips", "entry_point": "minFlipToMakeStringAlternate", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minFlipToMakeStringAlternate(string(\"0001010111\"));\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minFlipToMakeStringAlternate(string(\"001\"));\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minFlipToMakeStringAlternate(string(\"010111011\"));\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/365", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of digits of a given number.\n */\nint countDigit(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: count: int\n// 1: count <- 0\n// 2: while n > 0 do\n// 3:    count <- count + 1\n// 4:    n <- n / 10\n// 5: return count", "entry_point": "countDigit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countDigit(12345);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countDigit(11223305);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countDigit(4123459);\n    if (!(compare(x2, 7))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the number of digits of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/366", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest product of the pair of adjacent elements from a given list of integers.\n */\nint adjacentNumProduct(vector<int> listNums) {\n}\n\n// The pseudo code of the above function:\n// Input: listNums: list of int\n// Output: largest product: int\n// 1: largest_product <- -inf\n// 2: for i in range(len(listNums)-1) do\n// 3:    product <- listNums[i] * listNums[i+1]\n// 4:    if product > largest_product then\n// 5:        largest_product <- product\n// 6: return largest_product", "entry_point": "adjacentNumProduct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = adjacentNumProduct(vector<int>{1, 2, 3, 4, 5, 6});\n    if (!(compare(x0, 30))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = adjacentNumProduct(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x1, 20))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = adjacentNumProduct(vector<int>{2, 3});\n    if (!(compare(x2, 6))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the largest product of the pair of adjacent elements from a given list of integers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/368", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to repeat the given tuple n times.\n */\nvector<vector<int>> repeatTuples(vector<int> testTup, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup: tuple, n: int\n// Output: result: list of tuples\n// 1: result <- []\n// 2: for i <- 0 to n-1 do\n// 3:    result.append(test_tup)\n// 4: return result", "entry_point": "repeatTuples", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = repeatTuples(vector<int>{1, 3}, 4);\n    if (!(compare(x0, {{1, 3}, {1, 3}, {1, 3}, {1, 3}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = repeatTuples(vector<int>{1, 2}, 3);\n    if (!(compare(x1, {{1, 2}, {1, 2}, {1, 2}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = repeatTuples(vector<int>{3, 4}, 5);\n    if (!(compare(x2, {{3, 4}, {3, 4}, {3, 4}, {3, 4}, {3, 4}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to repeat the given tuple n times.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/369", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of cuboid\n */\nint lateralsurfaceCuboid(int l, int w, int h) {\n}\n\n// The pseudo code of the above function:\n// Input: l: int, w: int, h: int\n// Output: area: int\n// 1: area <- 2 * h * (l + w)\n// 2: return area", "entry_point": "lateralsurfaceCuboid", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = lateralsurfaceCuboid(8, 5, 6);\n    if (!(compare(x0, 156))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = lateralsurfaceCuboid(7, 9, 10);\n    if (!(compare(x1, 320))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = lateralsurfaceCuboid(10, 20, 30);\n    if (!(compare(x2, 1800))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the lateral surface area of cuboid", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/370", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a tuple by its float element.\n */\nvector<vector<string>> floatSort(vector<vector<string>> price) {\n}\n\n// The pseudo code of the above function:\n// Input: price: list of tuples\n// Output: sorted_price: list of tuples\n// 1: sorted_price <- sorted(price, key=lambda x: float(x[1]))\n// 2: return sorted_price", "entry_point": "floatSort", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<string>> x0 = floatSort(vector<vector<string>>{{string(\"item1\"), string(\"12.20\")}, {string(\"item2\"), string(\"15.10\")}, {string(\"item3\"), string(\"24.5\")}});\n    if (!(compare(x0, {{string(\"item3\"), string(\"24.5\")}, {string(\"item2\"), string(\"15.10\")}, {string(\"item1\"), string(\"12.20\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<string>> x1 = floatSort(vector<vector<string>>{{string(\"item1\"), string(\"15\")}, {string(\"item2\"), string(\"10\")}, {string(\"item3\"), string(\"20\")}});\n    if (!(compare(x1, {{string(\"item3\"), string(\"20\")}, {string(\"item1\"), string(\"15\")}, {string(\"item2\"), string(\"10\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<string>> x2 = floatSort(vector<vector<string>>{{string(\"item1\"), string(\"5\")}, {string(\"item2\"), string(\"10\")}, {string(\"item3\"), string(\"14\")}});\n    if (!(compare(x2, {{string(\"item3\"), string(\"14\")}, {string(\"item2\"), string(\"10\")}, {string(\"item1\"), string(\"5\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort a tuple by its float element.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/371", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest missing element in a sorted array.\n */\nint smallestMissing(vector<int> a, int leftElement, int rightElement) {\n}\n\n// The pseudo code of the above function:\n// Input: a: list of int, left_element: int, right_element: int\n// Output: smallest_missing: int\n// 1: if left_element > right_element then\n// 2:    return left_element\n// 3: mid_element <- (left_element + right_element) // 2\n// 4: if a[mid_element] == mid_element then\n// 5:    return smallest_missing(a, mid_element + 1, right_element)\n// 6: else:\n// 7:    return smallest_missing(a, left_element, mid_element)", "entry_point": "smallestMissing", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = smallestMissing(vector<int>{0, 1, 2, 3, 4, 5, 6}, 0, 6);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = smallestMissing(vector<int>{0, 1, 2, 6, 9, 11, 15}, 0, 6);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = smallestMissing(vector<int>{1, 2, 3, 4, 6, 9, 11, 15}, 0, 7);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the smallest missing element in a sorted array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/372", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n */\nvector<int> heapAssending(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of int\n// Output: sorted_nums: list of int\n// 1: heapify(nums)\n// 2: for i <- len(nums)-1 to 0 do\n// 3:    nums[0], nums[i] <- nums[i], nums[0]\n// 4:    siftDown(nums, 0, i-1)\n// 5: return nums", "entry_point": "heapAssending", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = heapAssending(vector<int>{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1});\n    if (!(compare(x0, {1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = heapAssending(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58});\n    if (!(compare(x1, {14, 22, 25, 25, 35, 58, 65, 75, 85}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = heapAssending(vector<int>{1, 3, 5, 7, 9, 2, 4, 6, 8, 0});\n    if (!(compare(x2, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/373", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cuboid.\n */\nint volumeCuboid(int l, int w, int h) {\n}\n\n// The pseudo code of the above function:\n// Input: l: int, w: int, h: int\n// Output: vol: int\n// 1: vol <- l * w * h\n// 2: return vol", "entry_point": "volumeCuboid", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = volumeCuboid(1, 2, 3);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = volumeCuboid(5, 7, 9);\n    if (!(compare(x1, 315))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = volumeCuboid(10, 15, 21);\n    if (!(compare(x2, 3150))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the volume of a cuboid.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/374", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print all permutations of a given string including duplicates.\n */\nvector<string> permuteString(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: permutations: list of str\n// 1: if len(str) == 1 then\n// 2:    return [str]\n// 3: perms <- []\n// 4: for i in range(len(str)) do\n// 5:    if i > 0 and str[i] == str[i-1]:\n// 6:        continue\n// 7:    sub_perms <- permuteString(str[:i] + str[i+1:])\n// 8:    for p in sub_perms do\n// 9:        perms.append(str[i] + p)\n// 10: return perms", "entry_point": "permuteString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = permuteString(string(\"ab\"));\n    if (!(compare(x0, {string(\"ab\"), string(\"ba\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = permuteString(string(\"abc\"));\n    if (!(compare(x1, {string(\"abc\"), string(\"bac\"), string(\"bca\"), string(\"acb\"), string(\"cab\"), string(\"cba\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = permuteString(string(\"abcd\"));\n    if (!(compare(x2, {string(\"abcd\"), string(\"bacd\"), string(\"bcad\"), string(\"bcda\"), string(\"acbd\"), string(\"cabd\"), string(\"cbad\"), string(\"cbda\"), string(\"acdb\"), string(\"cadb\"), string(\"cdab\"), string(\"cdba\"), string(\"abdc\"), string(\"badc\"), string(\"bdac\"), string(\"bdca\"), string(\"adbc\"), string(\"dabc\"), string(\"dbac\"), string(\"dbca\"), string(\"adcb\"), string(\"dacb\"), string(\"dcab\"), string(\"dcba\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to print all permutations of a given string including duplicates.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/375", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to round the given number to the nearest multiple of a specific number.\n */\nint roundNum(int n, int m) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int, m: int\n// Output: rounded_num: int\n// 1: quotient <- n // m\n// 2: remainder <- n % m\n// 3: if remainder >= m/2 then\n// 4:    return (quotient + 1) * m\n// 5: else \n// 6:    return quotient * m", "entry_point": "roundNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = roundNum(4722, 10);\n    if (!(compare(x0, 4720))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = roundNum(1111, 5);\n    if (!(compare(x1, 1110))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = roundNum(219, 2);\n    if (!(compare(x2, 218))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to round the given number to the nearest multiple of a specific number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/377", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove all occurrences of a character in a given string.\n */\nstring removeChar(string s, string c) {\n}\n\n// The pseudo code of the above function:\n// Input: s: str, c: str\n// Output: res: str\n// 1: res <- \"\"\n// 2: for i in range(len(s)) do\n// 3:    if s[i] != c then\n// 4:        res += s[i]\n// 5: return res", "entry_point": "removeChar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeChar(string(\"aba\"), string(\"a\"));\n    if (!(compare(x0, string(\"b\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeChar(string(\"toggle\"), string(\"g\"));\n    if (!(compare(x1, string(\"tole\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeChar(string(\"aabbc\"), string(\"b\"));\n    if (!(compare(x2, string(\"aac\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to remove all occurrences of a character in a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/378", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to shift last element to first position in the given list.\n */\nvector<int> moveFirst(vector<int> testList) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of int\n// Output: shifted_list: list of int\n// 1: last_element <- test_list.pop()\n// 2: test_list.insert(0, last_element)\n// 3: return test_list", "entry_point": "moveFirst", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = moveFirst(vector<int>{1, 2, 3, 4});\n    if (!(compare(x0, {4, 1, 2, 3}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = moveFirst(vector<int>{0, 1, 2, 3});\n    if (!(compare(x1, {3, 0, 1, 2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = moveFirst(vector<int>{9, 8, 7, 1});\n    if (!(compare(x2, {1, 9, 8, 7}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to shift last element to first position in the given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/379", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cuboid.\n */\nint surfaceareaCuboid(int l, int w, int h) {\n}\n\n// The pseudo code of the above function:\n// Input: l: int, w: int, h: int\n// Output: surface_area: int\n// 1: surface_area <- 2 * (l * w + w * h + h * l)\n// 2: return surface_area", "entry_point": "surfaceareaCuboid", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = surfaceareaCuboid(1, 2, 3);\n    if (!(compare(x0, 22))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = surfaceareaCuboid(5, 7, 9);\n    if (!(compare(x1, 286))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = surfaceareaCuboid(10, 15, 21);\n    if (!(compare(x2, 1350))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the surface area of a cuboid.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/380", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to generate a two-dimensional array.\n */\nvector<vector<int>> multiList(int rownum, int colnum) {\n}\n\n// The pseudo code of the above function:\n// Input: row_num: int, col_num: int\n// Output: 2D list of integers\n// 1: Initialize an empty 2D list\n// 2: for i <- 0 to row_num-1 do\n// 3:    Initialize an empty list\n// 4:    for j <- 0 to col_num-1 do\n// 5:        Append 0 to the list\n// 6:    Append the list to the 2D list\n// 7: return the 2D list", "entry_point": "multiList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = multiList(3, 4);\n    if (!(compare(x0, {{0, 0, 0, 0}, {0, 1, 2, 3}, {0, 2, 4, 6}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = multiList(5, 7);\n    if (!(compare(x1, {{0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6}, {0, 2, 4, 6, 8, 10, 12}, {0, 3, 6, 9, 12, 15, 18}, {0, 4, 8, 12, 16, 20, 24}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = multiList(10, 15);\n    if (!(compare(x2, {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28}, {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42}, {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56}, {0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70}, {0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84}, {0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98}, {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112}, {0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to generate a two-dimensional array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/382", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of rotations in a circularly sorted array.\n */\nint findRotationCount(vector<int> a) {\n}\n\n// The pseudo code of the above function:\n// Input: a: list of int\n// Output: count: int\n// 1: n <- length of a\n// 2: low <- 0, high <- n-1\n// 3: while low <= high do\n// 4:    if a[low] <= a[high] then\n// 5:        return low\n// 6:    mid <- (low+high)//2\n// 7:    prev <- (mid+n-1)%n, nxt <- (mid+1)%n\n// 8:    if a[mid] <= a[prev] and a[mid] <= a[nxt] then\n// 9:        return mid\n// 10:   else if a[mid] <= a[high] then\n// 11:       high <- mid-1\n// 12:   else if a[mid] >= a[low] then\n// 13:       low <- mid+1\n// 14: return -1", "entry_point": "findRotationCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findRotationCount(vector<int>{8, 9, 10, 1, 2, 3, 4, 5, 6, 7});\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findRotationCount(vector<int>{8, 9, 10, 2, 5, 6});\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findRotationCount(vector<int>{2, 5, 6, 8, 9, 10});\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the number of rotations in a circularly sorted array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/383", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle all odd bits of a given number.\n */\nint evenBitToggleNumber(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: result: int\n// 1: mask <- 0xAAAAAAAA  // mask to toggle all odd bits\n// 2: result <- n XOR mask  // toggle all odd bits\n// 3: return result", "entry_point": "evenBitToggleNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = evenBitToggleNumber(10);\n    if (!(compare(x0, 15))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = evenBitToggleNumber(20);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = evenBitToggleNumber(30);\n    if (!(compare(x2, 11))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to toggle all odd bits of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/384", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of the smallest value in a given array.\n */\nint frequencyOfSmallest(int n, vector<int> arr) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int, arr: list of int\n// Output: count: int\n// 1: min_val <- inf\n// 2: for i in range(n) do\n// 3:    if arr[i] < min_val then\n// 4:        min_val <- arr[i]\n// 5: count <- 0\n// 6: for i in range(n) do\n// 7:    if arr[i] == min_val then\n// 8:        count <- count + 1\n// 9: return count", "entry_point": "frequencyOfSmallest", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = frequencyOfSmallest(5, vector<int>{1, 2, 3, 4, 3});\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = frequencyOfSmallest(7, vector<int>{3, 1, 2, 5, 6, 2, 3});\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = frequencyOfSmallest(7, vector<int>{3, 3, 6, 3, 7, 4, 9});\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the frequency of the smallest value in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/385", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th perrin number using recursion.\n */\nint getPerrin(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: perrin_n: int\n// 1: if n == 0 then\n// 2:    return 3\n// 3: if n == 1 then\n// 4:    return 0\n// 5: if n == 2 then\n// 6:    return 2\n// 7: return getPerrin(n-2) + getPerrin(n-3)", "entry_point": "getPerrin", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getPerrin(9);\n    if (!(compare(x0, 12))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getPerrin(4);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getPerrin(6);\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the n'th perrin number using recursion.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/386", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n */\nint swapCount(string s) {\n}\n\n// The pseudo code of the above function:\n// Input: s: str\n// Output: count: int\n// 1: count <- 0\n// 2: open <- 0\n// 3: close <- 0\n// 4: imbalance <- 0\n// 5: for i in range(len(s)) do\n// 6:    if s[i] == \"[\" then\n// 7:        open += 1\n// 8:        if imbalance > 0 then\n// 9:            count += imbalance\n// 10:           imbalance -= 1\n// 11:    else if s[i] == \"]\" then\n// 12:       close += 1\n// 13:       imbalance <- close - open\n// 14: return count", "entry_point": "swapCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = swapCount(string(\"[]][][\"));\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = swapCount(string(\"[[][]]\"));\n    if (!(compare(x1, 0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = swapCount(string(\"[[][]]][\"));\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/387", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the hexadecimal number is even or odd.\n */\nstring evenOrOdd(string n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: str\n// Output: \"Even\" or \"Odd\"\n// 1: last_digit <- int(n[-1], 16)\n// 2: if last_digit % 2 == 0 then\n// 3:    return \"Even\"\n// 4: else\n// 5:    return \"Odd\"", "entry_point": "evenOrOdd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = evenOrOdd(string(\"AB3454D\"));\n    if (!(compare(x0, string(\"Odd\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = evenOrOdd(string(\"ABC\"));\n    if (!(compare(x1, string(\"Even\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = evenOrOdd(string(\"AAD\"));\n    if (!(compare(x2, string(\"Odd\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the hexadecimal number is even or odd.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/388", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the highest power of 2 that is less than or equal to n.\n */\nint highestPowerOf2(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: ans: int\n// 1: ans <- 1\n// 2: while ans*2 <= n do\n// 3:    ans <- ans*2\n// 4: return ans", "entry_point": "highestPowerOf2", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = highestPowerOf2(10);\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = highestPowerOf2(19);\n    if (!(compare(x1, 16))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = highestPowerOf2(32);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the highest power of 2 that is less than or equal to n.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/389", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th lucas number.\n */\nint findLucas(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: lucas_number: int\n// 1: if n == 0 then\n// 2:    return 2\n// 3: elif n == 1 then\n// 4:    return 1\n// 5: return findLucas(n-1) + findLucas(n-2)", "entry_point": "findLucas", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findLucas(9);\n    if (!(compare(x0, 76))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findLucas(4);\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findLucas(3);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the n'th lucas number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/391", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert more than one list to nested dictionary.\n */\nvector<unordered_map<string, unordered_map<string, int>>> convertListDictionary(vector<string> l1, vector<string> l2, vector<int> l3) {\n}\n\n// The pseudo code of the above function:\n// Input: l1: list of str, l2: list of str, l3: list of int\n// Output: res: list of dict\n// 1: res <- []\n// 2: for i in range(len(l1)) do\n// 3:    d1 <- {\"key1\": l1[i]}\n// 4:    d2 <- {\"key2\": l2[i]}\n// 5:    d3 <- {\"key3\": l3[i]}\n// 6:    res.append({**d1, **d2, **d3})\n// 7: return res", "entry_point": "convertListDictionary", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<unordered_map<string, unordered_map<string, int>>> x0 = convertListDictionary(vector<string>{string(\"S001\"), string(\"S002\"), string(\"S003\"), string(\"S004\")}, vector<string>{string(\"Adina Park\"), string(\"Leyton Marsh\"), string(\"Duncan Boyle\"), string(\"Saim Richards\")}, vector<int>{85, 98, 89, 92});\n    if (!(compare(x0, {{{string(\"S001\"), {{string(\"Adina Park\"), 85}}}}, {{string(\"S002\"), {{string(\"Leyton Marsh\"), 98}}}}, {{string(\"S003\"), {{string(\"Duncan Boyle\"), 89}}}}, {{string(\"S004\"), {{string(\"Saim Richards\"), 92}}}}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<unordered_map<string, unordered_map<string, int>>> x1 = convertListDictionary(vector<string>{string(\"abc\"), string(\"def\"), string(\"ghi\"), string(\"jkl\")}, vector<string>{string(\"python\"), string(\"program\"), string(\"language\"), string(\"programs\")}, vector<int>{100, 200, 300, 400});\n    if (!(compare(x1, {{{string(\"abc\"), {{string(\"python\"), 100}}}}, {{string(\"def\"), {{string(\"program\"), 200}}}}, {{string(\"ghi\"), {{string(\"language\"), 300}}}}, {{string(\"jkl\"), {{string(\"programs\"), 400}}}}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<unordered_map<string, unordered_map<string, int>>> x2 = convertListDictionary(vector<string>{string(\"A1\"), string(\"A2\"), string(\"A3\"), string(\"A4\")}, vector<string>{string(\"java\"), string(\"C\"), string(\"C++\"), string(\"DBMS\")}, vector<int>{10, 20, 30, 40});\n    if (!(compare(x2, {{{string(\"A1\"), {{string(\"java\"), 10}}}}, {{string(\"A2\"), {{string(\"C\"), 20}}}}, {{string(\"A3\"), {{string(\"C++\"), 30}}}}, {{string(\"A4\"), {{string(\"DBMS\"), 40}}}}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert more than one list to nested dictionary.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/392", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n */\nint getMaxSum(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: max_sum: int\n// 1: if n == 0 or n == 1 then\n// 2:    return n\n// 3: max_sum <- max((getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5)), n)\n// 4: return max_sum", "entry_point": "getMaxSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getMaxSum(60);\n    if (!(compare(x0, 106))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getMaxSum(10);\n    if (!(compare(x1, 12))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getMaxSum(2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/394", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if given tuple is distinct or not.\n */\nbool checkDistinct(vector<int> testTup) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup: list of integers\n// Output: True or False\n// 1: for i in range(len(test_tup)) do\n// 2:    for j in range(i+1, len(test_tup)) do\n// 3:        if test_tup[i] == test_tup[j] then\n// 4:            return False\n// 5: return True", "entry_point": "checkDistinct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkDistinct(vector<int>{1, 4, 5, 6, 1, 4});\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkDistinct(vector<int>{1, 4, 5, 6});\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkDistinct(vector<int>{2, 3, 4, 5, 6});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if given tuple is distinct or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/396", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given string starts and ends with the same character or not using regex.\n */\nstring checkChar(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: 'YES' or 'NO'\n// 1: if re.match(r'^(.).*\\1$', str) then\n// 2:    return 'YES'\n// 3: else then\n// 4:    return 'NO'", "entry_point": "checkChar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkChar(string(\"abba\"));\n    if (!(compare(x0, string(\"Valid\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkChar(string(\"a\"));\n    if (!(compare(x1, string(\"Valid\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkChar(string(\"abcd\"));\n    if (!(compare(x2, string(\"Invalid\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/397", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the median of three specific numbers.\n */\ndouble medianNumbers(int a, int b, int c) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, b: int, c: int\n// Output: median: float\n// 1: Create a list of the three numbers [a, b, c]\n// 2: Sort the list in ascending order\n// 3: If the length of the list is odd then\n// 4:    return the middle number of the sorted list\n// 5: Else if the length of the list is even then\n// 6:    return the average of the middle two numbers of the sorted list", "entry_point": "medianNumbers", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = medianNumbers(25, 55, 65);\n    if (!(compare(x0, 55.0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = medianNumbers(20, 10, 30);\n    if (!(compare(x1, 20.0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = medianNumbers(15, 45, 75);\n    if (!(compare(x2, 45.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the median of three specific numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/398", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\nint sumOfDigits(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of ints\n// Output: sum: int\n// 1: sum <- 0\n// 2: for each num in nums do\n// 3:    while num > 0 do\n// 4:        sum <- sum + (num % 10)\n// 5:        num <- num // 10\n// 6: return sum", "entry_point": "sumOfDigits", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumOfDigits(vector<int>{10, 2, 56});\n    if (!(compare(x0, 14))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x2 = sumOfDigits(vector<int>{10, 20, -4, 5, -70});\n    if (!(compare(x2, 19))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to compute the sum of digits of each number of a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/399", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n */\nvector<int> bitwiseXor(vector<int> testTup1, vector<int> testTup2) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup1: tuple of integers, test_tup2: tuple of integers\n// Output: result: list of integers\n// 1: result <- empty list\n// 2: for i in range(len(test_tup1)) do\n// 3:    result.append(test_tup1[i] ^ test_tup2[i])\n// 4: return result", "entry_point": "bitwiseXor", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = bitwiseXor(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3});\n    if (!(compare(x0, {15, 6, 5, 10}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = bitwiseXor(vector<int>{11, 5, 7, 10}, vector<int>{6, 3, 4, 4});\n    if (!(compare(x1, {13, 6, 3, 14}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = bitwiseXor(vector<int>{12, 6, 8, 11}, vector<int>{7, 4, 5, 6});\n    if (!(compare(x2, {11, 2, 13, 13}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/400", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the frequency of unique tuples in the given list order irrespective.\n */\nint extractFreq(vector<vector<int>> testList) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of tuples\n// Output: freq_dict: dictionary\n// 1: freq_dict <- {}\n// 2: for each t in test_list do\n// 3:    t_tuple <- tuple(t)\n// 4:    if t_tuple in freq_dict then\n// 5:        freq_dict[t_tuple] += 1\n// 6:    else:\n// 7:        freq_dict[t_tuple] <- 1\n// 8: return freq_dict", "entry_point": "extractFreq", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = extractFreq(vector<vector<int>>{{3, 4}, {1, 2}, {4, 3}, {5, 6}});\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = extractFreq(vector<vector<int>>{{4, 15}, {2, 3}, {5, 4}, {6, 7}});\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = extractFreq(vector<vector<int>>{{5, 16}, {2, 3}, {6, 5}, {6, 9}});\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/401", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n */\nvector<vector<int>> addNestedTuples(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup1: list of tuples, test_tup2: list of tuples\n// Output: res: list of tuples\n// 1: if len(test_tup1) != len(test_tup2) then\n// 2:    return None\n// 3: res <- []\n// 4: for i <- 0 to len(test_tup1) - 1 do\n// 5:    if len(test_tup1[i]) != len(test_tup2[i]) then\n// 6:        return None\n// 7:    temp <- []\n// 8:    for j <- 0 to len(test_tup1[i]) - 1 do\n// 9:        temp.append(test_tup1[i][j] + test_tup2[i][j])\n// 10:   res.append(temp)\n// 11: return res", "entry_point": "addNestedTuples", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = addNestedTuples(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}});\n    if (!(compare(x0, {{7, 10}, {7, 14}, {3, 10}, {8, 13}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = addNestedTuples(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}});\n    if (!(compare(x1, {{9, 12}, {9, 16}, {5, 12}, {10, 15}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = addNestedTuples(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}});\n    if (!(compare(x2, {{11, 14}, {11, 18}, {7, 14}, {12, 17}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/402", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute the value of ncr%p.\n */\nint ncrModp(int n, int r, int p) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int, r: int, p: int\n// Output: ans: int\n// 1: if r > n - r then\n// 2:    r <- n - r\n// 3: num, den, ans <- 1, 1, 1\n// 4: for i <- 1 to r do\n// 5:    num <- (num * (n - i + 1)) % p\n// 6:    den <- (den * i) % p\n// 7: ans <- (num * pow(den, p - 2, p)) % p\n// 8: return ans", "entry_point": "ncrModp", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = ncrModp(10, 2, 13);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = ncrModp(15, 12, 43);\n    if (!(compare(x1, 25))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = ncrModp(17, 9, 18);\n    if (!(compare(x2, 10))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to compute the value of ncr%p.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/403", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a url is valid or not using regex.\n */\nbool isValidUrl(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: True or False\n// 1: pattern <- regex for URL validation\n// 2: if regex_match(str, pattern) then\n// 3:    return True\n// 4: else\n// 5:    return False", "entry_point": "isValidUrl", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isValidUrl(string(\"https://www.google.com\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isValidUrl(string(\"https:/www.gmail.com\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isValidUrl(string(\"https:// www.redit.com\"));\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if a url is valid or not using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/404", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum of two numbers.\n */\nint minimum(int a, int b) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, b: int\n// Output: minimum: int\n// 1: if a < b then\n// 2:    return a\n// 3: else\n// 4:    return b", "entry_point": "minimum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minimum(1, 2);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minimum(-5, -4);\n    if (!(compare(x1, -5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minimum(0, 0);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the minimum of two numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/406", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the parity of a given number.\n */\nstring findParity(int x) {\n}\n\n// The pseudo code of the above function:\n// Input: x: int\n// Output: \"even\" or \"odd\"\n// 1: if x % 2 == 0 then\n// 2:    return \"even\"\n// 3: else\n// 4:    return \"odd\"", "entry_point": "findParity", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = findParity(12);\n    if (!(compare(x0, string(\"Even Parity\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = findParity(7);\n    if (!(compare(x1, string(\"Odd Parity\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = findParity(10);\n    if (!(compare(x2, string(\"Even Parity\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the parity of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/408", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n */\nvector<vector<int>> kSmallestPairs(vector<int> nums1, vector<int> nums2, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: nums1: list of int, nums2: list of int, k: int\n// Output: list of list of int\n// 1: heap <- []\n// 2: for i in nums1 do\n// 3:    for j in nums2 do\n// 4:        heappush(heap, [i+j, [i,j]])\n// 5: res <- []\n// 6: for i in range(min(k, len(heap))) do\n// 7:    res.append(heappop(heap)[1])\n// 8: return res", "entry_point": "kSmallestPairs", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = kSmallestPairs(vector<int>{1, 3, 7}, vector<int>{2, 4, 6}, 2);\n    if (!(compare(x0, {{1, 2}, {1, 4}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = kSmallestPairs(vector<int>{1, 3, 7}, vector<int>{2, 4, 6}, 1);\n    if (!(compare(x1, {{1, 2}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = kSmallestPairs(vector<int>{1, 3, 7}, vector<int>{2, 4, 6}, 7);\n    if (!(compare(x2, {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/409", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum product from the pairs of tuples within a given list.\n */\nint minProductTuple(vector<vector<int>> list1) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of tuples\n// Output: minProduct: int\n// 1: minProduct <- inf\n// 2: for i in range(len(list1)) do\n// 3:    for j in range(i+1, len(list1)) do\n// 4:        product <- list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n// 5:        if product < minProduct then\n// 6:            minProduct <- product\n// 7: return minProduct", "entry_point": "minProductTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minProductTuple(vector<vector<int>>{{2, 7}, {2, 6}, {1, 8}, {4, 9}});\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minProductTuple(vector<vector<int>>{{10, 20}, {15, 2}, {5, 10}});\n    if (!(compare(x1, 30))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minProductTuple(vector<vector<int>>{{11, 44}, {10, 15}, {20, 5}, {12, 9}});\n    if (!(compare(x2, 100))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the minimum product from the pairs of tuples within a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/411", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given snake case string to camel case string by using regex.\n */\nstring snakeToCamel(string word) {\n}\n\n// The pseudo code of the above function:\n// Input: word: str\n// Output: camel_case_word: str\n// 1: parts <- split(word, '_')\n// 2: camel_case_word <- parts[0]\n// 3: for i <- 1 to len(parts) - 1 do\n// 4:    camel_case_word <- camel_case_word + parts[i].capitalize()\n// 5: return camel_case_word", "entry_point": "snakeToCamel", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = snakeToCamel(string(\"android_tv\"));\n    if (!(compare(x0, string(\"AndroidTv\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = snakeToCamel(string(\"google_pixel\"));\n    if (!(compare(x1, string(\"GooglePixel\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = snakeToCamel(string(\"apple_watch\"));\n    if (!(compare(x2, string(\"AppleWatch\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert the given snake case string to camel case string by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/412", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove odd numbers from a given list.\n */\nvector<int> removeOdd(vector<int> l) {\n}\n\n// The pseudo code of the above function:\n// Input: l: list of integers\n// Output: res: list of integers\n// 1: res <- empty list\n// 2: for each num in l do\n// 3:    if num % 2 == 0 then\n// 4:        append num to res\n// 5: return res", "entry_point": "removeOdd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = removeOdd(vector<int>{1, 2, 3});\n    if (!(compare(x0, {2}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = removeOdd(vector<int>{2, 4, 6});\n    if (!(compare(x1, {2, 4, 6}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = removeOdd(vector<int>{10, 20, 3});\n    if (!(compare(x2, {10, 20}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to remove odd numbers from a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/414", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the value exists in a sequence or not.\n */\nbool overlapping(vector<int> list1, vector<int> list2) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of integers, list2: list of integers\n// Output: True or False\n// 1: for i in list1 do\n// 2:    if i in list2 then\n// 3:        return True\n// 4: return False", "entry_point": "overlapping", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = overlapping(vector<int>{1, 2, 3, 4, 5}, vector<int>{6, 7, 8, 9});\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = overlapping(vector<int>{1, 2, 3}, vector<int>{4, 5, 6});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = overlapping(vector<int>{1, 4, 5}, vector<int>{1, 4, 5});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the value exists in a sequence or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/415", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find a pair with highest product from a given array of integers.\n */\nvector<int> maxProduct(vector<int> arr) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers\n// Output: res: list of integers\n// 1: sort arr in descending order\n// 2: if arr[0] >= 0 or len(arr) == 2 then\n// 3:    return [arr[0], arr[1]]\n// 4: if arr[len(arr)-1] >= 0 then\n// 5:    return [arr[len(arr)-1], arr[len(arr)-2]]\n// 6: res <- []\n// 7: if arr[0]*arr[1] > arr[len(arr)-2]*arr[len(arr)-3] then\n// 8:    res <- [arr[0], arr[1]]\n// 9: else\n// 10:   res <- [arr[len(arr)-3], arr[len(arr)-2]]\n// 11: return res", "entry_point": "maxProduct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = maxProduct(vector<int>{1, 2, 3, 4, 7, 0, 8, 4});\n    if (!(compare(x0, {7, 8}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = maxProduct(vector<int>{0, -1, -2, -4, 5, 0, -6});\n    if (!(compare(x1, {-4, -6}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = maxProduct(vector<int>{1, 2, 3});\n    if (!(compare(x2, {2, 3}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find a pair with highest product from a given array of integers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/416", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n */\nint breaksum(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: max_sum: int\n// 1: if n == 0 then\n// 2:    return 0\n// 3: max_sum <- -inf\n// 4: for i <- 1 to n do\n// 5:    for j <- i+1 to n do\n// 6:        for k <- j+1 to n do\n// 7:            curr_sum <- i+j+k+breaksum(n-k)\n// 8:            if curr_sum > max_sum then\n// 9:                max_sum <- curr_sum\n// 10: return max_sum", "entry_point": "breaksum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = breaksum(12);\n    if (!(compare(x0, 13))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = breaksum(24);\n    if (!(compare(x1, 27))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = breaksum(23);\n    if (!(compare(x2, 23))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/417", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find common first element in given list of tuple.\n */\nvector<vector<string>> groupTuples(vector<vector<string>> input) {\n}\n\n// The pseudo code of the above function:\n// Input: input: list of tuples\n// Output: list of lists\n// 1: group_dict <- {}\n// 2: for each tup in input do\n// 3:    if tup[0] in group_dict then\n// 4:        group_dict[tup[0]].append(tup)\n// 5:    else:\n// 6:        group_dict[tup[0]] <- [tup]\n// 7: return [v for k, v in group_dict.items()]", "entry_point": "groupTuples", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<string>> x0 = groupTuples(vector<vector<string>>{{string(\"x\"), string(\"y\")}, {string(\"x\"), string(\"z\")}, {string(\"w\"), string(\"t\")}});\n    if (!(compare(x0, {{string(\"x\"), string(\"y\"), string(\"z\")}, {string(\"w\"), string(\"t\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<string>> x1 = groupTuples(vector<vector<string>>{{string(\"a\"), string(\"b\")}, {string(\"a\"), string(\"c\")}, {string(\"d\"), string(\"e\")}});\n    if (!(compare(x1, {{string(\"a\"), string(\"b\"), string(\"c\")}, {string(\"d\"), string(\"e\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<string>> x2 = groupTuples(vector<vector<string>>{{string(\"f\"), string(\"g\")}, {string(\"f\"), string(\"g\")}, {string(\"h\"), string(\"i\")}});\n    if (!(compare(x2, {{string(\"f\"), string(\"g\"), string(\"g\")}, {string(\"h\"), string(\"i\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find common first element in given list of tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/419", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */\nint roundAndSum(vector<double> list1) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of double\n// Output: sum_rounded: int\n// 1: sum <- 0\n// 2: for each num in list1 do\n// 3:    sum <- sum + round(num)\n// 4: sum_rounded <- sum * len(list1)\n// 5: return sum_rounded", "entry_point": "roundAndSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = roundAndSum(vector<double>{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5});\n    if (!(compare(x0, 243))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x2 = roundAndSum(vector<double>{25.0, 56.7, 89.2});\n    if (!(compare(x2, 513))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/420", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the cube sum of first n even natural numbers.\n */\nint cubeSum(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for i <- 1 to n do\n// 3:    sum <- sum + (2*i)^3\n// 4: return sum", "entry_point": "cubeSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = cubeSum(2);\n    if (!(compare(x0, 72))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = cubeSum(3);\n    if (!(compare(x1, 288))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = cubeSum(4);\n    if (!(compare(x2, 800))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the cube sum of first n even natural numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/423", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to solve gold mine problem.\n */\nint getMaxgold(vector<vector<int>> gold, int m, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: gold: 2D array, m: int, n: int\n// Output: max_gold: int\n// 1: for j <- 1 to n-1 do\n// 2:    for i <- 0 to m-1 do\n// 3:        if i == 0 then\n// 4:            gold[i][j] += max(gold[i][j-1], gold[i+1][j-1])\n// 5:        else if i == m-1 then\n// 6:            gold[i][j] += max(gold[i][j-1], gold[i-1][j-1])\n// 7:        else\n// 8:            gold[i][j] += max(gold[i][j-1], max(gold[i-1][j-1], gold[i+1][j-1]))\n// 9: max_gold <- -inf\n// 10: for i <- 0 to m-1 do\n// 11:    max_gold = max(max_gold, gold[i][n-1])\n// 12: return max_gold", "entry_point": "getMaxgold", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getMaxgold(vector<vector<int>>{{1, 3, 1, 5}, {2, 2, 4, 1}, {5, 0, 2, 3}, {0, 6, 1, 2}}, 4, 4);\n    if (!(compare(x0, 16))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getMaxgold(vector<vector<int>>{{10, 20}, {30, 40}}, 2, 2);\n    if (!(compare(x1, 70))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getMaxgold(vector<vector<int>>{{4, 9}, {3, 7}}, 2, 2);\n    if (!(compare(x2, 13))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to solve gold mine problem.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/424", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract only the rear index element of each string in the given tuple.\n */\nvector<string> extractRear(vector<string> testTuple) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tuple: list of str\n// Output: res: list of str\n// 1: res <- empty list\n// 2: for each s in test_tuple do\n// 3:    res.append(s[-1])\n// 4: return res", "entry_point": "extractRear", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = extractRear(vector<string>{string(\"Mers\"), string(\"for\"), string(\"Vers\")});\n    if (!(compare(x0, {string(\"s\"), string(\"r\"), string(\"s\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = extractRear(vector<string>{string(\"Avenge\"), string(\"for\"), string(\"People\")});\n    if (!(compare(x1, {string(\"e\"), string(\"r\"), string(\"e\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = extractRear(vector<string>{string(\"Gotta\"), string(\"get\"), string(\"go\")});\n    if (!(compare(x2, {string(\"a\"), string(\"t\"), string(\"o\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract only the rear index element of each string in the given tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/426", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter odd numbers using lambda function.\n */\nvector<int> filterOddnumbers(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of int\n// Output: odd_nums: list of int\n// 1: odd_nums <- filter(lambda x: x%2 != 0, nums)\n// 2: return odd_nums", "entry_point": "filterOddnumbers", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = filterOddnumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    if (!(compare(x0, {1, 3, 5, 7, 9}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = filterOddnumbers(vector<int>{10, 20, 45, 67, 84, 93});\n    if (!(compare(x1, {45, 67, 93}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = filterOddnumbers(vector<int>{5, 7, 9, 8, 6, 4, 3});\n    if (!(compare(x2, {5, 7, 9, 3}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to filter odd numbers using lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/427", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n */\nstring changeDateFormat(string dt) {\n}\n\n// The pseudo code of the above function:\n// Input: dt: str\n// Output: new_dt: str\n// 1: pattern <- regex for yyyy-mm-dd format\n// 2: if pattern matches dt then\n// 3:    extract year, month and day from dt\n// 4:    new_dt <- day + \"-\" + month + \"-\" + year\n// 5:    return new_dt\n// 6: else\n// 7:    return \"Invalid date format\"", "entry_point": "changeDateFormat", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = changeDateFormat(string(\"2026-01-02\"));\n    if (!(compare(x0, string(\"02-01-2026\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = changeDateFormat(string(\"2020-11-13\"));\n    if (!(compare(x1, string(\"13-11-2020\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = changeDateFormat(string(\"2021-04-26\"));\n    if (!(compare(x2, string(\"26-04-2021\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/428", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using shell sort.\n */\nvector<int> shellSort(vector<int> myList) {\n}\n\n// The pseudo code of the above function:\n// Input: myList: list of int\n// Output: sortedList: list of int\n// 1: n <- len(myList)\n// 2: gap <- n/2\n// 3: while gap > 0 do\n// 4:    for i <- gap to n-1 do\n// 5:        temp <- myList[i]\n// 6:        j <- i\n// 7:        while j >= gap and myList[j-gap] > temp do\n// 8:            myList[j] <- myList[j-gap]\n// 9:            j <- j - gap\n// 10:       myList[j] <- temp\n// 11:   gap <- gap/2\n// 12: return myList", "entry_point": "shellSort", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = shellSort(vector<int>{12, 23, 4, 5, 3, 2, 12, 81, 56, 95});\n    if (!(compare(x0, {2, 3, 4, 5, 12, 12, 23, 56, 81, 95}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = shellSort(vector<int>{24, 22, 39, 34, 87, 73, 68});\n    if (!(compare(x1, {22, 24, 34, 39, 68, 73, 87}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = shellSort(vector<int>{32, 30, 16, 96, 82, 83, 74});\n    if (!(compare(x2, {16, 30, 32, 74, 82, 83, 96}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort the given array by using shell sort.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/429", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the elementwise and tuples from the given two tuples.\n */\nvector<int> andTuples(vector<int> testTup1, vector<int> testTup2) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup1: tuple, test_tup2: tuple\n// Output: result: tuple\n// 1: n <- len(test_tup1)\n// 2: m <- len(test_tup2)\n// 3: result <- []\n// 4: if n != m then\n// 5:    return None\n// 6: for i <- 0 to n-1 do\n// 7:    result.append(test_tup1[i] & test_tup2[i])\n// 8: return result", "entry_point": "andTuples", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = andTuples(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3});\n    if (!(compare(x0, {0, 0, 2, 1}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = andTuples(vector<int>{1, 2, 3, 4}, vector<int>{5, 6, 7, 8});\n    if (!(compare(x1, {1, 2, 3, 0}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = andTuples(vector<int>{8, 9, 11, 12}, vector<int>{7, 13, 14, 17});\n    if (!(compare(x2, {0, 9, 10, 0}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract the elementwise and tuples from the given two tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/430", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the directrix of a parabola.\n */\nint parabolaDirectrix(int a, int b, int c) {\n}\n\n// The pseudo code of the above function:\n// Input: a, b, c: int\n// Output: directrix: int\n// 1: if a == 0 then\n// 2:    return \"Not a parabola\"\n// 3: directrix <- (4*a*c - b*b)/(4*a)\n// 4: return directrix", "entry_point": "parabolaDirectrix", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = parabolaDirectrix(5, 3, 2);\n    if (!(compare(x0, -198))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = parabolaDirectrix(9, 8, 4);\n    if (!(compare(x1, -2336))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = parabolaDirectrix(2, 4, 6);\n    if (!(compare(x2, -130))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the directrix of a parabola.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/433", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the entered number is greater than the elements of the given array.\n */\nstring checkGreater(vector<int> arr, int number) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of ints, number: int\n// Output: \"YES\" or \"NO\"\n// 1: for element in arr do\n// 2:    if element >= number then\n// 3:        return \"NO\"\n// 4: return \"YES\"", "entry_point": "checkGreater", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkGreater(vector<int>{1, 2, 3, 4, 5}, 4);\n    if (!(compare(x0, string(\"No, entered number is less than those in the array\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkGreater(vector<int>{2, 3, 4, 5, 6}, 8);\n    if (!(compare(x1, string(\"Yes, the entered number is greater than those in the array\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkGreater(vector<int>{9, 7, 4, 8, 6, 1}, 11);\n    if (!(compare(x2, string(\"Yes, the entered number is greater than those in the array\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether the entered number is greater than the elements of the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/434", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\nstring textMatchOne(string text) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: match: str or None\n// 1: match <- regex search for pattern \"ab+\"\n// 2: if match is not None then\n// 3:    return match.group()\n// 4: else:\n// 5:    return None", "entry_point": "textMatchOne", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatchOne(string(\"ac\"));\n    if (!(compare(x0, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatchOne(string(\"dc\"));\n    if (!(compare(x1, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatchOne(string(\"abba\"));\n    if (!(compare(x2, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function that matches a string that has an a followed by one or more b's.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/435", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last digit of a given number.\n */\nint lastDigit(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: last_digit: int\n// 1: last_digit <- n % 10\n// 2: return last_digit", "entry_point": "lastDigit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = lastDigit(123);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = lastDigit(25);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = lastDigit(30);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the last digit of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/436", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to print negative numbers in a list.\n */\nvector<int> negNos(vector<int> list1) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of integers\n// Output: result: list of integers\n// 1: result <- empty list\n// 2: for i in list1 do\n// 3:    if i < 0 then\n// 4:        result.append(i)\n// 5: return result", "entry_point": "negNos", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = negNos(vector<int>{-1, 4, 5, -6});\n    if (!(compare(x0, {-1, -6}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = negNos(vector<int>{-1, -2, 3, 4});\n    if (!(compare(x1, {-1, -2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = negNos(vector<int>{-7, -6, 8, 9});\n    if (!(compare(x2, {-7, -6}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to print negative numbers in a list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/437", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove odd characters in a string.\n */\nstring removeOdd(string str1) {\n}\n\n// The pseudo code of the above function:\n// Input: str1: str\n// Output: str2: str\n// 1: str2 <- \"\"\n// 2: for i in range(len(str1)) do\n// 3:    if i % 2 == 0 then\n// 4:        str2 += str1[i]\n// 5: return str2", "entry_point": "removeOdd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeOdd(string(\"python\"));\n    if (!(compare(x0, string(\"yhn\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeOdd(string(\"program\"));\n    if (!(compare(x1, string(\"rga\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeOdd(string(\"language\"));\n    if (!(compare(x2, string(\"agae\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove odd characters in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/438", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count bidirectional tuple pairs.\n */\nstring countBidirectional(vector<vector<int>> testList) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of tuples\n// Output: count: str\n// 1: count <- 0\n// 2: for i in range(len(test_list)) do\n// 3:    for j in range(i+1, len(test_list)) do\n// 4:        if test_list[i] == test_list[j][::-1] then\n// 5:            count += 1\n// 6: return str(count)", "entry_point": "countBidirectional", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = countBidirectional(vector<vector<int>>{{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}});\n    if (!(compare(x0, string(\"3\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = countBidirectional(vector<vector<int>>{{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}});\n    if (!(compare(x1, string(\"2\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = countBidirectional(vector<vector<int>>{{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}});\n    if (!(compare(x2, string(\"4\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count bidirectional tuple pairs.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/439", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a list of multiple integers into a single integer.\n */\nint multipleToSingle(vector<int> l) {\n}\n\n// The pseudo code of the above function:\n// Input: l: list of int\n// Output: res: int\n// 1: res <- 0\n// 2: for each num in l do\n// 3:    res <- res*10 + num\n// 4: return res", "entry_point": "multipleToSingle", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = multipleToSingle(vector<int>{11, 33, 50});\n    if (!(compare(x0, 113350))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = multipleToSingle(vector<int>{-1, 2, 3, 4, 5, 6});\n    if (!(compare(x1, -123456))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = multipleToSingle(vector<int>{10, 15, 20, 25});\n    if (!(compare(x2, 10152025))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert a list of multiple integers into a single integer.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/441", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cube.\n */\nint surfaceareaCube(int l) {\n}\n\n// The pseudo code of the above function:\n// Input: l: int (length of a side of the cube)\n// Output: surface_area: int\n// 1: surface_area <- 6 * l * l\n// 2: return surface_area", "entry_point": "surfaceareaCube", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = surfaceareaCube(5);\n    if (!(compare(x0, 150))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = surfaceareaCube(3);\n    if (!(compare(x1, 54))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = surfaceareaCube(10);\n    if (!(compare(x2, 600))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the surface area of a cube.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/442", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ration of positive numbers in an array of integers.\n */\ndouble positiveCount(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of int\n// Output: ratio: float\n// 1: pos_count <- 0\n// 2: total_count <- len(nums)\n// 3: for each num in nums do\n// 4:    if num > 0 then\n// 5:        pos_count += 1\n// 6: ratio <- pos_count / total_count\n// 7: return ratio", "entry_point": "positiveCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = positiveCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8});\n    if (!(compare(x0, 0.54))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = positiveCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8});\n    if (!(compare(x1, 0.69))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = positiveCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17});\n    if (!(compare(x2, 0.56))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the ration of positive numbers in an array of integers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/443", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest negative number from the given list.\n */\nint largestNeg(vector<int> list1) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of int\n// Output: max_neg: int\n// 1: max_neg <- -inf\n// 2: for each num in list1 do\n// 3:    if num < 0 and num > max_neg then\n// 4:        max_neg <- num\n// 5: return max_neg", "entry_point": "largestNeg", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = largestNeg(vector<int>{1, 2, 3, -4, -6});\n    if (!(compare(x0, -6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = largestNeg(vector<int>{1, 2, 3, -8, -9});\n    if (!(compare(x1, -9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = largestNeg(vector<int>{1, 2, 3, 4, -1});\n    if (!(compare(x2, -1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the largest negative number from the given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/444", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to trim each tuple by k in the given tuple list.\n */\nstring trimTuple(vector<vector<int>> testList, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list: list of tuples, k: int\n// Output: trimmed_test_list: list of tuples\n// 1: trimmed_test_list <- []\n// 2: for each t in test_list do\n// 3:    trimmed_tuple <- []\n// 4:    for i in range(len(t)) do\n// 5:        if i < k or i >= len(t)-k then\n// 6:            trimmed_tuple.append(t[i])\n// 7:    trimmed_test_list.append(trimmed_tuple)\n// 8: return trimmed_test_list", "entry_point": "trimTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = trimTuple(vector<vector<int>>{{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 2);\n    if (!(compare(x0, string(\"[(2,), (9,), (2,), (2,)]\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = trimTuple(vector<vector<int>>{{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 1);\n    if (!(compare(x1, string(\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = trimTuple(vector<vector<int>>{{7, 8, 4, 9}, {11, 8, 12, 4}, {4, 1, 7, 8}, {3, 6, 9, 7}}, 1);\n    if (!(compare(x2, string(\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to trim each tuple by k in the given tuple list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/445", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n */\nvector<vector<int>> indexMultiplication(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup1: list of tuples, test_tup2: list of tuples\n// Output: res: list of tuples\n// 1: res <- []\n// 2: for i <- 0 to len(test_tup1) - 1 do\n// 3:    temp <- []\n// 4:    for j <- 0 to len(test_tup1[i]) - 1 do\n// 5:        temp.append(test_tup1[i][j] * test_tup2[i][j])\n// 6:    res.append(temp)\n// 7: return res", "entry_point": "indexMultiplication", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = indexMultiplication(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}});\n    if (!(compare(x0, {{6, 21}, {12, 45}, {2, 9}, {7, 30}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = indexMultiplication(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}});\n    if (!(compare(x1, {{14, 32}, {20, 60}, {6, 20}, {16, 44}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = indexMultiplication(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}});\n    if (!(compare(x2, {{24, 45}, {30, 77}, {12, 33}, {27, 60}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/447", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find cubes of individual elements in a list using lambda function.\n */\nvector<int> cubeNums(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of integers\n// Output: cubes: list of integers\n// 1: define a lambda function to cube a number: cube = lambda x: x**3\n// 2: cubes <- empty list\n// 3: for each num in nums do\n// 4:    cube_num <- cube(num)\n// 5:    cubes.append(cube_num)\n// 6: return cubes", "entry_point": "cubeNums", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = cubeNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    if (!(compare(x0, {1, 8, 27, 64, 125, 216, 343, 512, 729, 1000}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = cubeNums(vector<int>{10, 20, 30});\n    if (!(compare(x1, {1000, 8000, 27000}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = cubeNums(vector<int>{12, 15});\n    if (!(compare(x2, {1728, 3375}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find cubes of individual elements in a list using lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/448", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of perrin numbers.\n */\nint calSum(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: sum: int\n// 1: if n < 3 then\n// 2:    return 0\n// 3: perrin <- [3, 0, 2]\n// 4: sum <- 2\n// 5: for i <- 3 to n do\n// 6:    perrin[i % 3] <- perrin[(i-2) % 3] + perrin[(i-3) % 3]\n// 7:    sum <- sum + perrin[i % 3]\n// 8: return sum", "entry_point": "calSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = calSum(9);\n    if (!(compare(x0, 49))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = calSum(10);\n    if (!(compare(x1, 66))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = calSum(11);\n    if (!(compare(x2, 88))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the sum of perrin numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/449", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the triangle is valid or not if 3 points are given.\n */\nstring checkTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n}\n\n// The pseudo code of the above function:\n// Input: x1, y1, x2, y2, x3, y3: int\n// Output: \"Valid\" or \"Invalid\"\n// 1: d1 <- sqrt((x2-x1)^2 + (y2-y1)^2)\n// 2: d2 <- sqrt((x3-x2)^2 + (y3-y2)^2)\n// 3: d3 <- sqrt((x3-x1)^2 + (y3-y1)^2)\n// 4: if (d1 + d2 > d3) and (d1 + d3 > d2) and (d2 + d3 > d1) then\n// 5:    return \"Valid\"\n// 6: else\n// 7:    return \"Invalid\"", "entry_point": "checkTriangle", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkTriangle(1, 5, 2, 5, 4, 6);\n    if (!(compare(x0, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkTriangle(1, 1, 1, 4, 1, 5);\n    if (!(compare(x1, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkTriangle(1, 1, 1, 1, 1, 1);\n    if (!(compare(x2, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the triangle is valid or not if 3 points are given.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/450", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract specified size of strings from a give list of string values.\n */\nvector<string> extractString(vector<string> str, int l) {\n}\n\n// The pseudo code of the above function:\n// Input: str_list: list of strings, l: int\n// Output: new_list: list of strings\n// 1: new_list <- []\n// 2: for s in str_list do\n// 3:    if len(s) == l then\n// 4:        new_list.append(s)\n// 5: return new_list", "entry_point": "extractString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 8);\n    if (!(compare(x0, {string(\"practice\"), string(\"solution\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 6);\n    if (!(compare(x1, {string(\"Python\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 9);\n    if (!(compare(x2, {string(\"exercises\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract specified size of strings from a give list of string values.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/451", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all whitespaces from the given string using regex.\n */\nstring removeWhitespaces(string text1) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: str\n// 1: pattern <- regex for whitespace\n// 2: replace the pattern with empty string in text\n// 3: return the modified text", "entry_point": "removeWhitespaces", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeWhitespaces(string(\" Google    Flutter \"));\n    if (!(compare(x0, string(\"GoogleFlutter\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeWhitespaces(string(\" Google    Dart \"));\n    if (!(compare(x1, string(\"GoogleDart\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeWhitespaces(string(\" iOS    Swift \"));\n    if (!(compare(x2, string(\"iOSSwift\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove all whitespaces from the given string using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/453", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of even factors of a number.\n */\nint sumoffactors(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for i <- 1 to n do\n// 3:    if n % i == 0 and i % 2 == 0 then\n// 4:        sum <- sum + i\n// 5: return sum", "entry_point": "sumoffactors", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumoffactors(18);\n    if (!(compare(x0, 26))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumoffactors(30);\n    if (!(compare(x1, 48))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumoffactors(6);\n    if (!(compare(x2, 8))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of even factors of a number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/454", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word containing 'z'.\n */\nstring textMatchWordz(string text) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: word: str\n// 1: words <- split text into a list of words\n// 2: for each word in words do\n// 3:    if 'z' in word then\n// 4:        return word\n// 5: return None", "entry_point": "textMatchWordz", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatchWordz(string(\"pythonz.\"));\n    if (!(compare(x0, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatchWordz(string(\"xyz.\"));\n    if (!(compare(x1, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatchWordz(string(\"  lang  .\"));\n    if (!(compare(x2, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function that matches a word containing 'z'.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/455", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month number contains 31 days or not.\n */\nbool checkMonthnumbNumber(int monthnum2) {\n}\n\n// The pseudo code of the above function:\n// Input: monthnum2: int\n// Output: True or False\n// 1: if monthnum2 in {1, 3, 5, 7, 8, 10, 12} then\n// 2:    return True\n// 3: else if monthnum2 in {4, 6, 9, 11} then\n// 4:    return False\n// 5: else\n// 6:    raise ValueError(\"Invalid month number\")", "entry_point": "checkMonthnumbNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkMonthnumbNumber(5);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkMonthnumbNumber(2);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkMonthnumbNumber(6);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether the given month number contains 31 days or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/456", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to reverse strings in a given list of string values.\n */\nvector<string> reverseStringList(vector<string> stringlist) {\n}\n\n// The pseudo code of the above function:\n// Input: string_list: list of str\n// Output: reversed_list: list of str\n// 1: reversed_list <- empty list\n// 2: for each str in string_list do\n// 3:    reversed_list.append(str[::-1])\n// 4: return reversed_list", "entry_point": "reverseStringList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = reverseStringList(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\"), string(\"White\"), string(\"Black\")});\n    if (!(compare(x0, {string(\"deR\"), string(\"neerG\"), string(\"eulB\"), string(\"etihW\"), string(\"kcalB\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = reverseStringList(vector<string>{string(\"john\"), string(\"amal\"), string(\"joel\"), string(\"george\")});\n    if (!(compare(x1, {string(\"nhoj\"), string(\"lama\"), string(\"leoj\"), string(\"egroeg\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = reverseStringList(vector<string>{string(\"jack\"), string(\"john\"), string(\"mary\")});\n    if (!(compare(x2, {string(\"kcaj\"), string(\"nhoj\"), string(\"yram\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to reverse strings in a given list of string values.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/458", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a rectangle.\n */\nint rectangleArea(int l, int b) {\n}\n\n// The pseudo code of the above function:\n// Input: l: int, b: int\n// Output: area: int\n// 1: area <- l * b\n// 2: return area", "entry_point": "rectangleArea", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = rectangleArea(10, 20);\n    if (!(compare(x0, 200))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = rectangleArea(10, 5);\n    if (!(compare(x1, 50))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = rectangleArea(4, 2);\n    if (!(compare(x2, 8))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the area of a rectangle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/459", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove uppercase substrings from a given string by using regex.\n */\nstring removeUppercase(string str1) {\n}\n\n// The pseudo code of the above function:\n// Input: str1: str\n// Output: str2: str\n// 1: import re\n// 2: pattern <- r'[A-Z]+'\n// 3: str2 <- re.sub(pattern, '', str1)\n// 4: return str2", "entry_point": "removeUppercase", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeUppercase(string(\"cAstyoUrFavoRitETVshoWs\"));\n    if (!(compare(x0, string(\"cstyoravoitshos\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeUppercase(string(\"wAtchTheinTernEtrAdIo\"));\n    if (!(compare(x1, string(\"wtchheinerntrdo\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeUppercase(string(\"VoicESeaRchAndreComMendaTionS\"));\n    if (!(compare(x2, string(\"oiceachndreomendaion\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove uppercase substrings from a given string by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/460", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to get the first element of each sublist.\n */\nvector<int> extract(vector<vector<int>> lst) {\n}\n\n// The pseudo code of the above function:\n// Input: lst: list of lists\n// Output: res: list\n// 1: res <- []\n// 2: for sub_lst in lst do\n// 3:    res.append(sub_lst[0])\n// 4: return res", "entry_point": "extract", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = extract(vector<vector<int>>{{1, 2}, {3, 4, 5}, {6, 7, 8, 9}});\n    if (!(compare(x0, {1, 3, 6}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = extract(vector<vector<int>>{{1, 2, 3}, {4, 5}});\n    if (!(compare(x1, {1, 4}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = extract(vector<vector<int>>{{9, 8, 1}, {1, 2}});\n    if (!(compare(x2, {9, 1}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to get the first element of each sublist.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/461", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the upper case characters in a given string.\n */\nint upperCtr(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: count: int\n// 1: count <- 0\n// 2: for c in str do\n// 3:    if c.isupper() then\n// 4:        count <- count + 1\n// 5: return count", "entry_point": "upperCtr", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = upperCtr(string(\"PYthon\"));\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = upperCtr(string(\"BigData\"));\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = upperCtr(string(\"program\"));\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the upper case characters in a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/463", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product subarray of the given array.\n */\nint maxSubarrayProduct(vector<int> arr) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers\n// Output: max_product: int\n// 1: max_product <- arr[0]\n// 2: max_so_far <- arr[0]\n// 3: min_so_far <- arr[0]\n// 4: for i <- 1 to len(arr)-1 do\n// 5:    if arr[i] < 0 then\n// 6:        swap(max_so_far, min_so_far)\n// 7:    max_so_far <- max(arr[i], max_so_far * arr[i])\n// 8:    min_so_far <- min(arr[i], min_so_far * arr[i])\n// 9:    max_product <- max(max_product, max_so_far)\n// 10: return max_product", "entry_point": "maxSubarrayProduct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSubarrayProduct(vector<int>{1, -2, -3, 0, 7, -8, -2});\n    if (!(compare(x0, 112))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSubarrayProduct(vector<int>{6, -3, -10, 0, 2});\n    if (!(compare(x1, 180))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSubarrayProduct(vector<int>{-2, -40, 0, -2, -3});\n    if (!(compare(x2, 80))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum product subarray of the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/464", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if all values are same in a dictionary.\n */\nbool checkValue(unordered_map<string, int> dict, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: dict: unordered_map, n: int\n// Output: True or False\n// 1: value <- dict.values()[0]\n// 2: for v in dict.values() do\n// 3:    if v != value then\n// 4:        return False\n// 5: return True", "entry_point": "checkValue", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 10);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 12);\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 5);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if all values are same in a dictionary.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/466", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the peak element in the given array.\n */\nint findPeak(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, n: int\n// Output: peak element: int\n// 1: if n == 1 then\n// 2:    return arr[0]\n// 3: if arr[0] >= arr[1] then\n// 4:    return arr[0]\n// 5: if arr[n-1] >= arr[n-2] then\n// 6:    return arr[n-1]\n// 7: for i in range(1, n-1) do\n// 8:    if arr[i] >= arr[i-1] and arr[i] >= arr[i+1] then\n// 9:        return arr[i]", "entry_point": "findPeak", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findPeak(vector<int>{1, 3, 20, 4, 1, 0}, 6);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findPeak(vector<int>{2, 3, 4, 5, 6}, 5);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findPeak(vector<int>{8, 9, 11, 12, 14, 15}, 6);\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the peak element in the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/467", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert decimal number to octal number.\n */\nint decimalToOctal(int decinum) {\n}\n\n// The pseudo code of the above function:\n// Input: decinum: int\n// Output: octalnum: int\n// 1: octalnum <- 0\n// 2: multiplier <- 1\n// 3: while decinum != 0 do\n// 4:    remainder <- decinum % 8\n// 5:    octalnum <- octalnum + remainder * multiplier\n// 6:    decinum <- decinum / 8\n// 7:    multiplier <- multiplier * 10\n// 8: return octalnum", "entry_point": "decimalToOctal", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = decimalToOctal(10);\n    if (!(compare(x0, 12))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = decimalToOctal(2);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = decimalToOctal(33);\n    if (!(compare(x2, 41))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to convert decimal number to octal number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/468", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n */\nint maxProduct(vector<int> arr, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, n: int\n// Output: max_product: int\n// 1: dp <- list of size n with all values initialized to 1\n// 2: for i <- 1 to n-1 do\n// 3:    for j <- 0 to i-1 do\n// 4:        if arr[i] > arr[j] then\n// 5:            dp[i] = max(dp[i], dp[j]+1)\n// 6: max_product <- -inf\n// 7: for i <- 0 to n-1 do\n// 8:    max_product = max(max_product, dp[i]*arr[i])\n// 9: return max_product", "entry_point": "maxProduct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxProduct(vector<int>{3, 100, 4, 5, 150, 6}, 6);\n    if (!(compare(x0, 45000))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxProduct(vector<int>{4, 42, 55, 68, 80}, 5);\n    if (!(compare(x1, 50265600))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxProduct(vector<int>{10, 22, 9, 33, 21, 50, 41, 60}, 8);\n    if (!(compare(x2, 21780000))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/469", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum profit earned from a maximum of k stock transactions\n */\nint maxProfit(vector<int> price, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: price: list of int, k: int\n// Output: max_profit: int\n// 1: n <- len(price)\n// 2: if k >= n/2 then\n// 3:    max_profit <- 0\n// 4:    for i in range(1, n) do\n// 5:        if price[i] > price[i-1] then\n// 6:            max_profit += price[i] - price[i-1]\n// 7: else then\n// 8:    dp <- [[0 for j in range(n)] for i in range(k+1)]\n// 9:    for i in range(1, k+1) do\n// 10:       max_diff <- -price[0]\n// 11:       for j in range(1, n) do\n// 12:           dp[i][j] <- max(dp[i][j-1], price[j] + max_diff)\n// 13:           max_diff <- max(max_diff, dp[i-1][j] - price[j])\n// 14:    max_profit <- dp[k][n-1]\n// 15: return max_profit", "entry_point": "maxProfit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxProfit(vector<int>{1, 5, 2, 3, 7, 6, 4, 5}, 3);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxProfit(vector<int>{2, 4, 7, 5, 4, 3, 5}, 2);\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxProfit(vector<int>{10, 6, 8, 4, 2}, 2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/470", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the pairwise addition of the elements of the given tuples.\n */\nvector<int> addPairwise(vector<int> testTup) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup: tuple of integers\n// Output: res: list of integers\n// 1: res <- []\n// 2: for i <- 0 to len(test_tup) - 2 do\n// 3:    res.append(test_tup[i] + test_tup[i+1])\n// 4: return res", "entry_point": "addPairwise", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = addPairwise(vector<int>{1, 5, 7, 8, 10});\n    if (!(compare(x0, {6, 12, 15, 18}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = addPairwise(vector<int>{2, 6, 8, 9, 11});\n    if (!(compare(x1, {8, 14, 17, 20}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = addPairwise(vector<int>{3, 7, 9, 10, 12});\n    if (!(compare(x2, {10, 16, 19, 22}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the pairwise addition of the elements of the given tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/471", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find remainder of array multiplication divided by n.\n */\nint findRemainder(vector<int> arr, int lens, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of integers, lens: int, n: int\n// Output: remainder: int\n// 1: prod <- 1\n// 2: for i <- 0 to lens-1 do\n// 3:    prod <- (prod * arr[i]) % n\n// 4: remainder <- prod % n\n// 5: return remainder", "entry_point": "findRemainder", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findRemainder(vector<int>{100, 10, 5, 25, 35, 14}, 6, 11);\n    if (!(compare(x0, 9))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findRemainder(vector<int>{1, 1, 1}, 3, 1);\n    if (!(compare(x1, 0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findRemainder(vector<int>{1, 2, 1}, 3, 2);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find remainder of array multiplication divided by n.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/472", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given list contains consecutive numbers or not.\n */\nbool checkConsecutive(vector<int> l) {\n}\n\n// The pseudo code of the above function:\n// Input: l: list of integers\n// Output: True or False\n// 1: l <- sorted(l)\n// 2: for i in range(len(l)-1) do\n// 3:    if l[i+1] - l[i] != 1 then\n// 4:        return False\n// 5: return True", "entry_point": "checkConsecutive", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkConsecutive(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkConsecutive(vector<int>{1, 2, 3, 5, 6});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkConsecutive(vector<int>{1, 2, 1});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given list contains consecutive numbers or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/474", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace characters in a string.\n */\nstring replaceChar(string str1, string ch, string newch) {\n}\n\n// The pseudo code of the above function:\n// Input: str1: str, ch: str, newch: str\n// Output: new_str: str\n// 1: new_str <- \"\"\n// 2: for i in range(len(str1)) do\n// 3:    if str1[i] == ch then\n// 4:        new_str <- new_str + newch\n// 5:    else:\n// 6:        new_str <- new_str + str1[i]\n// 7: return new_str", "entry_point": "replaceChar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = replaceChar(string(\"polygon\"), string(\"y\"), string(\"l\"));\n    if (!(compare(x0, string(\"pollgon\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = replaceChar(string(\"character\"), string(\"c\"), string(\"a\"));\n    if (!(compare(x1, string(\"aharaater\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = replaceChar(string(\"python\"), string(\"l\"), string(\"a\"));\n    if (!(compare(x2, string(\"python\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to replace characters in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/476", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of the largest and smallest value in a given array.\n */\nint bigSum(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of int\n// Output: sum: int\n// 1: max_num <- -inf, min_num <- inf\n// 2: for each num in nums do\n// 3:    if num > max_num then\n// 4:        max_num <- num\n// 5:    if num < min_num then\n// 6:        min_num <- num\n// 7: sum <- max_num + min_num\n// 8: return sum", "entry_point": "bigSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = bigSum(vector<int>{1, 2, 3});\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = bigSum(vector<int>{-1, 2, 3, 4});\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = bigSum(vector<int>{2, 3, 6});\n    if (!(compare(x2, 8))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of the largest and smallest value in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/477", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert the given string to lower case.\n */\nstring isLower(string str) {\n}\n\n// The pseudo code of the above function:\n// Input: str: str\n// Output: lower_str: str\n// 1: lower_str <- \"\"\n// 2: for char in str do\n// 3:    if char >= 'A' and char <= 'Z' then\n// 4:        lower_str += char + 32\n// 5:    else\n// 6:        lower_str += char\n// 7: return lower_str", "entry_point": "isLower", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = isLower(string(\"InValid\"));\n    if (!(compare(x0, string(\"invalid\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = isLower(string(\"TruE\"));\n    if (!(compare(x1, string(\"true\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = isLower(string(\"SenTenCE\"));\n    if (!(compare(x2, string(\"sentence\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to convert the given string to lower case.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/478", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove lowercase substrings from a given string.\n */\nstring removeLowercase(string str1) {\n}\n\n// The pseudo code of the above function:\n// Input: str1: str\n// Output: str2: str\n// 1: str2 <- \"\"\n// 2: for i in range(len(str1)) do\n// 3:    if str1[i].isupper() then\n// 4:        str2 <- str2 + str1[i]\n// 5: return str2", "entry_point": "removeLowercase", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeLowercase(string(\"PYTHon\"));\n    if (!(compare(x0, string(\"PYTH\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeLowercase(string(\"FInD\"));\n    if (!(compare(x1, string(\"FID\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeLowercase(string(\"STRinG\"));\n    if (!(compare(x2, string(\"STRG\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove lowercase substrings from a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/479", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first digit of a given number.\n */\nint firstDigit(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: digit: int\n// 1: while n > 9 do\n// 2:    n <- n / 10\n// 3: digit <- n\n// 4: return digit", "entry_point": "firstDigit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = firstDigit(123);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = firstDigit(456);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = firstDigit(12);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the first digit of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/480", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum occurring character in a given string.\n */\nstring getMaxOccuringChar(string str1) {\n}\n\n// The pseudo code of the above function:\n// Input: str1: str\n// Output: maxChar: str\n// 1: freq <- {}    // dictionary to store frequency of characters\n// 2: for ch in str1 do\n// 3:    if ch not in freq then\n// 4:        freq[ch] <- 1\n// 5:    else\n// 6:        freq[ch] += 1\n// 7: maxCount <- 0\n// 8: maxChar <- ''\n// 9: for ch, count in freq.items() do\n// 10:   if count > maxCount then\n// 11:       maxCount <- count\n// 12:       maxChar <- ch\n// 13: return maxChar", "entry_point": "getMaxOccuringChar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = getMaxOccuringChar(string(\"data\"));\n    if (!(compare(x0, string(\"a\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = getMaxOccuringChar(string(\"create\"));\n    if (!(compare(x1, string(\"e\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = getMaxOccuringChar(string(\"brilliant girl\"));\n    if (!(compare(x2, string(\"i\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the maximum occurring character in a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/481", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n */\nbool isSubsetSum(vector<int> set, int n, int sum) {\n}\n\n// The pseudo code of the above function:\n// Input: set: list of integers, n: int, sum: int\n// Output: True or False\n// 1: if sum == 0 then\n// 2:    return True\n// 3: if n == 0 and sum != 0 then\n// 4:    return False\n// 5: if set[n-1] > sum then\n// 6:    return isSubsetSum(set, n-1, sum)\n// 7: return isSubsetSum(set, n-1, sum) or isSubsetSum(set, n-1, sum-set[n-1])", "entry_point": "isSubsetSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 9);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 30);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 15);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/482", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n */\nstring match(string text) {\n}\n\n// The pseudo code of the above function:\n// Input: text: str\n// Output: matched_string: str\n// 1: pattern <- compile(\"[A-Z][a-z]+\")\n// 2: match <- pattern.findall(text)\n// 3: matched_string <- join(match, \", \")\n// 4: return matched_string", "entry_point": "match", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = match(string(\"Geeks\"));\n    if (!(compare(x0, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = match(string(\"geeksforGeeks\"));\n    if (!(compare(x1, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = match(string(\"geeks\"));\n    if (!(compare(x2, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/483", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first natural number whose factorial is divisible by x.\n */\nint firstFactorialDivisibleNumber(int x) {\n}\n\n// The pseudo code of the above function:\n// Input: x: int\n// Output: num: int\n// 1: num <- 1\n// 2: fact <- 1\n// 3: while fact % x != 0 do\n// 4:    num <- num + 1\n// 5:    fact <- fact * num\n// 6: return num", "entry_point": "firstFactorialDivisibleNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = firstFactorialDivisibleNumber(10);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = firstFactorialDivisibleNumber(15);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = firstFactorialDivisibleNumber(5);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the first natural number whose factorial is divisible by x.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/484", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove the matching tuples from the given two tuples.\n */\nvector<vector<string>> removeMatchingTuple(vector<vector<string>> testList1, vector<vector<string>> testList2) {\n}\n\n// The pseudo code of the above function:\n// Input: test_list1: list of tuples, test_list2: list of tuples\n// Output: result_list: list of tuples\n// 1: result_list <- []\n// 2: for t1 in test_list1 do\n// 3:    if t1 not in test_list2 then\n// 4:        result_list.append(t1)\n// 5: return result_list", "entry_point": "removeMatchingTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<string>> x0 = removeMatchingTuple(vector<vector<string>>{{string(\"Hello\"), string(\"dude\")}, {string(\"How\"), string(\"are\")}, {string(\"you\"), string(\"?\")}}, vector<vector<string>>{{string(\"Hello\"), string(\"dude\")}, {string(\"How\"), string(\"are\")}});\n    if (!(compare(x0, {{string(\"you\"), string(\"?\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<string>> x1 = removeMatchingTuple(vector<vector<string>>{{string(\"Part\"), string(\"of\")}, {string(\"the\"), string(\"journey\")}, {string(\"is \"), string(\"end\")}}, vector<vector<string>>{{string(\"Journey\"), string(\"the\")}, {string(\"is\"), string(\"end\")}});\n    if (!(compare(x1, {{string(\"Part\"), string(\"of\")}, {string(\"the\"), string(\"journey\")}, {string(\"is \"), string(\"end\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<string>> x2 = removeMatchingTuple(vector<vector<string>>{{string(\"Its\"), string(\"been\")}, {string(\"a\"), string(\"long\")}, {string(\"day\"), string(\"without\")}}, vector<vector<string>>{{string(\"a\"), string(\"long\")}, {string(\"my\"), string(\"friend\")}});\n    if (!(compare(x2, {{string(\"Its\"), string(\"been\")}, {string(\"day\"), string(\"without\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove the matching tuples from the given two tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/485", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest palindromic number in the given array.\n */\nint largestPalindrome(vector<int> a, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: a: list of integers, n: int\n// Output: largest_palindrome: int\n// 1: largest_palindrome <- -1\n// 2: for i in range(n) do\n// 3:    for j in range(i+1, n) do\n// 4:        product <- a[i] * a[j]\n// 5:        if product > largest_palindrome and str(product) == str(product)[::-1] then\n// 6:            largest_palindrome <- product\n// 7: return largest_palindrome", "entry_point": "largestPalindrome", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = largestPalindrome(vector<int>{1, 232, 54545, 999991}, 4);\n    if (!(compare(x0, 54545))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = largestPalindrome(vector<int>{1, 2, 3, 4, 5, 50}, 6);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the largest palindromic number in the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/486", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute binomial probability for the given number.\n */\ndouble binomialProbability(int n, int k, double p) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int, k: int, p: float\n// Output: probability: float\n// 1: probability <- (factorial(n) / (factorial(k) * factorial(n-k))) * pow(p, k) * pow(1-p, n-k)\n// 2: return probability", "entry_point": "binomialProbability", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = binomialProbability(10, 5, 0.3333333333333333);\n    if (!(compare(x0, 0.13656454808718185))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = binomialProbability(11, 6, 0.5);\n    if (!(compare(x1, 0.2255859375))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = binomialProbability(12, 7, 0.6);\n    if (!(compare(x2, 0.227030335488))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to compute binomial probability for the given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/487", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n */\nvector<vector<int>> sortTuple(vector<vector<int>> tup) {\n}\n\n// The pseudo code of the above function:\n// Input: tup: list of tuples\n// Output: sorted_tup: list of tuples\n// 1: sorted_tup <- sort(tup, key=lambda x: x[-1])\n// 2: return sorted_tup", "entry_point": "sortTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = sortTuple(vector<vector<int>>{{1, 3}, {3, 2}, {2, 1}});\n    if (!(compare(x0, {{2, 1}, {3, 2}, {1, 3}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = sortTuple(vector<vector<int>>{{2, 4}, {3, 3}, {1, 1}});\n    if (!(compare(x1, {{1, 1}, {3, 3}, {2, 4}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = sortTuple(vector<vector<int>>{{3, 9}, {6, 7}, {4, 3}});\n    if (!(compare(x2, {{4, 3}, {6, 7}, {3, 9}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/488", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a pentagon.\n */\ndouble areaPentagon(int a) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int\n// Output: area: double\n// 1: area <- (5 * a * a) / (4 * tan(pi/5))\n// 2: return area", "entry_point": "areaPentagon", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = areaPentagon(5);\n    if (!(compare(x0, 43.01193501472417))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = areaPentagon(10);\n    if (!(compare(x1, 172.0477400588967))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = areaPentagon(15);\n    if (!(compare(x2, 387.10741513251753))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the area of a pentagon.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/489", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of the largest value in a given array.\n */\nint frequencyOfLargest(int n, vector<int> arr) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int, arr: list of int\n// Output: freq: int\n// 1: max <- -inf\n// 2: freq <- 0\n// 3: for i in range(n) do\n// 4:    if arr[i] > max then\n// 5:        max <- arr[i]\n// 6: for i in range(n) do\n// 7:    if arr[i] == max then\n// 8:        freq <- freq + 1\n// 9: return freq", "entry_point": "frequencyOfLargest", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = frequencyOfLargest(5, vector<int>{1, 2, 3, 4, 4});\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = frequencyOfLargest(3, vector<int>{5, 6, 5});\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = frequencyOfLargest(4, vector<int>{2, 7, 7, 7});\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the frequency of the largest value in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/491", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of geometric progression series.\n */\nint sumGp(int a, int n, int r) {\n}\n\n// The pseudo code of the above function:\n// Input: a: int, n: int, r: int\n// Output: sum: int\n// 1: sum <- a\n// 2: for i <- 1 to n-1 do\n// 3:    sum <- sum + (a * pow(r, i))\n// 4: return sum", "entry_point": "sumGp", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumGp(1, 5, 2);\n    if (!(compare(x0, 31))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumGp(1, 5, 4);\n    if (!(compare(x1, 341))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumGp(2, 6, 3);\n    if (!(compare(x2, 728))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the sum of geometric progression series.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/492", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search an element in the given array by using binary search.\n */\nbool binarySearch(vector<int> itemList, int item) {\n}\n\n// The pseudo code of the above function:\n// Input: item_list: list of int, item: int\n// Output: True or False\n// 1: left <- 0, right <- len(item_list)-1\n// 2: while left <= right do\n// 3:    mid <- (left + right) // 2\n// 4:    if item_list[mid] == item then\n// 5:        return True\n// 6:    elif item_list[mid] < item then\n// 7:        left <- mid+1\n// 8:    else\n// 9:        right <- mid-1\n// 10: return False", "entry_point": "binarySearch", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = binarySearch(vector<int>{1, 2, 3, 5, 8}, 6);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = binarySearch(vector<int>{7, 8, 9, 10, 13}, 10);\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = binarySearch(vector<int>{11, 13, 14, 19, 22, 36}, 23);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to search an element in the given array by using binary search.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/493", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n */\nvector<vector<vector<double>>> calculatePolygons(int startx, int starty, int endx, int endy, int radius) {\n}\n\n// The pseudo code of the above function:\n// Input: start_x: int, start_y: int, end_x: int, end_y: int, radius: int\n// Output: polygon_grid: list of lists containing 6 tuples of x, y point coordinates\n// 1: polygon_grid <- []\n// 2: for x <- start_x to end_x do\n// 3:    row <- []\n// 4:    if x % 2 == 0 then\n// 5:        start_y <- start_y + radius\n// 6:    for y <- start_y to end_y by 2 * radius do\n// 7:        row.append([(x, y + radius), (x + sqrt(3) / 2 * radius, y + radius / 2), (x + sqrt(3) / 2 * radius, y - radius / 2), (x, y - radius), (x - sqrt(3) / 2 * radius, y - radius / 2), (x - sqrt(3) / 2 * radius, y + radius / 2)])\n// 8:    polygon_grid.append(row)\n// 9: return polygon_grid", "entry_point": "calculatePolygons", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<vector<double>>> x0 = calculatePolygons(1, 1, 4, 4, 3);\n    if (!(compare(x0, {{{-5.0, -4.196152422706632}, {-5.0, -0.7320508075688767}, {-2.0, 1.0}, {1.0, -0.7320508075688767}, {1.0, -4.196152422706632}, {-2.0, -5.928203230275509}, {-5.0, -4.196152422706632}}, {{1.0, -4.196152422706632}, {1.0, -0.7320508075688767}, {4.0, 1.0}, {7.0, -0.7320508075688767}, {7.0, -4.196152422706632}, {4.0, -5.928203230275509}, {1.0, -4.196152422706632}}, {{7.0, -4.196152422706632}, {7.0, -0.7320508075688767}, {10.0, 1.0}, {13.0, -0.7320508075688767}, {13.0, -4.196152422706632}, {10.0, -5.928203230275509}, {7.0, -4.196152422706632}}, {{-2.0, 1.0000000000000004}, {-2.0, 4.464101615137755}, {1.0, 6.196152422706632}, {4.0, 4.464101615137755}, {4.0, 1.0000000000000004}, {1.0, -0.7320508075688767}, {-2.0, 1.0000000000000004}}, {{4.0, 1.0000000000000004}, {4.0, 4.464101615137755}, {7.0, 6.196152422706632}, {10.0, 4.464101615137755}, {10.0, 1.0000000000000004}, {7.0, -0.7320508075688767}, {4.0, 1.0000000000000004}}, {{-5.0, 6.196152422706632}, {-5.0, 9.660254037844387}, {-2.0, 11.392304845413264}, {1.0, 9.660254037844387}, {1.0, 6.196152422706632}, {-2.0, 4.464101615137755}, {-5.0, 6.196152422706632}}, {{1.0, 6.196152422706632}, {1.0, 9.660254037844387}, {4.0, 11.392304845413264}, {7.0, 9.660254037844387}, {7.0, 6.196152422706632}, {4.0, 4.464101615137755}, {1.0, 6.196152422706632}}, {{7.0, 6.196152422706632}, {7.0, 9.660254037844387}, {10.0, 11.392304845413264}, {13.0, 9.660254037844387}, {13.0, 6.196152422706632}, {10.0, 4.464101615137755}, {7.0, 6.196152422706632}}, {{-2.0, 11.392304845413264}, {-2.0, 14.85640646055102}, {1.0, 16.588457268119896}, {4.0, 14.85640646055102}, {4.0, 11.392304845413264}, {1.0, 9.660254037844387}, {-2.0, 11.392304845413264}}, {{4.0, 11.392304845413264}, {4.0, 14.85640646055102}, {7.0, 16.588457268119896}, {10.0, 14.85640646055102}, {10.0, 11.392304845413264}, {7.0, 9.660254037844387}, {4.0, 11.392304845413264}}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<vector<double>>> x1 = calculatePolygons(5, 4, 7, 9, 8);\n    if (!(compare(x1, {{{-11.0, -9.856406460551018}, {-11.0, -0.6188021535170058}, {-3.0, 4.0}, {5.0, -0.6188021535170058}, {5.0, -9.856406460551018}, {-3.0, -14.475208614068023}, {-11.0, -9.856406460551018}}, {{5.0, -9.856406460551018}, {5.0, -0.6188021535170058}, {13.0, 4.0}, {21.0, -0.6188021535170058}, {21.0, -9.856406460551018}, {13.0, -14.475208614068023}, {5.0, -9.856406460551018}}, {{21.0, -9.856406460551018}, {21.0, -0.6188021535170058}, {29.0, 4.0}, {37.0, -0.6188021535170058}, {37.0, -9.856406460551018}, {29.0, -14.475208614068023}, {21.0, -9.856406460551018}}, {{-3.0, 4.0}, {-3.0, 13.237604307034012}, {5.0, 17.856406460551018}, {13.0, 13.237604307034012}, {13.0, 4.0}, {5.0, -0.6188021535170058}, {-3.0, 4.0}}, {{13.0, 4.0}, {13.0, 13.237604307034012}, {21.0, 17.856406460551018}, {29.0, 13.237604307034012}, {29.0, 4.0}, {21.0, -0.6188021535170058}, {13.0, 4.0}}, {{-11.0, 17.856406460551018}, {-11.0, 27.09401076758503}, {-3.0, 31.712812921102035}, {5.0, 27.09401076758503}, {5.0, 17.856406460551018}, {-3.0, 13.237604307034012}, {-11.0, 17.856406460551018}}, {{5.0, 17.856406460551018}, {5.0, 27.09401076758503}, {13.0, 31.712812921102035}, {21.0, 27.09401076758503}, {21.0, 17.856406460551018}, {13.0, 13.237604307034012}, {5.0, 17.856406460551018}}, {{21.0, 17.856406460551018}, {21.0, 27.09401076758503}, {29.0, 31.712812921102035}, {37.0, 27.09401076758503}, {37.0, 17.856406460551018}, {29.0, 13.237604307034012}, {21.0, 17.856406460551018}}, {{-3.0, 31.712812921102035}, {-3.0, 40.95041722813605}, {5.0, 45.569219381653056}, {13.0, 40.95041722813605}, {13.0, 31.712812921102035}, {5.0, 27.09401076758503}, {-3.0, 31.712812921102035}}, {{13.0, 31.712812921102035}, {13.0, 40.95041722813605}, {21.0, 45.569219381653056}, {29.0, 40.95041722813605}, {29.0, 31.712812921102035}, {21.0, 27.09401076758503}, {13.0, 31.712812921102035}}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<vector<double>>> x2 = calculatePolygons(9, 6, 4, 3, 2);\n    if (!(compare(x2, {{{5.0, 2.5358983848622456}, {5.0, 4.8452994616207485}, {7.0, 6.0}, {9.0, 4.8452994616207485}, {9.0, 2.5358983848622456}, {7.0, 1.3811978464829942}, {5.0, 2.5358983848622456}}, {{7.0, 6.0}, {7.0, 8.309401076758503}, {9.0, 9.464101615137753}, {11.0, 8.309401076758503}, {11.0, 6.0}, {9.0, 4.8452994616207485}, {7.0, 6.0}}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/494", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given binary tuple to integer.\n */\nstring binaryToInteger(vector<int> testTup) {\n}\n\n// The pseudo code of the above function:\n// Input: test_tup: list of int\n// Output: str: str\n// 1: n <- 0\n// 2: for i in range(len(test_tup)) do\n// 3:    n <- n * 2 + test_tup[i]\n// 4: return str(n)", "entry_point": "binaryToInteger", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = binaryToInteger(vector<int>{1, 1, 0, 1, 0, 0, 1});\n    if (!(compare(x0, string(\"105\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = binaryToInteger(vector<int>{0, 1, 1, 0, 0, 1, 0, 1});\n    if (!(compare(x1, string(\"101\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = binaryToInteger(vector<int>{1, 1, 0, 1, 0, 1});\n    if (!(compare(x2, string(\"53\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert the given binary tuple to integer.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/495", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove lowercase substrings from a given string by using regex.\n */\nstring removeLowercase(string str1) {\n}\n\n// The pseudo code of the above function:\n// Input: str1: str\n// Output: str2: str\n// 1: pattern <- \"[a-z]+\"\n// 2: regx <- regex(pattern)\n// 3: str2 <- regex_replace(str1, regx, \"\")\n// 4: return str2", "entry_point": "removeLowercase", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeLowercase(string(\"KDeoALOklOOHserfLoAJSIskdsf\"));\n    if (!(compare(x0, string(\"KDALOOOHLAJSI\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeLowercase(string(\"ProducTnamEstreAmIngMediAplAYer\"));\n    if (!(compare(x1, string(\"PTEAIMAAY\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeLowercase(string(\"maNufacTuredbYSheZenTechNolOGIes\"));\n    if (!(compare(x2, string(\"NTYSZTNOGI\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove lowercase substrings from a given string by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/496", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n */\nvector<int> heapQueueSmallest(vector<int> nums, int n) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of integers, n: int\n// Output: smallest_nums: list of integers\n// 1: smallest_nums <- empty list\n// 2: create a min heap from nums\n// 3: for i in range(n) do\n// 4:    smallest <- pop the smallest element from the min heap\n// 5:    add smallest to smallest_nums\n// 6: return smallest_nums", "entry_point": "heapQueueSmallest", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, 3);\n    if (!(compare(x0, {14, 22, 25}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, 2);\n    if (!(compare(x1, {14, 22}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5);\n    if (!(compare(x2, {14, 22, 22, 25, 35}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/497", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cone.\n */\ndouble surfaceareaCone(int r, int h) {\n}\n\n// The pseudo code of the above function:\n// Input: r: int, h: int\n// Output: surface_area: float\n// 1: surface_area = pi * r * sqrt((r*r) + (h*h))\n// 2: surface_area += pi * r * r\n// 3: return surface_area", "entry_point": "surfaceareaCone", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = surfaceareaCone(5, 12);\n    if (!(compare(x0, 282.7433388230814))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = surfaceareaCone(10, 15);\n    if (!(compare(x1, 880.5179353159282))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = surfaceareaCone(19, 17);\n    if (!(compare(x2, 2655.923961165254))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the surface area of a cone.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/498", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find gcd of two positive integers.\n */\nint gcd(int x, int y) {\n}\n\n// The pseudo code of the above function:\n// Input: x, y: positive integers\n// Output: gcd: int\n// 1: if x < y then\n// 2:    swap x and y\n// 3: while y != 0 do\n// 4:    temp <- x mod y\n// 5:    x <- y\n// 6:    y <- temp\n// 7: return x", "entry_point": "gcd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = gcd(12, 17);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = gcd(4, 6);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = gcd(2, 9);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find gcd of two positive integers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/499", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the diameter of a circle.\n */\nint diameterCircle(int r) {\n}\n\n// The pseudo code of the above function:\n// Input: r: int\n// Output: d: int\n// 1: d <- 2 * r\n// 2: return d", "entry_point": "diameterCircle", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = diameterCircle(10);\n    if (!(compare(x0, 20))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = diameterCircle(40);\n    if (!(compare(x1, 80))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = diameterCircle(15);\n    if (!(compare(x2, 30))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the diameter of a circle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/500", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to concatenate all elements of the given list into a string.\n */\nstring concatenateElements(vector<string> list) {\n}\n\n// The pseudo code of the above function:\n// Input: lst: list of str\n// Output: concatenated_str: str\n// 1: concatenated_str <- \"\"\n// 2: for s in lst do\n// 3:    concatenated_str <- concatenated_str + s\n// 4: return concatenated_str", "entry_point": "concatenateElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = concatenateElements(vector<string>{string(\"hello\"), string(\"there\"), string(\"have\"), string(\"a\"), string(\"rocky\"), string(\"day\")});\n    if (!(compare(x0, string(\"  hello there have a rocky day\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = concatenateElements(vector<string>{string(\"Hi\"), string(\"there\"), string(\"How\"), string(\"are\"), string(\"you\")});\n    if (!(compare(x1, string(\"  Hi there How are you\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = concatenateElements(vector<string>{string(\"Part\"), string(\"of\"), string(\"the\"), string(\"journey\"), string(\"is\"), string(\"end\")});\n    if (!(compare(x2, string(\"  Part of the journey is end\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to concatenate all elements of the given list into a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/501", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find common divisor between two numbers in a given pair.\n */\nint numCommDiv(int x, int y) {\n}\n\n// The pseudo code of the above function:\n// Input: x: int, y: int\n// Output: count: int\n// 1: count <- 0\n// 2: for i <- 1 to min(x, y) do\n// 3:    if x % i == 0 and y % i == 0 then\n// 4:        count <- count + 1\n// 5: return count", "entry_point": "numCommDiv", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = numCommDiv(2, 4);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = numCommDiv(2, 8);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = numCommDiv(12, 24);\n    if (!(compare(x2, 6))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find common divisor between two numbers in a given pair.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/502", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find remainder of two numbers.\n */\nint find(int n, int m) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int, m: int\n// Output: remainder: int\n// 1: remainder <- n % m\n// 2: return remainder", "entry_point": "find", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = find(3, 3);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = find(10, 3);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = find(16, 5);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find remainder of two numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/503", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add consecutive numbers of a given list.\n */\nvector<int> addConsecutiveNums(vector<int> nums) {\n}\n\n// The pseudo code of the above function:\n// Input: nums: list of int\n// Output: res: list of int\n// 1: res <- []\n// 2: for i in range(len(nums)-1) do\n// 3:    res.append(nums[i]+nums[i+1])\n// 4: return res", "entry_point": "addConsecutiveNums", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = addConsecutiveNums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7});\n    if (!(compare(x0, {2, 4, 7, 8, 9, 11, 13}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = addConsecutiveNums(vector<int>{4, 5, 8, 9, 6, 10});\n    if (!(compare(x1, {9, 13, 17, 15, 16}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = addConsecutiveNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    if (!(compare(x2, {3, 5, 7, 9, 11, 13, 15, 17, 19}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to add consecutive numbers of a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/504", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the cube sum of first n natural numbers.\n */\nint sumOfSeries(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: sum: int\n// 1: sum <- 0\n// 2: for i in range(1, n+1) do\n// 3:    sum <- sum + i^3\n// 4: return sum", "entry_point": "sumOfSeries", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumOfSeries(5);\n    if (!(compare(x0, 225))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumOfSeries(2);\n    if (!(compare(x1, 9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumOfSeries(3);\n    if (!(compare(x2, 36))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the cube sum of first n natural numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/505", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to move all zeroes to the end of the given array.\n */\nvector<int> reOrder(vector<int> a) {\n}\n\n// The pseudo code of the above function:\n// Input: a: list of integers\n// Output: list of integers\n// 1: zeroes <- []\n// 2: non_zeroes <- []\n// 3: for each num in a do\n// 4:    if num == 0 then\n// 5:        zeroes.append(num)\n// 6:    else:\n// 7:        non_zeroes.append(num)\n// 8: return non_zeroes + zeroes", "entry_point": "reOrder", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = reOrder(vector<int>{6, 0, 8, 2, 3, 0, 4, 0, 1});\n    if (!(compare(x0, {6, 8, 2, 3, 4, 1, 0, 0, 0}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = reOrder(vector<int>{4, 0, 2, 7, 0, 9, 0, 12, 0});\n    if (!(compare(x1, {4, 2, 7, 9, 12, 0, 0, 0, 0}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = reOrder(vector<int>{3, 11, 0, 74, 14, 0, 1, 0, 2});\n    if (!(compare(x2, {3, 11, 74, 14, 1, 2, 0, 0, 0}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to move all zeroes to the end of the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/506", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the permutation coefficient of given p(n, k).\n */\nint permutationCoefficient(int n, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int, k: int\n// Output: p: int\n// 1: if k > n then\n// 2:    return 0\n// 3: p <- 1\n// 4: for i <- n-k+1 to n do\n// 5:    p <- p * i\n// 6: return p", "entry_point": "permutationCoefficient", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = permutationCoefficient(10, 2);\n    if (!(compare(x0, 90))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = permutationCoefficient(10, 3);\n    if (!(compare(x1, 720))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = permutationCoefficient(10, 1);\n    if (!(compare(x2, 10))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the permutation coefficient of given p(n, k).", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/507", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove specific words from a given list.\n */\nvector<string> removeWords(vector<string> list1, vector<string> removewords) {\n}\n\n// The pseudo code of the above function:\n// Input: list1: list of strings, removewords: list of strings\n// Output: new_list: list of strings\n// 1: new_list <- []\n// 2: for word in list1 do\n// 3:    if word not in removewords then\n// 4:        new_list.append(word)\n// 5: return new_list", "entry_point": "removeWords", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"white\"), string(\"orange\")});\n    if (!(compare(x0, {string(\"red\"), string(\"green\"), string(\"blue\"), string(\"black\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"black\"), string(\"orange\")});\n    if (!(compare(x1, {string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"blue\"), string(\"white\")});\n    if (!(compare(x2, {string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove specific words from a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/508", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the common elements between two given lists are in the same order or not.\n */\nbool sameOrder(vector<string> l1, vector<string> l2) {\n}\n\n// The pseudo code of the above function:\n// Input: l1: list, l2: list\n// Output: True or False\n// 1: i <- 0\n// 2: j <- 0\n// 3: while i < len(l1) and j < len(l2) do\n// 4:    if l1[i] == l2[j] then\n// 5:        i <- i + 1\n// 6:        j <- j + 1\n// 7:    else:\n// 8:        j <- j + 1\n// 9: if i == len(l1) then\n// 10:    return True\n// 11: return False", "entry_point": "sameOrder", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = sameOrder(vector<string>{string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = sameOrder(vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")}, vector<string>{string(\"white\"), string(\"orange\"), string(\"pink\"), string(\"black\")});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = sameOrder(vector<string>{string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if the common elements between two given lists are in the same order or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/509", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the average of odd numbers till a given odd number.\n */\nint averageOdd(int n) {\n}\n\n// The pseudo code of the above function:\n// Input: n: int\n// Output: avg: int\n// 1: sum <- 0\n// 2: count <- 0\n// 3: for i <- 1 to n by 2 do\n// 4:    sum <- sum + i\n// 5:    count <- count + 1\n// 6: avg <- sum / count\n// 7: return avg", "entry_point": "averageOdd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = averageOdd(9);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = averageOdd(5);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = averageOdd(11);\n    if (!(compare(x2, 6))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the average of odd numbers till a given odd number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/510", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n */\nint noOfSubsequences(vector<int> arr, int k) {\n}\n\n// The pseudo code of the above function:\n// Input: arr: list of int, k: int\n// Output: count: int\n// 1: count <- 0\n// 2: n <- len(arr)\n// 3: for i <- 0 to n-1 do\n// 4:    product <- arr[i]\n// 5:    if product < k then\n// 6:        count <- count + 1\n// 7:    for j <- i+1 to n-1 do\n// 8:        product <- product * arr[j]\n// 9:        if product < k then\n// 10:           count <- count + 1\n// 11:       else:\n// 12:           break\n// 13: return count", "entry_point": "noOfSubsequences", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = noOfSubsequences(vector<int>{1, 2, 3, 4}, 10);\n    if (!(compare(x0, 11))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = noOfSubsequences(vector<int>{4, 8, 7, 2}, 50);\n    if (!(compare(x1, 9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = noOfSubsequences(vector<int>{5, 6, 7, 8}, 15);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "language": "cpp", "canonical_solution": null}

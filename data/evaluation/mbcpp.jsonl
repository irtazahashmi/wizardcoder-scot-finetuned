{"task_id": "MBCPP/11", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove first and last occurrence of a given character from the string.\n */\nstring removeOcc(string s, string ch) {\n", "entry_point": "removeOcc", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeOcc(string(\"hello\"), string(\"l\"));\n    if (!(compare(x0, string(\"heo\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeOcc(string(\"abcda\"), string(\"a\"));\n    if (!(compare(x1, string(\"bcd\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeOcc(string(\"PHP\"), string(\"P\"));\n    if (!(compare(x2, string(\"H\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to remove first and last occurrence of a given character from the string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/12", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given matrix in ascending order according to the sum of its rows.\n */\nvector<vector<int>> sortMatrix(vector<vector<int>> m) {\n", "entry_point": "sortMatrix", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = sortMatrix(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}});\n    if (!(compare(x0, {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = sortMatrix(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}});\n    if (!(compare(x1, {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = sortMatrix(vector<vector<int>>{{5, 8, 9}, {6, 4, 3}, {2, 1, 4}});\n    if (!(compare(x2, {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/14", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the volume of a triangular prism.\n */\nint findVolume(int l, int b, int h) {\n", "entry_point": "findVolume", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findVolume(10, 8, 6);\n    if (!(compare(x0, 240))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findVolume(3, 2, 2);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findVolume(1, 2, 1);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the volume of a triangular prism.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/15", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split a string at lowercase letters.\n */\nvector<string> splitLowerstring(string text) {\n", "entry_point": "splitLowerstring", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = splitLowerstring(string(\"AbCd\"));\n    if (!(compare(x0, {string(\"bC\"), string(\"d\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = splitLowerstring(string(\"Python\"));\n    if (!(compare(x1, {string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = splitLowerstring(string(\"Programming\"));\n    if (!(compare(x2, {string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\"), string(\"m\"), string(\"i\"), string(\"n\"), string(\"g\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to split a string at lowercase letters.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/16", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of lowercase letters joined with an underscore.\n */\nstring textLowercaseUnderscore(string text) {\n", "entry_point": "textLowercaseUnderscore", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textLowercaseUnderscore(string(\"aab_cbbbc\"));\n    if (!(compare(x0, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textLowercaseUnderscore(string(\"aab_Abbbc\"));\n    if (!(compare(x1, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textLowercaseUnderscore(string(\"Aaab_abbbc\"));\n    if (!(compare(x2, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find sequences of lowercase letters joined with an underscore.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/17", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a square.\n */\nint squarePerimeter(int a) {\n", "entry_point": "squarePerimeter", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = squarePerimeter(10);\n    if (!(compare(x0, 40))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = squarePerimeter(5);\n    if (!(compare(x1, 20))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = squarePerimeter(4);\n    if (!(compare(x2, 16))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the perimeter of a square.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/18", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove characters from the first string which are present in the second string.\n */\nstring removeDirtyChars(string str, string secondString) {\n", "entry_point": "removeDirtyChars", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeDirtyChars(string(\"probasscurve\"), string(\"pros\"));\n    if (!(compare(x0, string(\"bacuve\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeDirtyChars(string(\"digitalindia\"), string(\"talent\"));\n    if (!(compare(x1, string(\"digiidi\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeDirtyChars(string(\"exoticmiles\"), string(\"toxic\"));\n    if (!(compare(x2, string(\"emles\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove characters from the first string which are present in the second string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/19", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether a given array of integers contains any duplicate element.\n */\nbool testDuplicate(vector<int> arraynums) {\n", "entry_point": "testDuplicate", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = testDuplicate(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = testDuplicate(vector<int>{1, 2, 3, 4, 4});\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = testDuplicate(vector<int>{1, 1, 2, 2, 3, 3, 4, 4, 5});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find whether a given array of integers contains any duplicate element.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/20", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given number is woodball or not.\n */\nbool isWoodall(int x) {\n", "entry_point": "isWoodall", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isWoodall(383);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isWoodall(254);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isWoodall(200);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if the given number is woodball or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/21", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find m number of multiples of n.\n */\nvector<int> multiplesOfNum(int m, int n) {\n", "entry_point": "multiplesOfNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = multiplesOfNum(4, 3);\n    if (!(compare(x0, {3, 6, 9, 12}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = multiplesOfNum(2, 5);\n    if (!(compare(x1, {5, 10}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = multiplesOfNum(9, 2);\n    if (!(compare(x2, {2, 4, 6, 8, 10, 12, 14, 16, 18}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find m number of multiples of n.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/22", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the first duplicate element in a given array of integers.\n */\nint findFirstDuplicate(vector<int> nums) {\n", "entry_point": "findFirstDuplicate", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findFirstDuplicate(vector<int>{1, 2, 3, 4, 4, 5});\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findFirstDuplicate(vector<int>{1, 2, 3, 4});\n    if (!(compare(x1, -1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findFirstDuplicate(vector<int>{1, 1, 2, 3, 3, 2, 2});\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the first duplicate element in a given array of integers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/23", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum sum of elements of list in a list of lists.\n */\nint maximumSum(vector<vector<int>> list1) {\n", "entry_point": "maximumSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maximumSum(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}});\n    if (!(compare(x0, 33))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maximumSum(vector<vector<int>>{{0, 1, 1}, {1, 1, 2}, {3, 2, 1}});\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maximumSum(vector<vector<int>>{{0, 1, 3}, {1, 2, 1}, {9, 8, 2}, {0, 1, 0}, {6, 4, 8}});\n    if (!(compare(x2, 19))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the maximum sum of elements of list in a list of lists.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/24", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n */\nint binaryToDecimal(int binary) {\n", "entry_point": "binaryToDecimal", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = binaryToDecimal(100);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = binaryToDecimal(1011);\n    if (!(compare(x1, 11))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = binaryToDecimal(1101101);\n    if (!(compare(x2, 109))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert the given binary number to its decimal equivalent.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/25", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the product of non-repeated elements in a given array.\n */\nint findProduct(vector<int> arr, int n) {\n", "entry_point": "findProduct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findProduct(vector<int>{1, 1, 2, 3}, 4);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findProduct(vector<int>{1, 2, 3, 1, 1}, 5);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findProduct(vector<int>{1, 1, 4, 5, 6}, 5);\n    if (!(compare(x2, 120))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the product of non-repeated elements in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/26", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuple list has all k elements.\n */\nbool checkKElements(vector<vector<int>> testList, int k) {\n", "entry_point": "checkKElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkKElements(vector<vector<int>>{{4, 4}, {4, 4, 4}, {4, 4}, {4, 4, 4, 4}, {4}}, 4);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkKElements(vector<vector<int>>{{7, 7, 7}, {7, 7}}, 7);\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkKElements(vector<vector<int>>{{9, 9}, {9, 9, 9, 9}}, 7);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if the given tuple list has all k elements.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/27", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove all digits from a list of strings.\n */\nvector<string> remove(vector<string> list) {\n", "entry_point": "remove", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = remove(vector<string>{string(\"4words\"), string(\"3letters\"), string(\"4digits\")});\n    if (!(compare(x0, {string(\"words\"), string(\"letters\"), string(\"digits\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = remove(vector<string>{string(\"28Jan\"), string(\"12Jan\"), string(\"11Jan\")});\n    if (!(compare(x1, {string(\"Jan\"), string(\"Jan\"), string(\"Jan\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = remove(vector<string>{string(\"wonder1\"), string(\"wonder2\"), string(\"wonder3\")});\n    if (!(compare(x2, {string(\"wonder\"), string(\"wonder\"), string(\"wonder\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to remove all digits from a list of strings.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/28", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find binomial co-efficient.\n */\nint binomialCoeff(int n, int k) {\n", "entry_point": "binomialCoeff", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = binomialCoeff(5, 2);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = binomialCoeff(4, 3);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = binomialCoeff(3, 2);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find binomial co-efficient.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/29", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the element occurring odd number of times.\n */\nint getOddOccurrence(vector<int> arr, int arrSize) {\n", "entry_point": "getOddOccurrence", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getOddOccurrence(vector<int>{1, 2, 3, 1, 2, 3, 1}, 7);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getOddOccurrence(vector<int>{1, 2, 3, 2, 3, 1, 3}, 7);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getOddOccurrence(vector<int>{2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2}, 13);\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the element occurring odd number of times.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/30", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count all the substrings starting and ending with same characters.\n */\nint countSubstringWithEqualEnds(string s) {\n", "entry_point": "countSubstringWithEqualEnds", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSubstringWithEqualEnds(string(\"abc\"));\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSubstringWithEqualEnds(string(\"abcda\"));\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSubstringWithEqualEnds(string(\"ab\"));\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count all the substrings starting and ending with same characters.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/31", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n */\nvector<int> func(vector<vector<int>> nums, int k) {\n", "entry_point": "func", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 3);\n    if (!(compare(x0, {5, 7, 1}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 1);\n    if (!(compare(x1, {1}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 5);\n    if (!(compare(x2, {6, 5, 7, 8, 1}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/32", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest prime factor of a given number.\n */\nint maxPrimeFactors(int n) {\n", "entry_point": "maxPrimeFactors", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxPrimeFactors(15);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxPrimeFactors(6);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxPrimeFactors(2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the largest prime factor of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/33", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert a decimal number to binary number.\n */\nint decimalToBinary(int n) {\n", "entry_point": "decimalToBinary", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = decimalToBinary(10);\n    if (!(compare(x0, 1010))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = decimalToBinary(1);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = decimalToBinary(20);\n    if (!(compare(x2, 10100))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to convert a decimal number to binary number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/34", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the missing number in a sorted array.\n */\nint findMissing(vector<int> ar, int n) {\n", "entry_point": "findMissing", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMissing(vector<int>{1, 2, 3, 5}, 4);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMissing(vector<int>{1, 3, 4, 5}, 4);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMissing(vector<int>{1, 2, 3, 5, 6, 7}, 5);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the missing number in a sorted array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/35", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th rectangular number.\n */\nint findRectNum(int n) {\n", "entry_point": "findRectNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findRectNum(4);\n    if (!(compare(x0, 20))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findRectNum(5);\n    if (!(compare(x1, 30))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findRectNum(6);\n    if (!(compare(x2, 42))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the n-th rectangular number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/36", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the nth digit in the proper fraction of two given numbers.\n */\nint findNthDigit(int p, int q, int n) {\n", "entry_point": "findNthDigit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findNthDigit(1, 2, 1);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findNthDigit(3, 5, 1);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findNthDigit(5, 6, 5);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the nth digit in the proper fraction of two given numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/38", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the division of first even and odd number of a given list.\n */\nint divEvenOdd(vector<int> list1) {\n", "entry_point": "divEvenOdd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = divEvenOdd(vector<int>{1, 3, 5, 7, 4, 1, 6, 8});\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = divEvenOdd(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = divEvenOdd(vector<int>{1, 5, 7, 9, 10});\n    if (!(compare(x2, 10))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the division of first even and odd number of a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/39", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n */\nstring rearangeString(string s) {\n", "entry_point": "rearangeString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = rearangeString(string(\"aab\"));\n    if (!(compare(x0, string(\"aba\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = rearangeString(string(\"aabb\"));\n    if (!(compare(x1, string(\"abab\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = rearangeString(string(\"abccdd\"));\n    if (!(compare(x2, string(\"cdabcd\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/40", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find frequency of the elements in a given list of lists using collections module.\n */\nunordered_map<int, int> freqElement(vector<vector<int>> nums) {\n", "entry_point": "freqElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<int, int> x0 = freqElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}});\n    if (!(compare(x0, {{2, 3}, {1, 2}, {5, 2}, {3, 1}, {4, 1}, {6, 1}, {7, 1}, {9, 1}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<int, int> x1 = freqElement(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}});\n    if (!(compare(x1, {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<int, int> x2 = freqElement(vector<vector<int>>{{15, 20, 30, 40}, {80, 90, 100, 110}, {30, 30, 80, 90}});\n    if (!(compare(x2, {{30, 3}, {80, 2}, {90, 2}, {15, 1}, {20, 1}, {40, 1}, {100, 1}, {110, 1}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find frequency of the elements in a given list of lists using collections module.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/41", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter even numbers using lambda function.\n */\nvector<int> filterEvennumbers(vector<int> nums) {\n", "entry_point": "filterEvennumbers", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = filterEvennumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    if (!(compare(x0, {2, 4, 6, 8, 10}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = filterEvennumbers(vector<int>{10, 20, 45, 67, 84, 93});\n    if (!(compare(x1, {10, 20, 84}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = filterEvennumbers(vector<int>{5, 7, 9, 8, 6, 4, 3});\n    if (!(compare(x2, {8, 6, 4}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to filter even numbers using lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/42", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of repeated elements in a given array.\n */\nint findSum(vector<int> arr, int n) {\n", "entry_point": "findSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findSum(vector<int>{1, 2, 3, 1, 1, 4, 5, 6}, 8);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findSum(vector<int>{1, 2, 3, 1, 1}, 5);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findSum(vector<int>{1, 1, 2}, 3);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of repeated elements in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/43", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n */\nstring textMatch(string text) {\n", "entry_point": "textMatch", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatch(string(\"aab_cbbbc\"));\n    if (!(compare(x0, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatch(string(\"aab_Abbbc\"));\n    if (!(compare(x1, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatch(string(\"Aaab_abbbc\"));\n    if (!(compare(x2, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/44", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word at the beginning of a string.\n */\nstring textMatchString(string text) {\n", "entry_point": "textMatchString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatchString(string(\" python\"));\n    if (!(compare(x0, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatchString(string(\"python\"));\n    if (!(compare(x1, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatchString(string(\"  lang\"));\n    if (!(compare(x2, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function that matches a word at the beginning of a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/45", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the gcd of the given array elements.\n */\nint getGcd(vector<int> l) {\n", "entry_point": "getGcd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getGcd(vector<int>{2, 4, 6, 8, 16});\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getGcd(vector<int>{1, 2, 3});\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getGcd(vector<int>{2, 4, 6, 8});\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the gcd of the given array elements.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/46", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to determine whether all the numbers are different from each other are not.\n */\nbool testDistinct(vector<int> data) {\n", "entry_point": "testDistinct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = testDistinct(vector<int>{1, 5, 7, 9});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = testDistinct(vector<int>{2, 4, 5, 5, 7, 9});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = testDistinct(vector<int>{1, 2, 3});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to determine whether all the numbers are different from each other are not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/47", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last digit when factorial of a divides factorial of b.\n */\nint computeLastDigit(int a, int b) {\n", "entry_point": "computeLastDigit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = computeLastDigit(2, 4);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = computeLastDigit(6, 8);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = computeLastDigit(1, 2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the last digit when factorial of a divides factorial of b.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/48", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set all odd bits of a given number.\n */\nint oddBitSetNumber(int n) {\n", "entry_point": "oddBitSetNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = oddBitSetNumber(10);\n    if (!(compare(x0, 15))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = oddBitSetNumber(20);\n    if (!(compare(x1, 21))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = oddBitSetNumber(30);\n    if (!(compare(x2, 31))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to set all odd bits of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/49", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract every first or specified element from a given two-dimensional list.\n */\nvector<int> specifiedElement(vector<vector<int>> nums, int n) {\n", "entry_point": "specifiedElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0);\n    if (!(compare(x0, {1, 4, 7}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2);\n    if (!(compare(x1, {3, 6, 9}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 1);\n    if (!(compare(x2, {2, 5, 1}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract every first or specified element from a given two-dimensional list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/51", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print check if the triangle is equilateral or not.\n */\nbool checkEquilateral(int x, int y, int z) {\n", "entry_point": "checkEquilateral", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkEquilateral(6, 8, 12);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkEquilateral(6, 6, 12);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkEquilateral(6, 6, 6);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to print check if the triangle is equilateral or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/52", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to caluclate area of a parallelogram.\n */\nint parallelogramArea(int b, int h) {\n", "entry_point": "parallelogramArea", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = parallelogramArea(10, 20);\n    if (!(compare(x0, 200))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = parallelogramArea(15, 20);\n    if (!(compare(x1, 300))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = parallelogramArea(8, 9);\n    if (!(compare(x2, 72))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to caluclate area of a parallelogram.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/53", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the first and last characters of a given string are equal or not.\n */\nstring checkEquality(string str) {\n", "entry_point": "checkEquality", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkEquality(string(\"abcda\"));\n    if (!(compare(x0, string(\"Equal\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkEquality(string(\"ab\"));\n    if (!(compare(x1, string(\"Not Equal\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkEquality(string(\"mad\"));\n    if (!(compare(x2, string(\"Not Equal\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the first and last characters of a given string are equal or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/54", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using counting sort.\n */\nvector<int> countingSort(vector<int> myList) {\n", "entry_point": "countingSort", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = countingSort(vector<int>{1, 23, 4, 5, 6, 7, 8});\n    if (!(compare(x0, {1, 4, 5, 6, 7, 8, 23}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = countingSort(vector<int>{12, 9, 28, 33, 69, 45});\n    if (!(compare(x1, {9, 12, 28, 33, 45, 69}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = countingSort(vector<int>{8, 4, 14, 3, 2, 1});\n    if (!(compare(x2, {1, 2, 3, 4, 8, 14}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort the given array by using counting sort.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/55", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find t-nth term of geometric series.\n */\nint tnGp(int a, int n, int r) {\n", "entry_point": "tnGp", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = tnGp(1, 5, 2);\n    if (!(compare(x0, 16))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = tnGp(1, 5, 4);\n    if (!(compare(x1, 256))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = tnGp(2, 6, 3);\n    if (!(compare(x2, 486))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find t-nth term of geometric series.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/56", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if a given number is one less than twice its reverse.\n */\nbool check(int n) {\n", "entry_point": "check", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = check(70);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = check(23);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = check(73);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check if a given number is one less than twice its reverse.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/57", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest number that can be formed with the given digits.\n */\nint findMaxNum(vector<int> arr, int n) {\n", "entry_point": "findMaxNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMaxNum(vector<int>{1, 2, 3}, 3);\n    if (!(compare(x0, 321))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMaxNum(vector<int>{4, 5, 6, 1}, 4);\n    if (!(compare(x1, 6541))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMaxNum(vector<int>{1, 2, 3, 9}, 4);\n    if (!(compare(x2, 9321))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the largest number that can be formed with the given digits.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/58", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given two integers have opposite sign or not.\n */\nbool oppositeSigns(int x, int y) {\n", "entry_point": "oppositeSigns", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = oppositeSigns(1, -2);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = oppositeSigns(3, 2);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = oppositeSigns(-10, -10);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given two integers have opposite sign or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/59", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth octagonal number.\n */\nint isOctagonal(int n) {\n", "entry_point": "isOctagonal", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = isOctagonal(5);\n    if (!(compare(x0, 65))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = isOctagonal(10);\n    if (!(compare(x1, 280))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = isOctagonal(15);\n    if (!(compare(x2, 645))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the nth octagonal number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/60", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n */\nint maxLenSub(vector<int> arr, int n) {\n", "entry_point": "maxLenSub", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxLenSub(vector<int>{2, 5, 6, 3, 7, 6, 5, 8}, 8);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxLenSub(vector<int>{-2, -1, 5, -1, 4, 0, 3}, 7);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxLenSub(vector<int>{9, 11, 13, 15, 18}, 5);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/61", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of substrings with the sum of digits equal to their length.\n */\nint countSubstrings(string s, int n) {\n", "entry_point": "countSubstrings", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSubstrings(string(\"112112\"), 6);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSubstrings(string(\"111\"), 3);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSubstrings(string(\"1101112\"), 7);\n    if (!(compare(x2, 12))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count number of substrings with the sum of digits equal to their length.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/62", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find smallest number in a list.\n */\nint smallestNum(vector<int> xs) {\n", "entry_point": "smallestNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = smallestNum(vector<int>{10, 20, 1, 45, 99});\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = smallestNum(vector<int>{1, 2, 3});\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = smallestNum(vector<int>{45, 46, 50, 60});\n    if (!(compare(x2, 45))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find smallest number in a list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/63", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum difference between available pairs in the given tuple list.\n */\nint maxDifference(vector<vector<int>> testList) {\n", "entry_point": "maxDifference", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxDifference(vector<vector<int>>{{3, 5}, {1, 7}, {10, 3}, {1, 2}});\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxDifference(vector<vector<int>>{{4, 6}, {2, 17}, {9, 13}, {11, 12}});\n    if (!(compare(x1, 15))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxDifference(vector<vector<int>>{{12, 35}, {21, 27}, {13, 23}, {41, 22}});\n    if (!(compare(x2, 23))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum difference between available pairs in the given tuple list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/66", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count positive numbers in a list.\n */\nint posCount(vector<int> list) {\n", "entry_point": "posCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = posCount(vector<int>{1, -2, 3, -4});\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = posCount(vector<int>{3, 4, 5, -1});\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = posCount(vector<int>{1, 2, 3, 4});\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count positive numbers in a list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/68", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given array is monotonic or not.\n */\nbool isMonotonic(vector<int> a) {\n", "entry_point": "isMonotonic", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isMonotonic(vector<int>{6, 5, 4, 4});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isMonotonic(vector<int>{1, 2, 2, 3});\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isMonotonic(vector<int>{1, 3, 2});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given array is monotonic or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/69", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether a list contains the given sublist or not.\n */\nbool isSublist(vector<int> l, vector<int> s) {\n", "entry_point": "isSublist", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{3, 7});\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{4, 3});\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{1, 6});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether a list contains the given sublist or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/70", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether all the given tuples have equal length or not.\n */\nstring getEqual(vector<vector<int>> input, int k) {\n", "entry_point": "getEqual", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = getEqual(vector<vector<int>>{{11, 22, 33}, {44, 55, 66}}, 3);\n    if (!(compare(x0, string(\"All tuples have same length\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = getEqual(vector<vector<int>>{{1, 2, 3}, {4, 5, 6, 7}}, 3);\n    if (!(compare(x1, string(\"All tuples do not have same length\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = getEqual(vector<vector<int>>{{1, 2}, {3, 4}}, 2);\n    if (!(compare(x2, string(\"All tuples have same length\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find whether all the given tuples have equal length or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/71", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of elements using comb sort.\n */\nvector<int> combSort(vector<int> nums) {\n", "entry_point": "combSort", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = combSort(vector<int>{5, 15, 37, 25, 79});\n    if (!(compare(x0, {5, 15, 25, 37, 79}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = combSort(vector<int>{41, 32, 15, 19, 22});\n    if (!(compare(x1, {15, 19, 22, 32, 41}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = combSort(vector<int>{99, 15, 13, 47});\n    if (!(compare(x2, {13, 15, 47, 99}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort a list of elements using comb sort.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/72", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented as difference of two squares or not.\n */\nbool difSquare(int n) {\n", "entry_point": "difSquare", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = difSquare(5);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = difSquare(10);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = difSquare(15);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given number can be represented as difference of two squares or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/73", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split the given string with multiple delimiters by using regex.\n */\nvector<string> multipleSplit(string text) {\n", "entry_point": "multipleSplit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = multipleSplit(string(\"Forces of the \\ndarkness*are coming into the play.\"));\n    if (!(compare(x0, {string(\"Forces of the \"), string(\"darkness\"), string(\"are coming into the play.\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = multipleSplit(string(\"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\"));\n    if (!(compare(x1, {string(\"Mi Box runs on the \"), string(\" Latest android\"), string(\"which has google assistance and chromecast.\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = multipleSplit(string(\"Certain services\\nare subjected to change*over the seperate subscriptions.\"));\n    if (!(compare(x2, {string(\"Certain services\"), string(\"are subjected to change\"), string(\"over the seperate subscriptions.\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to split the given string with multiple delimiters by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/74", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether it follows the sequence given in the patterns array.\n */\nbool isSamepatterns(vector<string> colors, vector<string> patterns) {\n", "entry_point": "isSamepatterns", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"green\")}, vector<string>{string(\"a\"), string(\"b\"), string(\"b\")});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"greenn\")}, vector<string>{string(\"a\"), string(\"b\"), string(\"b\")});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"greenn\")}, vector<string>{string(\"a\"), string(\"b\")});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether it follows the sequence given in the patterns array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/75", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n */\nstring findTuples(vector<vector<int>> testList, int k) {\n", "entry_point": "findTuples", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = findTuples(vector<vector<int>>{{6, 24, 12}, {7, 9, 6}, {12, 18, 21}}, 6);\n    if (!(compare(x0, string(\"[(6, 24, 12)]\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = findTuples(vector<vector<int>>{{5, 25, 30}, {4, 2, 3}, {7, 8, 9}}, 5);\n    if (!(compare(x1, string(\"[(5, 25, 30)]\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = findTuples(vector<vector<int>>{{7, 9, 16}, {8, 16, 4}, {19, 17, 18}}, 4);\n    if (!(compare(x2, string(\"[(8, 16, 4)]\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/76", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of squares in a rectangle.\n */\nint countSquares(int m, int n) {\n", "entry_point": "countSquares", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSquares(4, 3);\n    if (!(compare(x0, 20))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSquares(2, 2);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSquares(1, 1);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the number of squares in a rectangle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/77", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the difference between sum of even and odd digits.\n */\nbool isDiff(int n) {\n", "entry_point": "isDiff", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isDiff(1212112);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isDiff(1212);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the difference between sum of even and odd digits.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/78", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find number of integers with odd number of set bits.\n */\nint countWithOddSetbits(int n) {\n", "entry_point": "countWithOddSetbits", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countWithOddSetbits(5);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countWithOddSetbits(10);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countWithOddSetbits(15);\n    if (!(compare(x2, 8))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find number of integers with odd number of set bits.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/79", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the length of the word is odd or not.\n */\nbool wordLen(string s) {\n", "entry_point": "wordLen", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = wordLen(string(\"Hadoop\"));\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = wordLen(string(\"great\"));\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = wordLen(string(\"structure\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the length of the word is odd or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/80", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth tetrahedral number.\n */\ndouble tetrahedralNumber(int n) {\n", "entry_point": "tetrahedralNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = tetrahedralNumber(5);\n    if (!(compare(x0, 35.0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = tetrahedralNumber(6);\n    if (!(compare(x1, 56.0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = tetrahedralNumber(7);\n    if (!(compare(x2, 84.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the nth tetrahedral number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/81", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to zip the two given tuples.\n */\nvector<vector<int>> zipTuples(vector<int> testTup1, vector<int> testTup2) {\n", "entry_point": "zipTuples", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = zipTuples(vector<int>{7, 8, 4, 5, 9, 10}, vector<int>{1, 5, 6});\n    if (!(compare(x0, {{7, 1}, {8, 5}, {4, 6}, {5, 1}, {9, 5}, {10, 6}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = zipTuples(vector<int>{8, 9, 5, 6, 10, 11}, vector<int>{2, 6, 7});\n    if (!(compare(x1, {{8, 2}, {9, 6}, {5, 7}, {6, 2}, {10, 6}, {11, 7}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = zipTuples(vector<int>{9, 10, 6, 7, 11, 12}, vector<int>{3, 7, 8});\n    if (!(compare(x2, {{9, 3}, {10, 7}, {6, 8}, {7, 3}, {11, 7}, {12, 8}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to zip the two given tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/82", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a sphere.\n */\ndouble volumeSphere(int r) {\n", "entry_point": "volumeSphere", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = volumeSphere(10);\n    if (!(compare(x0, 4188.790204786391))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = volumeSphere(25);\n    if (!(compare(x1, 65449.84694978735))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = volumeSphere(20);\n    if (!(compare(x2, 33510.32163829113))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the volume of a sphere.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/83", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the character made by adding all the characters of the given string.\n */\nstring getChar(string strr) {\n", "entry_point": "getChar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = getChar(string(\"abc\"));\n    if (!(compare(x0, string(\"f\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = getChar(string(\"gfg\"));\n    if (!(compare(x1, string(\"t\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = getChar(string(\"ab\"));\n    if (!(compare(x2, string(\"c\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the character made by adding all the characters of the given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/84", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th number in newman conway sequence.\n */\nint sequence(int n) {\n", "entry_point": "sequence", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sequence(10);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sequence(2);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sequence(3);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the n-th number in newman conway sequence.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/85", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a sphere.\n */\ndouble surfaceareaSphere(int r) {\n", "entry_point": "surfaceareaSphere", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = surfaceareaSphere(10);\n    if (!(compare(x0, 1256.6370614359173))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = surfaceareaSphere(15);\n    if (!(compare(x1, 2827.4333882308138))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = surfaceareaSphere(20);\n    if (!(compare(x2, 5026.548245743669))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the surface area of a sphere.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/86", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find nth centered hexagonal number.\n */\nint centeredHexagonalNumber(int n) {\n", "entry_point": "centeredHexagonalNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = centeredHexagonalNumber(10);\n    if (!(compare(x0, 271))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = centeredHexagonalNumber(2);\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = centeredHexagonalNumber(9);\n    if (!(compare(x2, 217))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find nth centered hexagonal number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/87", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge three dictionaries into a single expression.\n */\nunordered_map<string, string> mergeDictionariesThree(unordered_map<string, string> dict1, unordered_map<string, string> dict2, unordered_map<string, string> dict3) {\n", "entry_point": "mergeDictionariesThree", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<string, string> x0 = mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}, unordered_map<string, string>{{string(\"O\"), string(\"Orange\")}, {string(\"W\"), string(\"White\")}, {string(\"B\"), string(\"Black\")}});\n    if (!(compare(x0, {{string(\"B\"), string(\"Black\")}, {string(\"R\"), string(\"Red\")}, {string(\"P\"), string(\"Pink\")}, {string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}, {string(\"O\"), string(\"Orange\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<string, string> x1 = mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}, unordered_map<string, string>{{string(\"L\"), string(\"lavender\")}, {string(\"B\"), string(\"Blue\")}});\n    if (!(compare(x1, {{string(\"W\"), string(\"White\")}, {string(\"P\"), string(\"Pink\")}, {string(\"B\"), string(\"Black\")}, {string(\"R\"), string(\"Red\")}, {string(\"G\"), string(\"Green\")}, {string(\"L\"), string(\"lavender\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<string, string> x2 = mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"L\"), string(\"lavender\")}, {string(\"B\"), string(\"Blue\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}});\n    if (!(compare(x2, {{string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}, {string(\"R\"), string(\"Red\")}, {string(\"G\"), string(\"Green\")}, {string(\"L\"), string(\"lavender\")}, {string(\"W\"), string(\"White\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to merge three dictionaries into a single expression.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/88", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the frequency of the elements in a list.\n */\nunordered_map<int, int> freqCount(vector<int> list1) {\n", "entry_point": "freqCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<int, int> x0 = freqCount(vector<int>{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30});\n    if (!(compare(x0, {{10, 4}, {20, 4}, {40, 2}, {50, 2}, {30, 1}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<int, int> x1 = freqCount(vector<int>{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4});\n    if (!(compare(x1, {{1, 3}, {2, 2}, {3, 3}, {4, 3}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<int, int> x2 = freqCount(vector<int>{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5});\n    if (!(compare(x2, {{10, 1}, {5, 3}, {6, 2}, {7, 2}, {4, 2}, {9, 2}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to get the frequency of the elements in a list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/89", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the closest smaller number than n.\n */\nint closestNum(int n) {\n", "entry_point": "closestNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = closestNum(11);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = closestNum(7);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = closestNum(12);\n    if (!(compare(x2, 11))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the closest smaller number than n.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/90", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the length of the longest word.\n */\nint lenLog(vector<string> list1) {\n", "entry_point": "lenLog", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = lenLog(vector<string>{string(\"python\"), string(\"PHP\"), string(\"bigdata\")});\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = lenLog(vector<string>{string(\"a\"), string(\"ab\"), string(\"abc\")});\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = lenLog(vector<string>{string(\"small\"), string(\"big\"), string(\"tall\")});\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the length of the longest word.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/91", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a substring is present in a given list of string values.\n */\nbool findSubstring(vector<string> str1, string subStr) {\n", "entry_point": "findSubstring", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"ack\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"abc\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"ange\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if a substring is present in a given list of string values.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/92", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given number is undulating or not.\n */\nbool isUndulating(string n) {\n", "entry_point": "isUndulating", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isUndulating(string(\"1212121\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isUndulating(string(\"1991\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isUndulating(string(\"121\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether the given number is undulating or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/93", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the value of 'a' to the power 'b'.\n */\nint power(int a, int b) {\n", "entry_point": "power", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = power(3, 4);\n    if (!(compare(x0, 81))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = power(2, 3);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = power(5, 5);\n    if (!(compare(x2, 3125))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the value of 'a' to the power 'b'.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/95", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum length of sublist.\n */\nint findMinLength(vector<vector<int>> lst) {\n", "entry_point": "findMinLength", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMinLength(vector<vector<int>>{{1}, {1, 2}});\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMinLength(vector<vector<int>>{{1, 2}, {1, 2, 3}, {1, 2, 3, 4}});\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMinLength(vector<vector<int>>{{3, 3, 3}, {4, 4, 4, 4}});\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the minimum length of sublist.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/96", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the number of divisors of a given integer.\n */\nint divisor(int n) {\n", "entry_point": "divisor", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = divisor(15);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = divisor(12);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = divisor(9);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the number of divisors of a given integer.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/97", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find frequency count of list of lists.\n */\nunordered_map<int, int> frequencyLists(vector<vector<int>> list1) {\n", "entry_point": "frequencyLists", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<int, int> x0 = frequencyLists(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}});\n    if (!(compare(x0, {{1, 1}, {2, 3}, {3, 1}, {4, 1}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {9, 1}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<int, int> x1 = frequencyLists(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}});\n    if (!(compare(x1, {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<int, int> x2 = frequencyLists(vector<vector<int>>{{20, 30, 40, 17}, {18, 16, 14, 13}, {10, 20, 30, 40}});\n    if (!(compare(x2, {{20, 2}, {30, 2}, {40, 2}, {17, 1}, {18, 1}, {16, 1}, {14, 1}, {13, 1}, {10, 1}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find frequency count of list of lists.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/98", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */\ndouble multiplyNum(vector<int> numbers) {\n", "entry_point": "multiplyNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = multiplyNum(vector<int>{8, 2, 3, -1, 7});\n    if (!(compare(x0, -67.2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = multiplyNum(vector<int>{-10, -20, -30});\n    if (!(compare(x1, -2000.0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = multiplyNum(vector<int>{19, 15, 18});\n    if (!(compare(x2, 1710.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/99", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given decimal number to its binary equivalent.\n */\nstring decimalToBinary(int n) {\n", "entry_point": "decimalToBinary", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = decimalToBinary(8);\n    if (!(compare(x0, string(\"1000\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = decimalToBinary(18);\n    if (!(compare(x1, string(\"10010\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = decimalToBinary(7);\n    if (!(compare(x2, string(\"111\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert the given decimal number to its binary equivalent.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/100", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the next smallest palindrome of a specified number.\n */\nint nextSmallestPalindrome(int num) {\n", "entry_point": "nextSmallestPalindrome", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = nextSmallestPalindrome(99);\n    if (!(compare(x0, 101))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = nextSmallestPalindrome(1221);\n    if (!(compare(x1, 1331))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = nextSmallestPalindrome(120);\n    if (!(compare(x2, 121))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the next smallest palindrome of a specified number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/101", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the kth element in the given array.\n */\nint kthElement(vector<int> arr, int n, int k) {\n", "entry_point": "kthElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = kthElement(vector<int>{12, 3, 5, 7, 19}, 5, 2);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = kthElement(vector<int>{17, 24, 8, 23}, 4, 3);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = kthElement(vector<int>{16, 21, 25, 36, 4}, 5, 4);\n    if (!(compare(x2, 36))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the kth element in the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/102", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert snake case string to camel case string.\n */\nstring snakeToCamel(string word) {\n", "entry_point": "snakeToCamel", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = snakeToCamel(string(\"python_program\"));\n    if (!(compare(x0, string(\"PythonProgram\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = snakeToCamel(string(\"python_language\"));\n    if (!(compare(x1, string(\"PythonLanguage\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = snakeToCamel(string(\"programming_language\"));\n    if (!(compare(x2, string(\"ProgrammingLanguage\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert snake case string to camel case string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/103", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find eulerian number a(n, m).\n */\nint eulerianNum(int n, int m) {\n", "entry_point": "eulerianNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = eulerianNum(3, 1);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = eulerianNum(4, 1);\n    if (!(compare(x1, 11))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = eulerianNum(5, 3);\n    if (!(compare(x2, 26))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find eulerian number a(n, m).", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/104", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort each sublist of strings in a given list of lists using lambda function.\n */\nvector<vector<string>> sortSublists(vector<vector<string>> inputList) {\n", "entry_point": "sortSublists", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<string>> x0 = sortSublists(vector<vector<string>>{{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"white\"), string(\"black\"), string(\"orange\")}});\n    if (!(compare(x0, {{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"black\"), string(\"orange\"), string(\"white\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<string>> x1 = sortSublists(vector<vector<string>>{{string(\" red \"), string(\"green\")}, {string(\"blue \"), string(\" black\")}, {string(\" orange\"), string(\"brown\")}});\n    if (!(compare(x1, {{string(\" red \"), string(\"green\")}, {string(\" black\"), string(\"blue \")}, {string(\" orange\"), string(\"brown\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<string>> x2 = sortSublists(vector<vector<string>>{{string(\"zilver\"), string(\"gold\")}, {string(\"magnesium\"), string(\"aluminium\")}, {string(\"steel\"), string(\"bronze\")}});\n    if (!(compare(x2, {{string(\"gold\"), string(\"zilver\")}, {string(\"aluminium\"), string(\"magnesium\")}, {string(\"bronze\"), string(\"steel\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/105", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count true booleans in the given list.\n */\nint count(vector<bool> lst) {\n", "entry_point": "count", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = count(vector<bool>{true, false, true});\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = count(vector<bool>{false, false});\n    if (!(compare(x1, 0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = count(vector<bool>{true, true, true});\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count true booleans in the given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/106", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add the given list to the given tuples.\n */\nvector<int> addLists(vector<int> testList, vector<int> testTup) {\n", "entry_point": "addLists", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = addLists(vector<int>{5, 6, 7}, vector<int>{9, 10});\n    if (!(compare(x0, {9, 10, 5, 6, 7}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = addLists(vector<int>{6, 7, 8}, vector<int>{10, 11});\n    if (!(compare(x1, {10, 11, 6, 7, 8}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = addLists(vector<int>{7, 8, 9}, vector<int>{11, 12});\n    if (!(compare(x2, {11, 12, 7, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to add the given list to the given tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/107", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count hexadecimal numbers for a given range.\n */\nint countHexadecimal(int l, int r) {\n", "entry_point": "countHexadecimal", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countHexadecimal(10, 15);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countHexadecimal(2, 4);\n    if (!(compare(x1, 0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countHexadecimal(15, 16);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count hexadecimal numbers for a given range.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/108", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n */\nvector<int> mergeSortedList(vector<int> num1, vector<int> num2, vector<int> num3) {\n", "entry_point": "mergeSortedList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = mergeSortedList(vector<int>{25, 24, 15, 4, 5, 29, 110}, vector<int>{19, 20, 11, 56, 25, 233, 154}, vector<int>{24, 26, 54, 48});\n    if (!(compare(x0, {4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = mergeSortedList(vector<int>{1, 3, 5, 6, 8, 9}, vector<int>{2, 5, 7, 11}, vector<int>{1, 4, 7, 8, 12});\n    if (!(compare(x1, {1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = mergeSortedList(vector<int>{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}, vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, vector<int>{12, 74, 9, 50, 61, 41});\n    if (!(compare(x2, {1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/109", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the count of rotations of a binary string with odd value.\n */\nint oddEquivalent(string s, int n) {\n", "entry_point": "oddEquivalent", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = oddEquivalent(string(\"011001\"), 6);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = oddEquivalent(string(\"11011\"), 5);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = oddEquivalent(string(\"1010\"), 4);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the count of rotations of a binary string with odd value.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/110", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n */\nvector<vector<int>> extractMissing(vector<vector<int>> testList, int strtVal, int stopVal) {\n", "entry_point": "extractMissing", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = extractMissing(vector<vector<int>>{{6, 9}, {15, 34}, {48, 70}}, 2, 100);\n    if (!(compare(x0, {{2, 6}, {9, 100}, {9, 15}, {34, 100}, {34, 48}, {70, 100}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = extractMissing(vector<vector<int>>{{7, 2}, {15, 19}, {38, 50}}, 5, 60);\n    if (!(compare(x1, {{5, 7}, {2, 60}, {2, 15}, {19, 60}, {19, 38}, {50, 60}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = extractMissing(vector<vector<int>>{{7, 2}, {15, 19}, {38, 50}}, 1, 52);\n    if (!(compare(x2, {{1, 7}, {2, 52}, {2, 15}, {19, 52}, {19, 38}, {50, 52}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/111", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n */\nvector<int> commonInNestedLists(vector<vector<int>> nestedlist) {\n", "entry_point": "commonInNestedLists", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = commonInNestedLists(vector<vector<int>>{{12, 18, 23, 25, 45}, {7, 12, 18, 24, 28}, {1, 5, 8, 12, 15, 16, 18}});\n    if (!(compare(x0, {18, 12}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = commonInNestedLists(vector<vector<int>>{{12, 5, 23, 25, 45}, {7, 11, 5, 23, 28}, {1, 5, 8, 18, 23, 16}});\n    if (!(compare(x1, {5, 23}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = commonInNestedLists(vector<vector<int>>{{2, 3, 4, 1}, {4, 5}, {6, 4, 8}, {4, 5}, {6, 8, 4}});\n    if (!(compare(x2, {4}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/112", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the perimeter of a cylinder.\n */\nint perimeter(int diameter, int height) {\n", "entry_point": "perimeter", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = perimeter(2, 4);\n    if (!(compare(x0, 12))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = perimeter(1, 2);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = perimeter(3, 1);\n    if (!(compare(x2, 8))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the perimeter of a cylinder.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/113", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a string represents an integer or not.\n */\nbool checkInteger(string text) {\n", "entry_point": "checkInteger", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkInteger(string(\"python\"));\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkInteger(string(\"1\"));\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkInteger(string(\"12345\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if a string represents an integer or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/114", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to assign frequency to each tuple in the given tuple list.\n */\nstring assignFreq(vector<vector<int>> testList) {\n", "entry_point": "assignFreq", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = assignFreq(vector<vector<int>>{{6, 5, 8}, {2, 7}, {6, 5, 8}, {6, 5, 8}, {9}, {2, 7}});\n    if (!(compare(x0, string(\"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = assignFreq(vector<vector<int>>{{4, 2, 4}, {7, 1}, {4, 8}, {4, 2, 4}, {9, 2}, {7, 1}});\n    if (!(compare(x1, string(\"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = assignFreq(vector<vector<int>>{{11, 13, 10}, {17, 21}, {4, 2, 3}, {17, 21}, {9, 2}, {4, 2, 3}});\n    if (!(compare(x2, string(\"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to assign frequency to each tuple in the given tuple list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/116", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a given tuple of positive integers into an integer.\n */\nint tupleToInt(vector<int> nums) {\n", "entry_point": "tupleToInt", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = tupleToInt(vector<int>{1, 2, 3});\n    if (!(compare(x0, 123))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = tupleToInt(vector<int>{4, 5, 6});\n    if (!(compare(x1, 456))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = tupleToInt(vector<int>{5, 6, 7});\n    if (!(compare(x2, 567))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert a given tuple of positive integers into an integer.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/117", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert all possible convertible elements in the list to float.\n */\nstring listToFloat(vector<vector<string>> testList) {\n", "entry_point": "listToFloat", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = listToFloat(vector<vector<string>>{{string(\"3\"), string(\"4\")}, {string(\"1\"), string(\"26.45\")}, {string(\"7.32\"), string(\"8\")}, {string(\"4\"), string(\"8\")}});\n    if (!(compare(x0, string(\"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = listToFloat(vector<vector<string>>{{string(\"4\"), string(\"4\")}, {string(\"2\"), string(\"27\")}, {string(\"4.12\"), string(\"9\")}, {string(\"7\"), string(\"11\")}});\n    if (!(compare(x1, string(\"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = listToFloat(vector<vector<string>>{{string(\"6\"), string(\"78\")}, {string(\"5\"), string(\"26.45\")}, {string(\"1.33\"), string(\"4\")}, {string(\"82\"), string(\"13\")}});\n    if (!(compare(x2, string(\"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert all possible convertible elements in the list to float.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/118", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a string to a list.\n */\nvector<string> stringToList(string str) {\n", "entry_point": "stringToList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = stringToList(string(\"python programming\"));\n    if (!(compare(x0, {string(\"python\"), string(\"programming\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = stringToList(string(\"lists tuples strings\"));\n    if (!(compare(x1, {string(\"lists\"), string(\"tuples\"), string(\"strings\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = stringToList(string(\"write a program\"));\n    if (!(compare(x2, {string(\"write\"), string(\"a\"), string(\"program\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/119", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the element that appears only once in a sorted array.\n */\nint search(vector<int> arr, int n) {\n", "entry_point": "search", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = search(vector<int>{1, 1, 2, 2, 3}, 5);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = search(vector<int>{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}, 11);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = search(vector<int>{1, 2, 2, 3, 3, 4, 4}, 7);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the element that appears only once in a sorted array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/120", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product from the pairs of tuples within a given list.\n */\nint maxProductTuple(vector<vector<int>> list1) {\n", "entry_point": "maxProductTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxProductTuple(vector<vector<int>>{{2, 7}, {2, 6}, {1, 8}, {4, 9}});\n    if (!(compare(x0, 36))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxProductTuple(vector<vector<int>>{{10, 20}, {15, 2}, {5, 10}});\n    if (!(compare(x1, 200))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxProductTuple(vector<vector<int>>{{11, 44}, {10, 15}, {20, 5}, {12, 9}});\n    if (!(compare(x2, 484))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum product from the pairs of tuples within a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/121", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the triplet with sum of the given array\n */\nbool checkTriplet(vector<int> a, int n, int sum, int count) {\n", "entry_point": "checkTriplet", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkTriplet(vector<int>{2, 7, 4, 0, 9, 5, 1, 3}, 8, 6, 0);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkTriplet(vector<int>{1, 4, 5, 6, 7, 8, 5, 9}, 8, 6, 0);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkTriplet(vector<int>{10, 4, 2, 3, 5}, 5, 15, 0);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the triplet with sum of the given array", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/122", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find n\u2019th smart number.\n */\nint smartnumber(int n) {\n", "entry_point": "smartnumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = smartnumber(1);\n    if (!(compare(x0, 30))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = smartnumber(50);\n    if (!(compare(x1, 273))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = smartnumber(1000);\n    if (!(compare(x2, 2664))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find n\u2019th smart number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/123", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sum all amicable numbers from 1 to a specified number.\n */\nint amicableNumbersSum(int limit) {\n", "entry_point": "amicableNumbersSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = amicableNumbersSum(999);\n    if (!(compare(x0, 504))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = amicableNumbersSum(9999);\n    if (!(compare(x1, 31626))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = amicableNumbersSum(99);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sum all amicable numbers from 1 to a specified number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/125", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n */\nint findLength(string str, int n) {\n", "entry_point": "findLength", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findLength(string(\"11000010001\"), 11);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findLength(string(\"10111\"), 5);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findLength(string(\"11011101100101\"), 14);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/126", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of common divisors of two given numbers.\n */\nint sum(int a, int b) {\n", "entry_point": "sum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sum(10, 15);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sum(100, 150);\n    if (!(compare(x1, 93))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sum(4, 6);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of common divisors of two given numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/127", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply two integers without using the * operator in c++.\n */\nint multiplyInt(int x, int y) {\n", "entry_point": "multiplyInt", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = multiplyInt(10, 20);\n    if (!(compare(x0, 200))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = multiplyInt(5, 10);\n    if (!(compare(x1, 50))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = multiplyInt(4, 8);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to multiply two integers without using the * operator in c++.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/128", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to shortlist words that are longer than n from a given list of words.\n */\nvector<string> longWords(int n, string str) {\n", "entry_point": "longWords", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = longWords(3, string(\"python is a programming language\"));\n    if (!(compare(x0, {string(\"python\"), string(\"programming\"), string(\"language\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = longWords(2, string(\"writing a program\"));\n    if (!(compare(x1, {string(\"writing\"), string(\"program\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = longWords(5, string(\"sorting list\"));\n    if (!(compare(x2, {string(\"sorting\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to shortlist words that are longer than n from a given list of words.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/129", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate magic square.\n */\nbool magicSquareTest(vector<vector<int>> myMatrix) {\n", "entry_point": "magicSquareTest", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = magicSquareTest(vector<vector<int>>{{7, 12, 1, 14}, {2, 13, 8, 11}, {16, 3, 10, 5}, {9, 6, 15, 4}});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = magicSquareTest(vector<vector<int>>{{2, 7, 6}, {9, 5, 1}, {4, 3, 8}});\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = magicSquareTest(vector<vector<int>>{{2, 7, 6}, {9, 5, 1}, {4, 3, 7}});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate magic square.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/130", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the item with maximum frequency in a given list.\n */\nvector<int> maxOccurrences(vector<int> nums) {\n", "entry_point": "maxOccurrences", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2});\n    if (!(compare(x0, {2, 5}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18});\n    if (!(compare(x1, {8, 2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = maxOccurrences(vector<int>{10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10});\n    if (!(compare(x2, {20, 3}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the item with maximum frequency in a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/131", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to reverse only the vowels of a given string.\n */\nstring reverseVowels(string str1) {\n", "entry_point": "reverseVowels", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = reverseVowels(string(\"Python\"));\n    if (!(compare(x0, string(\"Python\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = reverseVowels(string(\"USA\"));\n    if (!(compare(x1, string(\"ASU\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = reverseVowels(string(\"ab\"));\n    if (!(compare(x2, string(\"ab\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to reverse only the vowels of a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/132", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert tuple to a string.\n */\nstring tupString(vector<string> tup1) {\n", "entry_point": "tupString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = tupString(vector<string>{string(\"e\"), string(\"x\"), string(\"e\"), string(\"r\"), string(\"c\"), string(\"i\"), string(\"s\"), string(\"e\"), string(\"s\")});\n    if (!(compare(x0, string(\"exercises\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = tupString(vector<string>{string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")});\n    if (!(compare(x1, string(\"python\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = tupString(vector<string>{string(\"p\"), string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\")});\n    if (!(compare(x2, string(\"program\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert tuple to a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/133", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n */\nint sumNegativenum(vector<int> nums) {\n", "entry_point": "sumNegativenum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumNegativenum(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17});\n    if (!(compare(x0, -32))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumNegativenum(vector<int>{10, 15, -14, 13, -18, 12, -20});\n    if (!(compare(x1, -52))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumNegativenum(vector<int>{19, -65, 57, 39, 152, -639, 121, 44, 90, -190});\n    if (!(compare(x2, -894))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/134", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the last element of given array is even or odd after performing an operation p times.\n */\nstring checkLast(vector<int> arr, int n, int p) {\n", "entry_point": "checkLast", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkLast(vector<int>{5, 7, 10}, 3, 1);\n    if (!(compare(x0, string(\"ODD\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkLast(vector<int>{2, 3}, 2, 3);\n    if (!(compare(x1, string(\"EVEN\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkLast(vector<int>{1, 2, 3}, 3, 1);\n    if (!(compare(x2, string(\"ODD\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the last element of given array is even or odd after performing an operation p times.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/135", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth hexagonal number.\n */\nint hexagonalNum(int n) {\n", "entry_point": "hexagonalNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = hexagonalNum(10);\n    if (!(compare(x0, 190))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = hexagonalNum(5);\n    if (!(compare(x1, 45))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = hexagonalNum(7);\n    if (!(compare(x2, 91))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the nth hexagonal number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/136", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate electricity bill.\n */\ndouble calElectbill(int units) {\n", "entry_point": "calElectbill", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = calElectbill(75);\n    if (!(compare(x0, 246.25))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = calElectbill(265);\n    if (!(compare(x1, 1442.75))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = calElectbill(100);\n    if (!(compare(x2, 327.5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate electricity bill.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/137", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ration of zeroes in an array of integers.\n */\ndouble zeroCount(vector<int> nums) {\n", "entry_point": "zeroCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = zeroCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8});\n    if (!(compare(x0, 0.15))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = zeroCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8});\n    if (!(compare(x1, 0.0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = zeroCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17});\n    if (!(compare(x2, 0.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the ration of zeroes in an array of integers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/138", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n */\nbool isSumOfPowersOfTwo(int n) {\n", "entry_point": "isSumOfPowersOfTwo", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isSumOfPowersOfTwo(10);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isSumOfPowersOfTwo(7);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isSumOfPowersOfTwo(14);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/139", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the circumference of a circle.\n */\ndouble circleCircumference(int r) {\n", "entry_point": "circleCircumference", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = circleCircumference(10);\n    if (!(compare(x0, 62.830000000000005))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = circleCircumference(5);\n    if (!(compare(x1, 31.415000000000003))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = circleCircumference(4);\n    if (!(compare(x2, 25.132))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the circumference of a circle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/140", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract elements that occur singly in the given tuple list.\n */\nvector<int> extractSingly(vector<vector<int>> testList) {\n", "entry_point": "extractSingly", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = extractSingly(vector<vector<int>>{{3, 4, 5}, {4, 5, 7}, {1, 4}});\n    if (!(compare(x0, {3, 4, 5, 7, 1}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = extractSingly(vector<vector<int>>{{1, 2, 3}, {4, 2, 3}, {7, 8}});\n    if (!(compare(x1, {1, 2, 3, 4, 7, 8}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = extractSingly(vector<vector<int>>{{7, 8, 9}, {10, 11, 12}, {10, 11}});\n    if (!(compare(x2, {7, 8, 9, 10, 11, 12}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract elements that occur singly in the given tuple list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/141", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of elements using pancake sort.\n */\nvector<int> pancakeSort(vector<int> nums) {\n", "entry_point": "pancakeSort", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = pancakeSort(vector<int>{15, 79, 25, 38, 69});\n    if (!(compare(x0, {15, 25, 38, 69, 79}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = pancakeSort(vector<int>{98, 12, 54, 36, 85});\n    if (!(compare(x1, {12, 36, 54, 85, 98}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = pancakeSort(vector<int>{41, 42, 32, 12, 23});\n    if (!(compare(x2, {12, 23, 32, 41, 42}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort a list of elements using pancake sort.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/142", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the same pair in three given lists.\n */\nint countSamepair(vector<int> list1, vector<int> list2, vector<int> list3) {\n", "entry_point": "countSamepair", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSamepair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 9}, vector<int>{2, 1, 3, 1, 2, 6, 7, 9});\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSamepair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 8}, vector<int>{2, 1, 3, 1, 2, 6, 7, 8});\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSamepair(vector<int>{1, 2, 3, 4, 2, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 8}, vector<int>{2, 1, 3, 1, 2, 6, 7, 8});\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count the same pair in three given lists.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/144", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of absolute differences in all pairs of the given array.\n */\nint sumPairs(vector<int> arr, int n) {\n", "entry_point": "sumPairs", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumPairs(vector<int>{1, 8, 9, 15, 16}, 5);\n    if (!(compare(x0, 74))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumPairs(vector<int>{1, 2, 3, 4}, 4);\n    if (!(compare(x1, 10))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumPairs(vector<int>{1, 2, 3, 4, 5, 7, 9, 11, 14}, 9);\n    if (!(compare(x2, 188))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of absolute differences in all pairs of the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/145", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum difference between any two elements in a given array.\n */\nint maxAbsDiff(vector<int> arr, int n) {\n", "entry_point": "maxAbsDiff", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxAbsDiff(vector<int>{2, 1, 5, 3}, 4);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxAbsDiff(vector<int>{9, 3, 2, 5, 1}, 5);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxAbsDiff(vector<int>{3, 2, 1}, 3);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the maximum difference between any two elements in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/146", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ascii value of total characters in a string.\n */\nint asciiValueString(string str1) {\n", "entry_point": "asciiValueString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = asciiValueString(string(\"python\"));\n    if (!(compare(x0, 112))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = asciiValueString(string(\"Program\"));\n    if (!(compare(x1, 80))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = asciiValueString(string(\"Language\"));\n    if (!(compare(x2, 76))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the ascii value of total characters in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/147", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum total path sum in the given triangle.\n */\nint maxPathSum(vector<vector<int>> tri, int m, int n) {\n", "entry_point": "maxPathSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxPathSum(vector<vector<int>>{{1, 0, 0}, {4, 8, 0}, {1, 5, 3}}, 2, 2);\n    if (!(compare(x0, 14))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxPathSum(vector<vector<int>>{{13, 0, 0}, {7, 4, 0}, {2, 4, 6}}, 2, 2);\n    if (!(compare(x1, 24))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxPathSum(vector<vector<int>>{{2, 0, 0}, {11, 18, 0}, {21, 25, 33}}, 2, 2);\n    if (!(compare(x2, 53))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum total path sum in the given triangle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/148", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to divide a number into two parts such that the sum of digits is maximum.\n */\nint sumDigitsTwoparts(int n) {\n", "entry_point": "sumDigitsTwoparts", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumDigitsTwoparts(35);\n    if (!(compare(x0, 17))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumDigitsTwoparts(7);\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumDigitsTwoparts(100);\n    if (!(compare(x2, 19))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/149", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n */\nint longestSubseqWithDiffOne(vector<int> arr, int n) {\n", "entry_point": "longestSubseqWithDiffOne", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = longestSubseqWithDiffOne(vector<int>{1, 2, 3, 4, 5, 3, 2}, 7);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = longestSubseqWithDiffOne(vector<int>{10, 9, 4, 5, 4, 8, 6}, 7);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = longestSubseqWithDiffOne(vector<int>{1, 2, 3, 2, 3, 7, 2, 1}, 8);\n    if (!(compare(x2, 7))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/150", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find whether the given number is present in the infinite sequence or not.\n */\nbool doesContainB(int a, int b, int c) {\n", "entry_point": "doesContainB", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = doesContainB(1, 7, 3);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = doesContainB(1, -3, 5);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = doesContainB(3, 2, 5);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find whether the given number is present in the infinite sequence or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/151", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number is co-prime or not.\n */\nbool isCoprime(int x, int y) {\n", "entry_point": "isCoprime", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isCoprime(17, 13);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isCoprime(15, 21);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isCoprime(25, 45);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given number is co-prime or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/152", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using merge sort.\n */\nvector<int> mergeSort(vector<int> x) {\n", "entry_point": "mergeSort", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = mergeSort(vector<int>{3, 4, 2, 6, 5, 7, 1, 9});\n    if (!(compare(x0, {1, 2, 3, 4, 5, 6, 7, 9}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = mergeSort(vector<int>{7, 25, 45, 78, 11, 33, 19});\n    if (!(compare(x1, {7, 11, 19, 25, 33, 45, 78}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = mergeSort(vector<int>{3, 1, 4, 9, 8});\n    if (!(compare(x2, {1, 3, 4, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort the given array by using merge sort.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/153", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the vertex of a parabola.\n */\nvector<double> parabolaVertex(int a, int b, int c) {\n", "entry_point": "parabolaVertex", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<double> x0 = parabolaVertex(5, 3, 2);\n    if (!(compare(x0, {-0.3, 1.55}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<double> x1 = parabolaVertex(9, 8, 4);\n    if (!(compare(x1, {-0.4444444444444444, 2.2222222222222223}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<double> x2 = parabolaVertex(2, 4, 6);\n    if (!(compare(x2, {-1.0, 4.0}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the vertex of a parabola.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/154", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract every specified element from a given two dimensional list.\n */\nvector<int> specifiedElement(vector<vector<int>> nums, int n) {\n", "entry_point": "specifiedElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0);\n    if (!(compare(x0, {1, 4, 7}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2);\n    if (!(compare(x1, {3, 6, 9}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 3);\n    if (!(compare(x2, {2, 2, 5}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract every specified element from a given two dimensional list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/155", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle all even bits of a given number.\n */\nint evenBitToggleNumber(int n) {\n", "entry_point": "evenBitToggleNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = evenBitToggleNumber(10);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = evenBitToggleNumber(20);\n    if (!(compare(x1, 30))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = evenBitToggleNumber(30);\n    if (!(compare(x2, 20))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to toggle all even bits of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/156", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\nvector<vector<int>> tupleIntStr(vector<vector<string>> tupleStr) {\n", "entry_point": "tupleIntStr", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = tupleIntStr(vector<vector<string>>{{string(\"333\"), string(\"33\")}, {string(\"1416\"), string(\"55\")}});\n    if (!(compare(x0, {{333, 33}, {1416, 55}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = tupleIntStr(vector<vector<string>>{{string(\"999\"), string(\"99\")}, {string(\"1000\"), string(\"500\")}});\n    if (!(compare(x1, {{999, 99}, {1000, 500}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = tupleIntStr(vector<vector<string>>{{string(\"666\"), string(\"66\")}, {string(\"1500\"), string(\"555\")}});\n    if (!(compare(x2, {{666, 66}, {1500, 555}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert a tuple of string values to a tuple of integer values.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/158", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find k number of operations required to make all elements equal.\n */\nint minOps(vector<int> arr, int n, int k) {\n", "entry_point": "minOps", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minOps(vector<int>{2, 2, 2, 2}, 4, 3);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minOps(vector<int>{4, 2, 6, 8}, 4, 3);\n    if (!(compare(x1, -1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minOps(vector<int>{21, 33, 9, 45, 63}, 5, 6);\n    if (!(compare(x2, 24))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find k number of operations required to make all elements equal.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/159", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print the season for the given month and day.\n */\nstring monthSeason(string month, int days) {\n", "entry_point": "monthSeason", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = monthSeason(string(\"January\"), 4);\n    if (!(compare(x0, string(\"winter\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = monthSeason(string(\"October\"), 28);\n    if (!(compare(x1, string(\"autumn\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = monthSeason(string(\"June\"), 6);\n    if (!(compare(x2, string(\"spring\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to print the season for the given month and day.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/161", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all elements from a given list present in another list.\n */\nvector<int> removeElements(vector<int> list1, vector<int> list2) {\n", "entry_point": "removeElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{2, 4, 6, 8});\n    if (!(compare(x0, {1, 3, 5, 7, 9, 10}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{1, 3, 5, 7});\n    if (!(compare(x1, {2, 4, 6, 8, 9, 10}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{5, 7});\n    if (!(compare(x2, {1, 2, 3, 4, 6, 8, 9, 10}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove all elements from a given list present in another list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/162", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n */\nint sumSeries(int n) {\n", "entry_point": "sumSeries", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumSeries(6);\n    if (!(compare(x0, 12))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumSeries(10);\n    if (!(compare(x1, 30))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumSeries(9);\n    if (!(compare(x2, 25))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/163", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the area of a regular polygon.\n */\ndouble areaPolygon(int s, int l) {\n", "entry_point": "areaPolygon", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = areaPolygon(4, 20);\n    if (!(compare(x0, 400.00000000000006))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = areaPolygon(10, 15);\n    if (!(compare(x1, 1731.1969896610804))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = areaPolygon(9, 7);\n    if (!(compare(x2, 302.90938549487214))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the area of a regular polygon.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/164", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the sum of divisors are same or not.\n */\nbool areequivalent(int num1, int num2) {\n", "entry_point": "areequivalent", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = areequivalent(36, 57);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = areequivalent(2, 4);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = areequivalent(23, 47);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the sum of divisors are same or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/165", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n */\nint countCharPosition(string str1) {\n", "entry_point": "countCharPosition", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countCharPosition(string(\"xbcefg\"));\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countCharPosition(string(\"ABcED\"));\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countCharPosition(string(\"AbgdeF\"));\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/166", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the pairs with xor as an even number.\n */\nint findEvenPair(vector<int> a, int n) {\n", "entry_point": "findEvenPair", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findEvenPair(vector<int>{5, 4, 7, 2, 1}, 5);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findEvenPair(vector<int>{7, 2, 8, 1, 0, 5, 11}, 7);\n    if (!(compare(x1, 9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findEvenPair(vector<int>{1, 2, 3}, 3);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the pairs with xor as an even number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/167", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find smallest power of 2 greater than or equal to n.\n */\nint nextPowerOf2(int n) {\n", "entry_point": "nextPowerOf2", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = nextPowerOf2(0);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = nextPowerOf2(5);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = nextPowerOf2(17);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find smallest power of 2 greater than or equal to n.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/168", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of a number in a given array.\n */\nint frequency(vector<int> a, int x) {\n", "entry_point": "frequency", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = frequency(vector<int>{1, 2, 3}, 4);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = frequency(vector<int>{1, 2, 2, 3, 3, 3, 4}, 3);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = frequency(vector<int>{0, 1, 2, 3, 1, 2}, 1);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the frequency of a number in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/169", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the nth pell number.\n */\nint getPell(int n) {\n", "entry_point": "getPell", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getPell(4);\n    if (!(compare(x0, 12))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getPell(7);\n    if (!(compare(x1, 169))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getPell(8);\n    if (!(compare(x2, 408))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the nth pell number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/170", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sum of the numbers in a list between the indices of a specified range.\n */\nint sumRangeList(vector<int> list1, int m, int n) {\n", "entry_point": "sumRangeList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 8, 10);\n    if (!(compare(x0, 29))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 5, 7);\n    if (!(compare(x1, 16))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 7, 10);\n    if (!(compare(x2, 38))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/171", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a pentagon.\n */\nint perimeterPentagon(int a) {\n", "entry_point": "perimeterPentagon", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = perimeterPentagon(5);\n    if (!(compare(x0, 25))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = perimeterPentagon(10);\n    if (!(compare(x1, 50))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = perimeterPentagon(15);\n    if (!(compare(x2, 75))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the perimeter of a pentagon.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/172", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n */\nint countOccurance(string s) {\n", "entry_point": "countOccurance", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countOccurance(string(\"letstdlenstdporstd\"));\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countOccurance(string(\"truststdsolensporsd\"));\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countOccurance(string(\"makestdsostdworthit\"));\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/173", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove everything except alphanumeric characters from a string.\n */\nstring removeSplchar(string text) {\n", "entry_point": "removeSplchar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeSplchar(string(\"python  @#&^%$*program123\"));\n    if (!(compare(x0, string(\"pythonprogram123\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeSplchar(string(\"python %^$@!^&*()  programming24%$^^()    language\"));\n    if (!(compare(x1, string(\"pythonprogramming24language\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeSplchar(string(\"python   ^%&^()(+_)(_^&67)                  program\"));\n    if (!(compare(x2, string(\"python67program\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove everything except alphanumeric characters from a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/175", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to verify validity of a string of parentheses.\n */\nbool isValidParenthese(string str1) {\n", "entry_point": "isValidParenthese", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isValidParenthese(string(\"(){}[]\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isValidParenthese(string(\"()[{)}\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isValidParenthese(string(\"()\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to verify validity of a string of parentheses.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/176", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a triangle.\n */\nint perimeterTriangle(int a, int b, int c) {\n", "entry_point": "perimeterTriangle", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = perimeterTriangle(10, 20, 30);\n    if (!(compare(x0, 60))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = perimeterTriangle(3, 4, 5);\n    if (!(compare(x1, 12))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = perimeterTriangle(25, 35, 45);\n    if (!(compare(x2, 105))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the perimeter of a triangle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/177", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find two distinct numbers such that their lcm lies within the given range.\n */\nvector<int> answer(int l, int r) {\n", "entry_point": "answer", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = answer(3, 8);\n    if (!(compare(x0, {3, 6}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = answer(2, 6);\n    if (!(compare(x1, {2, 4}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = answer(1, 3);\n    if (!(compare(x2, {1, 2}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find two distinct numbers such that their lcm lies within the given range.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/178", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search some literals strings in a string.\n */\nstring stringLiterals(vector<string> patterns, string text) {\n", "entry_point": "stringLiterals", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = stringLiterals(vector<string>{string(\"language\")}, string(\"python language\"));\n    if (!(compare(x0, string(\"Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = stringLiterals(vector<string>{string(\"program\")}, string(\"python language\"));\n    if (!(compare(x1, string(\"Not Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = stringLiterals(vector<string>{string(\"python\")}, string(\"programming language\"));\n    if (!(compare(x2, string(\"Not Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to search some literals strings in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/179", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find if the given number is a keith number or not.\n */\nbool isNumKeith(int x) {\n", "entry_point": "isNumKeith", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isNumKeith(14);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isNumKeith(12);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isNumKeith(197);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find if the given number is a keith number or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/181", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest common prefix in the given set of strings.\n */\nstring commonPrefix(vector<string> arr, int n) {\n", "entry_point": "commonPrefix", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = commonPrefix(vector<string>{string(\"tablets\"), string(\"tables\"), string(\"taxi\"), string(\"tamarind\")}, 4);\n    if (!(compare(x0, string(\"ta\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = commonPrefix(vector<string>{string(\"apples\"), string(\"ape\"), string(\"april\")}, 3);\n    if (!(compare(x1, string(\"ap\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = commonPrefix(vector<string>{string(\"teens\"), string(\"teenager\"), string(\"teenmar\")}, 3);\n    if (!(compare(x2, string(\"teen\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the longest common prefix in the given set of strings.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/183", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count all the distinct pairs having a difference of k in any array.\n */\nint countPairs(vector<int> arr, int n, int k) {\n", "entry_point": "countPairs", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countPairs(vector<int>{1, 5, 3, 4, 2}, 5, 3);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countPairs(vector<int>{8, 12, 16, 4, 0, 20}, 6, 4);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countPairs(vector<int>{2, 4, 1, 3, 4}, 5, 2);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count all the distinct pairs having a difference of k in any array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/184", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all the values in a list that are greater than a specified number.\n */\nbool greaterSpecificnum(vector<int> list, int num) {\n", "entry_point": "greaterSpecificnum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = greaterSpecificnum(vector<int>{220, 330, 500}, 200);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = greaterSpecificnum(vector<int>{12, 17, 21}, 20);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = greaterSpecificnum(vector<int>{1, 2, 3, 4}, 10);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find all the values in a list that are greater than a specified number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/185", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the focus of a parabola.\n */\nvector<double> parabolaFocus(int a, int b, int c) {\n", "entry_point": "parabolaFocus", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<double> x0 = parabolaFocus(5, 3, 2);\n    if (!(compare(x0, {-0.3, 1.6}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<double> x1 = parabolaFocus(9, 8, 4);\n    if (!(compare(x1, {-0.4444444444444444, 2.25}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<double> x2 = parabolaFocus(2, 4, 6);\n    if (!(compare(x2, {-1.0, 4.125}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the focus of a parabola.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/186", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search some literals strings in a string by using regex.\n */\nstring checkLiterals(string text, vector<string> patterns) {\n", "entry_point": "checkLiterals", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"fox\")});\n    if (!(compare(x0, string(\"Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"horse\")});\n    if (!(compare(x1, string(\"Not Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"lazy\")});\n    if (!(compare(x2, string(\"Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to search some literals strings in a string by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/187", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest common subsequence for the given two sequences.\n */\nint longestCommonSubsequence(string x, string y, int m, int n) {\n", "entry_point": "longestCommonSubsequence", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = longestCommonSubsequence(string(\"AGGTAB\"), string(\"GXTXAYB\"), 6, 7);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = longestCommonSubsequence(string(\"ABCDGH\"), string(\"AEDFHR\"), 6, 6);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = longestCommonSubsequence(string(\"AXYT\"), string(\"AYZX\"), 4, 4);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the longest common subsequence for the given two sequences.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/188", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented by product of two squares or not.\n */\nbool prodSquare(int n) {\n", "entry_point": "prodSquare", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = prodSquare(25);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = prodSquare(30);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = prodSquare(16);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given number can be represented by product of two squares or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/189", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first missing positive number.\n */\nint firstMissingPositive(vector<int> arr, int n) {\n", "entry_point": "firstMissingPositive", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = firstMissingPositive(vector<int>{1, 2, 3, -1, 5}, 5);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = firstMissingPositive(vector<int>{0, -1, -2, 1, 5, 8}, 6);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = firstMissingPositive(vector<int>{0, 1, 2, 5, -8}, 5);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the first missing positive number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/190", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of integral co-ordinates that lie inside a square.\n */\nint countIntgralPoints(int x1, int y1, int x2, int y2) {\n", "entry_point": "countIntgralPoints", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countIntgralPoints(1, 1, 4, 4);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countIntgralPoints(1, 2, 1, 2);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countIntgralPoints(4, 2, 6, 4);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the number of integral co-ordinates that lie inside a square.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/191", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month name contains 30 days or not.\n */\nbool checkMonthnumber(string monthname3) {\n", "entry_point": "checkMonthnumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkMonthnumber(string(\"February\"));\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkMonthnumber(string(\"June\"));\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkMonthnumber(string(\"April\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether the given month name contains 30 days or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/192", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether a string has atleast one letter and one number.\n */\nbool checkString(string str) {\n", "entry_point": "checkString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkString(string(\"thishasboth29\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkString(string(\"python\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether a string has atleast one letter and one number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/193", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove the duplicates from the given tuple.\n */\nvector<int> removeTuple(vector<int> testTup) {\n", "entry_point": "removeTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = removeTuple(vector<int>{1, 3, 5, 2, 3, 5, 1, 1, 3});\n    if (!(compare(x0, {1, 2, 3, 5}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = removeTuple(vector<int>{2, 3, 4, 4, 5, 6, 6, 7, 8, 8});\n    if (!(compare(x1, {2, 3, 4, 5, 6, 7, 8}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = removeTuple(vector<int>{11, 12, 13, 11, 11, 12, 14, 13});\n    if (!(compare(x2, {11, 12, 13, 14}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove the duplicates from the given tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/194", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert octal number to decimal number.\n */\nint octalToDecimal(int n) {\n", "entry_point": "octalToDecimal", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = octalToDecimal(25);\n    if (!(compare(x0, 21))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = octalToDecimal(30);\n    if (!(compare(x1, 24))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = octalToDecimal(40);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to convert octal number to decimal number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/195", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first position of an element in a sorted array.\n */\nint first(vector<int> arr, int x, int n) {\n", "entry_point": "first", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = first(vector<int>{1, 2, 3, 4, 5, 6, 6}, 6, 6);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = first(vector<int>{1, 2, 2, 2, 3, 2, 2, 4, 2}, 2, 9);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = first(vector<int>{1, 2, 3}, 1, 3);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the first position of an element in a sorted array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/196", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all the tuples with length k.\n */\nvector<vector<int>> removeTuples(vector<vector<int>> testList, int k) {\n", "entry_point": "removeTuples", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = removeTuples(vector<vector<int>>{{4, 5}, {4}, {8, 6, 7}, {1}, {3, 4, 6, 7}}, 1);\n    if (!(compare(x0, {{4, 5}, {8, 6, 7}, {3, 4, 6, 7}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = removeTuples(vector<vector<int>>{{4, 5}, {4, 5}, {6, 7}, {1, 2, 3}, {3, 4, 6, 7}}, 2);\n    if (!(compare(x1, {{1, 2, 3}, {3, 4, 6, 7}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = removeTuples(vector<vector<int>>{{1, 4, 4}, {4, 3}, {8, 6, 7}, {1}, {3, 6, 7}}, 3);\n    if (!(compare(x2, {{4, 3}, {1}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove all the tuples with length k.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/197", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the exponentiation of the given two tuples.\n */\nvector<int> findExponentio(vector<int> testTup1, vector<int> testTup2) {\n", "entry_point": "findExponentio", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = findExponentio(vector<int>{10, 4, 5, 6}, vector<int>{5, 6, 7, 5});\n    if (!(compare(x0, {100000, 4096, 78125, 7776}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = findExponentio(vector<int>{11, 5, 6, 7}, vector<int>{6, 7, 8, 6});\n    if (!(compare(x1, {1771561, 78125, 1679616, 117649}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = findExponentio(vector<int>{12, 6, 7, 8}, vector<int>{7, 8, 9, 7});\n    if (!(compare(x2, {35831808, 1679616, 40353607, 2097152}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to perform the exponentiation of the given two tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/198", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest triangle that can be inscribed in an ellipse.\n */\ndouble largestTriangle(int a, int b) {\n", "entry_point": "largestTriangle", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = largestTriangle(4, 2);\n    if (!(compare(x0, 10.392304845413264))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = largestTriangle(5, 7);\n    if (!(compare(x1, 4.639421805988064))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = largestTriangle(9, 1);\n    if (!(compare(x2, 105.2220865598093))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/199", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find highest power of 2 less than or equal to given number.\n */\nint highestPowerOf2(int n) {\n", "entry_point": "highestPowerOf2", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = highestPowerOf2(10);\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = highestPowerOf2(19);\n    if (!(compare(x1, 16))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = highestPowerOf2(32);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find highest power of 2 less than or equal to given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/200", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all index positions of the maximum values in a given list.\n */\nvector<int> positionMax(vector<int> list1) {\n", "entry_point": "positionMax", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = positionMax(vector<int>{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54});\n    if (!(compare(x0, {7}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = positionMax(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5});\n    if (!(compare(x1, {7, 8, 9, 10}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = positionMax(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12});\n    if (!(compare(x2, {11}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find all index positions of the maximum values in a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/201", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the elements in a list are same or not.\n */\nbool chklist(vector<string> lst) {\n", "entry_point": "chklist", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = chklist(vector<string>{string(\"one\"), string(\"one\"), string(\"one\")});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = chklist(vector<string>{string(\"one\"), string(\"Two\"), string(\"Three\")});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = chklist(vector<string>{string(\"bigdata\"), string(\"python\"), string(\"Django\")});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the elements in a list are same or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/202", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove even characters in a string.\n */\nstring removeEven(string str1) {\n", "entry_point": "removeEven", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeEven(string(\"python\"));\n    if (!(compare(x0, string(\"pto\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeEven(string(\"program\"));\n    if (!(compare(x1, string(\"porm\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeEven(string(\"language\"));\n    if (!(compare(x2, string(\"lnug\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove even characters in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/203", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the hamming distance between given two integers.\n */\nint hammingDistance(int n1, int n2) {\n", "entry_point": "hammingDistance", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = hammingDistance(4, 8);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = hammingDistance(2, 4);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = hammingDistance(1, 2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the hamming distance between given two integers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/204", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the occurrence of a given character in a string.\n */\nint count(string s, string c) {\n", "entry_point": "count", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = count(string(\"abcc\"), string(\"c\"));\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = count(string(\"ababca\"), string(\"a\"));\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = count(string(\"mnmm0pm\"), string(\"m\"));\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the occurrence of a given character in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/205", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the inversions of tuple elements in the given tuple list.\n */\nvector<int> inversionElements(vector<int> testTup) {\n", "entry_point": "inversionElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = inversionElements(vector<int>{7, 8, 9, 1, 10, 7});\n    if (!(compare(x0, {-8, -9, -10, -2, -11, -8}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = inversionElements(vector<int>{2, 4, 5, 6, 1, 7});\n    if (!(compare(x1, {-3, -5, -6, -7, -2, -8}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = inversionElements(vector<int>{8, 9, 11, 14, 12, 13});\n    if (!(compare(x2, {-9, -10, -12, -15, -13, -14}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the inversions of tuple elements in the given tuple list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/206", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the adjacent element concatenation in the given tuples.\n */\nvector<string> concatenateElements(vector<string> testTup) {\n", "entry_point": "concatenateElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = concatenateElements(vector<string>{string(\"DSP \"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"UTS\")});\n    if (!(compare(x0, {string(\"DSP IS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL UTS\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = concatenateElements(vector<string>{string(\"RES \"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"QESR\")});\n    if (!(compare(x1, {string(\"RES IS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL QESR\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = concatenateElements(vector<string>{string(\"MSAM\"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"SKD\")});\n    if (!(compare(x2, {string(\"MSAMIS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL SKD\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to perform the adjacent element concatenation in the given tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/207", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n */\nint findLongestRepeatingSubseq(string str) {\n", "entry_point": "findLongestRepeatingSubseq", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findLongestRepeatingSubseq(string(\"AABEBCDD\"));\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findLongestRepeatingSubseq(string(\"aabb\"));\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findLongestRepeatingSubseq(string(\"aab\"));\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/208", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check the given decimal with a precision of 2 by using regex.\n */\nbool isDecimal(string num) {\n", "entry_point": "isDecimal", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isDecimal(string(\"123.11\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isDecimal(string(\"0.21\"));\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isDecimal(string(\"123.1214\"));\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check the given decimal with a precision of 2 by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/209", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to delete the smallest element from the given heap and then insert a new item.\n */\nvector<int> heapReplace(vector<int> heap, int a) {\n", "entry_point": "heapReplace", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = heapReplace(vector<int>{25, 44, 68, 21, 39, 23, 89}, 21);\n    if (!(compare(x0, {21, 25, 23, 44, 39, 68, 89}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = heapReplace(vector<int>{25, 44, 68, 21, 39, 23, 89}, 110);\n    if (!(compare(x1, {23, 25, 68, 44, 39, 110, 89}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = heapReplace(vector<int>{25, 44, 68, 21, 39, 23, 89}, 500);\n    if (!(compare(x2, {23, 25, 68, 44, 39, 500, 89}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to delete the smallest element from the given heap and then insert a new item.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/210", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n */\nbool isAllowedSpecificChar(string str) {\n", "entry_point": "isAllowedSpecificChar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isAllowedSpecificChar(string(\"ABCDEFabcdef123450\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isAllowedSpecificChar(string(\"*&%@#!}{\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isAllowedSpecificChar(string(\"HELLOhowareyou98765\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/211", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count numbers whose oth and nth bits are set.\n */\nint countNum(int n) {\n", "entry_point": "countNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countNum(2);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countNum(3);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countNum(1);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count numbers whose oth and nth bits are set.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/212", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fourth power of n natural numbers.\n */\nint fourthPowerSum(int n) {\n", "entry_point": "fourthPowerSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = fourthPowerSum(2);\n    if (!(compare(x0, 17))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = fourthPowerSum(4);\n    if (!(compare(x1, 354))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = fourthPowerSum(6);\n    if (!(compare(x2, 2275))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of fourth power of n natural numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/213", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the concatenation of two string tuples.\n */\nvector<string> concatenateStrings(vector<string> testTup1, vector<string> testTup2) {\n", "entry_point": "concatenateStrings", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = concatenateStrings(vector<string>{string(\"Manjeet\"), string(\"Nikhil\"), string(\"Akshat\")}, vector<string>{string(\" Singh\"), string(\" Meherwal\"), string(\" Garg\")});\n    if (!(compare(x0, {string(\"Manjeet Singh\"), string(\"Nikhil Meherwal\"), string(\"Akshat Garg\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = concatenateStrings(vector<string>{string(\"Shaik\"), string(\"Ayesha\"), string(\"Sanya\")}, vector<string>{string(\" Dawood\"), string(\" Begum\"), string(\" Singh\")});\n    if (!(compare(x1, {string(\"Shaik Dawood\"), string(\"Ayesha Begum\"), string(\"Sanya Singh\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = concatenateStrings(vector<string>{string(\"Harpreet\"), string(\"Priyanka\"), string(\"Muskan\")}, vector<string>{string(\"Kour\"), string(\" Agarwal\"), string(\"Sethi\")});\n    if (!(compare(x2, {string(\"HarpreetKour\"), string(\"Priyanka Agarwal\"), string(\"MuskanSethi\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to perform the concatenation of two string tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/214", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert radians to degrees.\n */\ndouble degreeRadian(int radian) {\n", "entry_point": "degreeRadian", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = degreeRadian(90);\n    if (!(compare(x0, 5156.620156177409))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = degreeRadian(60);\n    if (!(compare(x1, 3437.746770784939))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = degreeRadian(120);\n    if (!(compare(x2, 6875.493541569878))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert radians to degrees.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/218", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum operations required to make two numbers equal.\n */\nint minOperations(int a, int b) {\n", "entry_point": "minOperations", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minOperations(2, 4);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minOperations(4, 10);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minOperations(1, 4);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the minimum operations required to make two numbers equal.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/219", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract maximum and minimum k elements in the given tuple.\n */\nvector<int> extractMinMax(vector<int> testTup, int k) {\n", "entry_point": "extractMinMax", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = extractMinMax(vector<int>{5, 20, 3, 7, 6, 8}, 2);\n    if (!(compare(x0, {3, 5, 8, 20}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = extractMinMax(vector<int>{4, 5, 6, 1, 2, 7}, 3);\n    if (!(compare(x1, {1, 2, 4, 5, 6, 7}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = extractMinMax(vector<int>{2, 3, 4, 8, 9, 11, 7}, 4);\n    if (!(compare(x2, {2, 3, 4, 7, 8, 9, 11}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract maximum and minimum k elements in the given tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/220", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n */\nstring replaceMaxSpecialchar(string text, int n) {\n", "entry_point": "replaceMaxSpecialchar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = replaceMaxSpecialchar(string(\"Python language, Programming language.\"), 2);\n    if (!(compare(x0, string(\"Python:language: Programming language.\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = replaceMaxSpecialchar(string(\"a b c,d e f\"), 3);\n    if (!(compare(x1, string(\"a:b:c:d e f\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = replaceMaxSpecialchar(string(\"ram reshma,ram rahim\"), 1);\n    if (!(compare(x2, string(\"ram:reshma,ram rahim\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/221", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first even number in a given list of numbers.\n */\nint firstEven(vector<int> nums) {\n", "entry_point": "firstEven", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = firstEven(vector<int>{2, 3, 4});\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = firstEven(vector<int>{5, 6, 7});\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the first even number in a given list of numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/222", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if all the elements in tuple have same data type or not.\n */\nbool checkType(vector<int> testTuple) {\n", "entry_point": "checkType", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkType(vector<int>{5, 6, 7, 3, 5, 6});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x2 = checkType(vector<int>{3, 2, 1, 4, 5});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if all the elements in tuple have same data type or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/223", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check for majority element in the given sorted array.\n */\nbool isMajority(vector<int> arr, int n, int x) {\n", "entry_point": "isMajority", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isMajority(vector<int>{1, 2, 3, 3, 3, 3, 10}, 7, 3);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isMajority(vector<int>{1, 1, 2, 4, 4, 4, 6, 6}, 8, 4);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isMajority(vector<int>{1, 1, 1, 2, 2}, 5, 1);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check for majority element in the given sorted array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/224", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count set bits of a given number.\n */\nint countSetBits(int n) {\n", "entry_point": "countSetBits", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSetBits(2);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSetBits(4);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSetBits(6);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count set bits of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/225", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum element in a sorted and rotated array.\n */\nint findMin(vector<int> arr, int low, int high) {\n", "entry_point": "findMin", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMin(vector<int>{1, 2, 3, 4, 5}, 0, 4);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMin(vector<int>{4, 6, 8}, 0, 2);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMin(vector<int>{2, 3, 5, 7, 9}, 0, 4);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the minimum element in a sorted and rotated array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/226", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove the characters which have odd index values of a given string.\n */\nstring oddValuesString(string str) {\n", "entry_point": "oddValuesString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = oddValuesString(string(\"abcdef\"));\n    if (!(compare(x0, string(\"ace\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = oddValuesString(string(\"python\"));\n    if (!(compare(x1, string(\"pto\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = oddValuesString(string(\"data\"));\n    if (!(compare(x2, string(\"dt\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to remove the characters which have odd index values of a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/227", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find minimum of three numbers.\n */\nint minOfThree(int a, int b, int c) {\n", "entry_point": "minOfThree", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minOfThree(10, 20, 0);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minOfThree(19, 15, 18);\n    if (!(compare(x1, 15))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minOfThree(-10, -20, -30);\n    if (!(compare(x2, -30))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find minimum of three numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/228", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the bits are unset in the given range or not.\n */\nbool allBitsSetInTheGivenRange(int n, int l, int r) {\n", "entry_point": "allBitsSetInTheGivenRange", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = allBitsSetInTheGivenRange(4, 1, 2);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = allBitsSetInTheGivenRange(17, 2, 4);\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = allBitsSetInTheGivenRange(39, 4, 6);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether all the bits are unset in the given range or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/229", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n */\nvector<int> reArrangeArray(vector<int> arr, int n) {\n", "entry_point": "reArrangeArray", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = reArrangeArray(vector<int>{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9);\n    if (!(compare(x0, {-1, -3, -7, 4, 5, 6, 2, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = reArrangeArray(vector<int>{12, -14, -26, 13, 15}, 5);\n    if (!(compare(x1, {-14, -26, 12, 13, 15}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = reArrangeArray(vector<int>{10, 24, 36, -42, -39, -78, 85}, 7);\n    if (!(compare(x2, {-42, -39, -78, 10, 24, 36, 85}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/230", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace blank spaces with any character in a string.\n */\nstring replaceBlank(string str1, string chr) {\n", "entry_point": "replaceBlank", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = replaceBlank(string(\"hello people\"), string(\"@\"));\n    if (!(compare(x0, string(\"hello@people\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = replaceBlank(string(\"python program language\"), string(\"$\"));\n    if (!(compare(x1, string(\"python$program$language\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = replaceBlank(string(\"blank space\"), string(\"-\"));\n    if (!(compare(x2, string(\"blank-space\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to replace blank spaces with any character in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/231", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum in the given right triangle of numbers.\n */\nint maxSum(vector<vector<int>> tri, int n) {\n", "entry_point": "maxSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSum(vector<vector<int>>{{1}, {2, 1}, {3, 3, 2}}, 3);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSum(vector<vector<int>>{{1}, {1, 2}, {4, 1, 12}}, 3);\n    if (!(compare(x1, 15))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSum(vector<vector<int>>{{2}, {3, 2}, {13, 23, 12}}, 3);\n    if (!(compare(x2, 28))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum sum in the given right triangle of numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/232", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the n largest items from a dataset.\n */\nvector<int> largNnum(vector<int> list1, int n) {\n", "entry_point": "largNnum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 2);\n    if (!(compare(x0, {100, 90}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 5);\n    if (!(compare(x1, {100, 90, 80, 70, 60}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 3);\n    if (!(compare(x2, {100, 90, 80}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to get the n largest items from a dataset.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/233", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of a cylinder.\n */\ndouble lateralsufaceCylinder(int r, int h) {\n", "entry_point": "lateralsufaceCylinder", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = lateralsufaceCylinder(10, 5);\n    if (!(compare(x0, 314.15000000000003))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = lateralsufaceCylinder(4, 5);\n    if (!(compare(x1, 125.66000000000001))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = lateralsufaceCylinder(4, 10);\n    if (!(compare(x2, 251.32000000000002))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the lateral surface area of a cylinder.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/234", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cube.\n */\nint volumeCube(int l) {\n", "entry_point": "volumeCube", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = volumeCube(3);\n    if (!(compare(x0, 27))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = volumeCube(2);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = volumeCube(5);\n    if (!(compare(x2, 125))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the volume of a cube.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/235", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set all even bits of a given number.\n */\nint evenBitSetNumber(int n) {\n", "entry_point": "evenBitSetNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = evenBitSetNumber(10);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = evenBitSetNumber(20);\n    if (!(compare(x1, 30))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = evenBitSetNumber(30);\n    if (!(compare(x2, 30))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to set all even bits of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/236", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\nint noOfTriangle(int n, int k) {\n", "entry_point": "noOfTriangle", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = noOfTriangle(4, 2);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = noOfTriangle(4, 3);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = noOfTriangle(1, 3);\n    if (!(compare(x2, -1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/238", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of non-empty substrings of a given string.\n */\nint numberOfSubstrings(string str) {\n", "entry_point": "numberOfSubstrings", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = numberOfSubstrings(string(\"abc\"));\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = numberOfSubstrings(string(\"abcd\"));\n    if (!(compare(x1, 10))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = numberOfSubstrings(string(\"abcde\"));\n    if (!(compare(x2, 15))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count number of non-empty substrings of a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/239", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n */\nint getTotalNumberOfSequences(int m, int n) {\n", "entry_point": "getTotalNumberOfSequences", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getTotalNumberOfSequences(10, 4);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getTotalNumberOfSequences(5, 2);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getTotalNumberOfSequences(16, 3);\n    if (!(compare(x2, 84))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/241", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to generate a 3d array having each element as '*'.\n */\nvector<vector<vector<string>>> array3d(int m, int n, int o) {\n", "entry_point": "array3d", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<vector<string>>> x0 = array3d(6, 4, 3);\n    if (!(compare(x0, {{{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<vector<string>>> x1 = array3d(5, 3, 4);\n    if (!(compare(x1, {{{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<vector<string>>> x2 = array3d(1, 2, 3);\n    if (!(compare(x2, {{{string(\"*\")}, {string(\"*\")}}, {{string(\"*\")}, {string(\"*\")}}, {{string(\"*\")}, {string(\"*\")}}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to generate a 3d array having each element as '*'.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/242", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count total characters in a string.\n */\nint countCharac(string str1) {\n", "entry_point": "countCharac", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countCharac(string(\"python programming\"));\n    if (!(compare(x0, 18))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countCharac(string(\"language\"));\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countCharac(string(\"words\"));\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count total characters in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/244", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the next perfect square greater than a given number.\n */\nint nextPerfectSquare(int n) {\n", "entry_point": "nextPerfectSquare", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = nextPerfectSquare(35);\n    if (!(compare(x0, 36))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = nextPerfectSquare(6);\n    if (!(compare(x1, 9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = nextPerfectSquare(9);\n    if (!(compare(x2, 16))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the next perfect square greater than a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/245", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n */\nint maxSum(vector<int> arr, int n) {\n", "entry_point": "maxSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSum(vector<int>{1, 15, 51, 45, 33, 100, 12, 18, 9}, 9);\n    if (!(compare(x0, 194))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSum(vector<int>{80, 60, 30, 40, 20, 10}, 6);\n    if (!(compare(x1, 210))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSum(vector<int>{2, 3, 14, 16, 21, 23, 29, 30}, 8);\n    if (!(compare(x2, 138))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/246", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function for computing square roots using the babylonian method.\n */\ndouble babylonianSquareroot(int number) {\n", "entry_point": "babylonianSquareroot", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = babylonianSquareroot(10);\n    if (!(compare(x0, 3.162277660168379))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = babylonianSquareroot(2);\n    if (!(compare(x1, 1.414213562373095))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = babylonianSquareroot(9);\n    if (!(compare(x2, 3.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function for computing square roots using the babylonian method.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/247", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest palindromic subsequence in the given string.\n */\nint lps(string str) {\n", "entry_point": "lps", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = lps(string(\"TENS FOR TENS\"));\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = lps(string(\"CARDIO FOR CARDS\"));\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = lps(string(\"PART OF THE JOURNEY IS PART\"));\n    if (!(compare(x2, 9))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the longest palindromic subsequence in the given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/249", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the intersection of two arrays using lambda function.\n */\nvector<int> intersectionArray(vector<int> arrayNums1, vector<int> arrayNums2) {\n", "entry_point": "intersectionArray", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{1, 2, 4, 8, 9});\n    if (!(compare(x0, {1, 2, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{3, 5, 7, 9});\n    if (!(compare(x1, {3, 5, 7, 9}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{10, 20, 30, 40});\n    if (!(compare(x2, {10}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the intersection of two arrays using lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/250", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the occcurences of an element in a tuple.\n */\nint countX(vector<int> tup, int x) {\n", "entry_point": "countX", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 4);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 10);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 8);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the occcurences of an element in a tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/251", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to insert an element before each element of a list.\n */\nvector<string> insertElement(vector<string> list, string element) {\n", "entry_point": "insertElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = insertElement(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Black\")}, string(\"c\"));\n    if (!(compare(x0, {string(\"c\"), string(\"Red\"), string(\"c\"), string(\"Green\"), string(\"c\"), string(\"Black\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = insertElement(vector<string>{string(\"python\"), string(\"java\")}, string(\"program\"));\n    if (!(compare(x1, {string(\"program\"), string(\"python\"), string(\"program\"), string(\"java\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = insertElement(vector<string>{string(\"happy\"), string(\"sad\")}, string(\"laugh\"));\n    if (!(compare(x2, {string(\"laugh\"), string(\"happy\"), string(\"laugh\"), string(\"sad\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to insert an element before each element of a list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/252", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert complex numbers to polar coordinates.\n */\nvector<double> convert(int numbers) {\n", "entry_point": "convert", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<double> x0 = convert(1);\n    if (!(compare(x0, {1.0, 0.0}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<double> x1 = convert(4);\n    if (!(compare(x1, {4.0, 0.0}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<double> x2 = convert(5);\n    if (!(compare(x2, {5.0, 0.0}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to convert complex numbers to polar coordinates.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/253", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count integers from a given list.\n */\nint countInteger(vector<int> list1) {\n", "entry_point": "countInteger", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x1 = countInteger(vector<int>{1, 2, 3});\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count integers from a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/254", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all words starting with 'a' or 'e' in a given string.\n */\nvector<string> wordsAe(string text) {\n", "entry_point": "wordsAe", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = wordsAe(string(\"python programe\"));\n    if (!(compare(x0, {string(\"ame\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = wordsAe(string(\"python programe language\"));\n    if (!(compare(x1, {string(\"ame\"), string(\"anguage\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = wordsAe(string(\"assert statement\"));\n    if (!(compare(x2, {string(\"assert\"), string(\"atement\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find all words starting with 'a' or 'e' in a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/255", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n */\nvector<vector<string>> combinationsColors(vector<string> l, int n) {\n", "entry_point": "combinationsColors", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<string>> x0 = combinationsColors(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\")}, 1);\n    if (!(compare(x0, {{string(\"Red\")}, {string(\"Green\")}, {string(\"Blue\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<string>> x1 = combinationsColors(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\")}, 2);\n    if (!(compare(x1, {{string(\"Red\"), string(\"Red\")}, {string(\"Red\"), string(\"Green\")}, {string(\"Red\"), string(\"Blue\")}, {string(\"Green\"), string(\"Green\")}, {string(\"Green\"), string(\"Blue\")}, {string(\"Blue\"), string(\"Blue\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<string>> x2 = combinationsColors(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\")}, 3);\n    if (!(compare(x2, {{string(\"Red\"), string(\"Red\"), string(\"Red\")}, {string(\"Red\"), string(\"Red\"), string(\"Green\")}, {string(\"Red\"), string(\"Red\"), string(\"Blue\")}, {string(\"Red\"), string(\"Green\"), string(\"Green\")}, {string(\"Red\"), string(\"Green\"), string(\"Blue\")}, {string(\"Red\"), string(\"Blue\"), string(\"Blue\")}, {string(\"Green\"), string(\"Green\"), string(\"Green\")}, {string(\"Green\"), string(\"Green\"), string(\"Blue\")}, {string(\"Green\"), string(\"Blue\"), string(\"Blue\")}, {string(\"Blue\"), string(\"Blue\"), string(\"Blue\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/256", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of prime numbers less than a given non-negative number.\n */\nint countPrimesNums(int n) {\n", "entry_point": "countPrimesNums", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countPrimesNums(5);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countPrimesNums(10);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countPrimesNums(100);\n    if (!(compare(x2, 25))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the number of prime numbers less than a given non-negative number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/257", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to swap two numbers.\n */\nvector<int> swapNumbers(int a, int b) {\n", "entry_point": "swapNumbers", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = swapNumbers(10, 20);\n    if (!(compare(x0, {20, 10}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = swapNumbers(15, 17);\n    if (!(compare(x1, {17, 15}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = swapNumbers(100, 200);\n    if (!(compare(x2, {200, 100}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to swap two numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/258", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find number of odd elements in the given list using lambda function.\n */\nint countOdd(vector<int> arrayNums) {\n", "entry_point": "countOdd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countOdd(vector<int>{1, 2, 3, 5, 7, 8, 10});\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countOdd(vector<int>{10, 15, 14, 13, -18, 12, -20});\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countOdd(vector<int>{1, 2, 4, 8, 9});\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find number of odd elements in the given list using lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/259", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to maximize the given two tuples.\n */\nvector<vector<int>> maximizeElements(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\n", "entry_point": "maximizeElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = maximizeElements(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}});\n    if (!(compare(x0, {{6, 7}, {4, 9}, {2, 9}, {7, 10}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = maximizeElements(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}});\n    if (!(compare(x1, {{7, 8}, {5, 10}, {3, 10}, {8, 11}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = maximizeElements(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}});\n    if (!(compare(x2, {{8, 9}, {6, 11}, {4, 11}, {9, 12}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to maximize the given two tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/260", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */\nint newmanPrime(int n) {\n", "entry_point": "newmanPrime", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = newmanPrime(3);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = newmanPrime(4);\n    if (!(compare(x1, 17))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = newmanPrime(5);\n    if (!(compare(x2, 41))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/261", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform mathematical division operation across the given tuples.\n */\nvector<int> divisionElements(vector<int> testTup1, vector<int> testTup2) {\n", "entry_point": "divisionElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = divisionElements(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3});\n    if (!(compare(x0, {2, 2, 2, 3}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = divisionElements(vector<int>{12, 6, 8, 16}, vector<int>{6, 3, 4, 4});\n    if (!(compare(x1, {2, 2, 2, 4}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = divisionElements(vector<int>{20, 14, 36, 18}, vector<int>{5, 7, 6, 9});\n    if (!(compare(x2, {4, 2, 6, 2}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to perform mathematical division operation across the given tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/263", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge two dictionaries.\n */\nunordered_map<string, int> mergeDict(unordered_map<string, int> d1, unordered_map<string, int> d2) {\n", "entry_point": "mergeDict", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<string, int> x0 = mergeDict(unordered_map<string, int>{{string(\"a\"), 100}, {string(\"b\"), 200}}, unordered_map<string, int>{{string(\"x\"), 300}, {string(\"y\"), 200}});\n    if (!(compare(x0, {{string(\"x\"), 300}, {string(\"y\"), 200}, {string(\"a\"), 100}, {string(\"b\"), 200}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<string, int> x1 = mergeDict(unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}}, unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}});\n    if (!(compare(x1, {{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<string, int> x2 = mergeDict(unordered_map<string, int>{{string(\"a\"), 10}, {string(\"b\"), 20}}, unordered_map<string, int>{{string(\"x\"), 30}, {string(\"y\"), 40}});\n    if (!(compare(x2, {{string(\"x\"), 30}, {string(\"y\"), 40}, {string(\"a\"), 10}, {string(\"b\"), 20}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to merge two dictionaries.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/264", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate a dog's age in dog's years.\n */\nint dogAge(int hAge) {\n", "entry_point": "dogAge", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = dogAge(12);\n    if (!(compare(x0, 61))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = dogAge(15);\n    if (!(compare(x1, 73))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = dogAge(24);\n    if (!(compare(x2, 109))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate a dog's age in dog's years.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/266", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of a cube.\n */\nint lateralsurfaceCube(int l) {\n", "entry_point": "lateralsurfaceCube", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = lateralsurfaceCube(5);\n    if (!(compare(x0, 100))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = lateralsurfaceCube(9);\n    if (!(compare(x1, 324))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = lateralsurfaceCube(10);\n    if (!(compare(x2, 400))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the lateral surface area of a cube.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/267", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of squares of first n odd natural numbers.\n */\nint squareSum(int n) {\n", "entry_point": "squareSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = squareSum(2);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = squareSum(3);\n    if (!(compare(x1, 35))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = squareSum(4);\n    if (!(compare(x2, 84))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of squares of first n odd natural numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/268", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th star number.\n */\nint findStarNum(int n) {\n", "entry_point": "findStarNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findStarNum(3);\n    if (!(compare(x0, 37))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findStarNum(4);\n    if (!(compare(x1, 73))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findStarNum(5);\n    if (!(compare(x2, 121))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the n'th star number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/269", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ascii value of a character.\n */\nint asciiValue(string k) {\n", "entry_point": "asciiValue", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = asciiValue(string(\"A\"));\n    if (!(compare(x0, 65))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = asciiValue(string(\"R\"));\n    if (!(compare(x1, 82))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = asciiValue(string(\"S\"));\n    if (!(compare(x2, 83))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the ascii value of a character.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/270", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of even numbers at even positions.\n */\nint sumEvenAndEvenIndex(vector<int> arr, int n) {\n", "entry_point": "sumEvenAndEvenIndex", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumEvenAndEvenIndex(vector<int>{5, 6, 12, 1, 18, 8}, 6);\n    if (!(compare(x0, 30))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumEvenAndEvenIndex(vector<int>{3, 20, 17, 9, 2, 10, 18, 13, 6, 18}, 10);\n    if (!(compare(x1, 26))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumEvenAndEvenIndex(vector<int>{5, 6, 12, 1}, 4);\n    if (!(compare(x2, 12))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of even numbers at even positions.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/271", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fifth power of first n even natural numbers.\n */\nint evenPowerSum(int n) {\n", "entry_point": "evenPowerSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = evenPowerSum(2);\n    if (!(compare(x0, 1056))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = evenPowerSum(3);\n    if (!(compare(x1, 8832))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = evenPowerSum(1);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of fifth power of first n even natural numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/273", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to substract the contents of one tuple with corresponding index of other tuple.\n */\nvector<int> substractElements(vector<int> testTup1, vector<int> testTup2) {\n", "entry_point": "substractElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = substractElements(vector<int>{10, 4, 5}, vector<int>{2, 5, 18});\n    if (!(compare(x0, {8, -1, -13}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = substractElements(vector<int>{11, 2, 3}, vector<int>{24, 45, 16});\n    if (!(compare(x1, {-13, -43, -13}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = substractElements(vector<int>{7, 18, 9}, vector<int>{10, 11, 12});\n    if (!(compare(x2, {-3, 7, -3}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/274", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of even index binomial coefficients.\n */\nint evenBinomialCoeffSum(int n) {\n", "entry_point": "evenBinomialCoeffSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = evenBinomialCoeffSum(4);\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = evenBinomialCoeffSum(6);\n    if (!(compare(x1, 32))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = evenBinomialCoeffSum(2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find sum of even index binomial coefficients.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/275", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the position of the last removed element from the given array.\n */\nint getPosition(vector<int> a, int n, int m) {\n", "entry_point": "getPosition", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getPosition(vector<int>{2, 5, 4}, 3, 2);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getPosition(vector<int>{4, 3}, 2, 2);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getPosition(vector<int>{1, 2, 3, 4}, 4, 1);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the position of the last removed element from the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/276", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cylinder.\n */\ndouble volumeCylinder(int r, int h) {\n", "entry_point": "volumeCylinder", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = volumeCylinder(10, 5);\n    if (!(compare(x0, 1570.7500000000002))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = volumeCylinder(4, 5);\n    if (!(compare(x1, 251.32000000000002))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = volumeCylinder(4, 10);\n    if (!(compare(x2, 502.64000000000004))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the volume of a cylinder.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/277", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter a dictionary based on values.\n */\nunordered_map<string, int> dictFilter(unordered_map<string, int> dict, int n) {\n", "entry_point": "dictFilter", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<string, int> x0 = dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 170);\n    if (!(compare(x0, {{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Pierre Cox\"), 190}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<string, int> x1 = dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 180);\n    if (!(compare(x1, {{string(\"Alden Cantrell\"), 180}, {string(\"Pierre Cox\"), 190}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<string, int> x2 = dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 190);\n    if (!(compare(x2, {{string(\"Pierre Cox\"), 190}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to filter a dictionary based on values.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/279", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth decagonal number.\n */\nint isNumDecagonal(int n) {\n", "entry_point": "isNumDecagonal", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = isNumDecagonal(3);\n    if (!(compare(x0, 27))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = isNumDecagonal(7);\n    if (!(compare(x1, 175))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = isNumDecagonal(10);\n    if (!(compare(x2, 370))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the nth decagonal number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/281", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if the elements of a given list are unique or not.\n */\nbool allUnique(vector<int> testList) {\n", "entry_point": "allUnique", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = allUnique(vector<int>{1, 2, 3});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = allUnique(vector<int>{1, 2, 1, 2});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = allUnique(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check if the elements of a given list are unique or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/282", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to substaract two lists using map and lambda function.\n */\nvector<int> subList(vector<int> nums1, vector<int> nums2) {\n", "entry_point": "subList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = subList(vector<int>{1, 2, 3}, vector<int>{4, 5, 6});\n    if (!(compare(x0, {-3, -3, -3}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = subList(vector<int>{1, 2}, vector<int>{3, 4});\n    if (!(compare(x1, {-2, -2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = subList(vector<int>{90, 120}, vector<int>{50, 70});\n    if (!(compare(x2, {40, 50}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to substaract two lists using map and lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/283", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the frequency of each digit is less than or equal to the digit itself.\n */\nbool validate(int n) {\n", "entry_point": "validate", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = validate(1234);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = validate(51241);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = validate(321);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the frequency of each digit is less than or equal to the digit itself.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/285", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by two to three 'b'.\n */\nstring textMatchTwoThree(string text) {\n", "entry_point": "textMatchTwoThree", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatchTwoThree(string(\"ac\"));\n    if (!(compare(x0, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatchTwoThree(string(\"dc\"));\n    if (!(compare(x1, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatchTwoThree(string(\"abbbba\"));\n    if (!(compare(x2, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function that matches a string that has an a followed by two to three 'b'.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/286", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n */\nint maxSubArraySumRepeated(vector<int> a, int n, int k) {\n", "entry_point": "maxSubArraySumRepeated", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSubArraySumRepeated(vector<int>{10, 20, -30, -1}, 4, 3);\n    if (!(compare(x0, 30))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSubArraySumRepeated(vector<int>{-1, 10, 20}, 3, 2);\n    if (!(compare(x1, 59))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSubArraySumRepeated(vector<int>{-1, -2, -3}, 3, 3);\n    if (!(compare(x2, -1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/287", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of squares of first n even natural numbers.\n */\nint squareSum(int n) {\n", "entry_point": "squareSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = squareSum(2);\n    if (!(compare(x0, 20))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = squareSum(3);\n    if (!(compare(x1, 56))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = squareSum(4);\n    if (!(compare(x2, 120))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of squares of first n even natural numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/288", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count array elements having modular inverse under given prime number p equal to itself.\n */\nint modularInverse(vector<int> arr, int n, int p) {\n", "entry_point": "modularInverse", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = modularInverse(vector<int>{1, 6, 4, 5}, 4, 7);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = modularInverse(vector<int>{1, 3, 8, 12, 12}, 5, 13);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = modularInverse(vector<int>{2, 3, 4, 5}, 4, 6);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/289", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to calculate the number of odd days in a given year.\n */\nint oddDays(int n) {\n", "entry_point": "oddDays", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = oddDays(100);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = oddDays(50);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = oddDays(75);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to calculate the number of odd days in a given year.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/291", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n */\nint countNoOfWays(int n, int k) {\n", "entry_point": "countNoOfWays", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countNoOfWays(2, 4);\n    if (!(compare(x0, 16))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countNoOfWays(3, 2);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countNoOfWays(4, 4);\n    if (!(compare(x2, 228))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/292", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find quotient of two numbers.\n */\nint find(int n, int m) {\n", "entry_point": "find", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = find(10, 3);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = find(4, 2);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = find(20, 5);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find quotient of two numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/295", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to return the sum of all divisors of a number.\n */\nint sumDiv(int number) {\n", "entry_point": "sumDiv", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumDiv(8);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumDiv(12);\n    if (!(compare(x1, 16))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumDiv(7);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to return the sum of all divisors of a number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/296", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count inversions in an array.\n */\nint getInvCount(vector<int> arr, int n) {\n", "entry_point": "getInvCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getInvCount(vector<int>{1, 20, 6, 4, 5}, 5);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getInvCount(vector<int>{1, 2, 1}, 3);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getInvCount(vector<int>{1, 2, 5, 6, 1}, 5);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count inversions in an array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/297", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to flatten a given nested list structure.\n */\nvector<int> flattenList(vector<vector<int>> list1) {\n", "entry_point": "flattenList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x1 = flattenList(vector<vector<int>>{{10, 20}, {40}, {30, 56, 25}, {10, 20}, {33}, {40}});\n    if (!(compare(x1, {10, 20, 40, 30, 56, 25, 10, 20, 33, 40}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = flattenList(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}});\n    if (!(compare(x2, {1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to flatten a given nested list structure.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/300", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n */\ndouble countBinarySeq(int n) {\n", "entry_point": "countBinarySeq", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = countBinarySeq(1);\n    if (!(compare(x0, 2.0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = countBinarySeq(2);\n    if (!(compare(x1, 6.0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = countBinarySeq(3);\n    if (!(compare(x2, 20.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/302", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the most significant bit number which is also a set bit.\n */\nint setBitNumber(int n) {\n", "entry_point": "setBitNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = setBitNumber(6);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = setBitNumber(10);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = setBitNumber(18);\n    if (!(compare(x2, 16))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the most significant bit number which is also a set bit.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/303", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the count of inversion of two types are same or not.\n */\nbool solve(vector<int> a, int n) {\n", "entry_point": "solve", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = solve(vector<int>{1, 0, 2}, 3);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = solve(vector<int>{1, 2, 0}, 3);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = solve(vector<int>{1, 2, 1}, 3);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the count of inversion of two types are same or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/304", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find element at a given index after number of rotations.\n */\nint findElement(vector<int> arr, vector<vector<int>> ranges, int rotations, int index) {\n", "entry_point": "findElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findElement(vector<int>{1, 2, 3, 4, 5}, vector<vector<int>>{{0, 2}, {0, 3}}, 2, 1);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findElement(vector<int>{1, 2, 3, 4}, vector<vector<int>>{{0, 1}, {0, 2}}, 1, 2);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findElement(vector<int>{1, 2, 3, 4, 5, 6}, vector<vector<int>>{{0, 1}, {0, 2}}, 1, 1);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find element at a given index after number of rotations.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/305", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to match two words from a list of words starting with letter 'p'.\n */\nvector<string> startWithp(vector<string> words) {\n", "entry_point": "startWithp", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = startWithp(vector<string>{string(\"Python PHP\"), string(\"Java JavaScript\"), string(\"c c++\")});\n    if (!(compare(x0, {string(\"Python\"), string(\"PHP\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = startWithp(vector<string>{string(\"Python Programming\"), string(\"Java Programming\")});\n    if (!(compare(x1, {string(\"Python\"), string(\"Programming\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = startWithp(vector<string>{string(\"Pqrst Pqr\"), string(\"qrstuv\")});\n    if (!(compare(x2, {string(\"Pqrst\"), string(\"Pqr\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to match two words from a list of words starting with letter 'p'.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/306", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n */\nint maxSumIncreasingSubseq(vector<int> a, int n, int index, int k) {\n", "entry_point": "maxSumIncreasingSubseq", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSumIncreasingSubseq(vector<int>{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6);\n    if (!(compare(x0, 11))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSumIncreasingSubseq(vector<int>{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5);\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSumIncreasingSubseq(vector<int>{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4);\n    if (!(compare(x2, 71))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/308", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the specified number of largest products from two given lists.\n */\nvector<int> largeProduct(vector<int> nums1, vector<int> nums2, int n) {\n", "entry_point": "largeProduct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 3);\n    if (!(compare(x0, {60, 54, 50}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 4);\n    if (!(compare(x1, {60, 54, 50, 48}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 5);\n    if (!(compare(x2, {60, 54, 50, 48, 45}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the specified number of largest products from two given lists.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/309", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum of two numbers.\n */\nint maximum(int a, int b) {\n", "entry_point": "maximum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maximum(5, 10);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maximum(-1, -2);\n    if (!(compare(x1, -1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maximum(9, 7);\n    if (!(compare(x2, 9))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the maximum of two numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/310", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a given string to a tuple.\n */\nvector<string> stringToTuple(string str1) {\n", "entry_point": "stringToTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = stringToTuple(string(\"python 3.0\"));\n    if (!(compare(x0, {string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\"), string(\"3\"), string(\".\"), string(\"0\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = stringToTuple(string(\"item1\"));\n    if (!(compare(x1, {string(\"i\"), string(\"t\"), string(\"e\"), string(\"m\"), string(\"1\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = stringToTuple(string(\"15.10\"));\n    if (!(compare(x2, {string(\"1\"), string(\"5\"), string(\".\"), string(\"1\"), string(\"0\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert a given string to a tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/311", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set the left most unset bit.\n */\nint setLeftMostUnsetBit(int n) {\n", "entry_point": "setLeftMostUnsetBit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = setLeftMostUnsetBit(10);\n    if (!(compare(x0, 14))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = setLeftMostUnsetBit(12);\n    if (!(compare(x1, 14))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = setLeftMostUnsetBit(15);\n    if (!(compare(x2, 15))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to set the left most unset bit.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/312", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cone.\n */\ndouble volumeCone(int r, int h) {\n", "entry_point": "volumeCone", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = volumeCone(5, 12);\n    if (!(compare(x0, 314.15926535897927))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = volumeCone(10, 15);\n    if (!(compare(x1, 1570.7963267948965))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = volumeCone(19, 17);\n    if (!(compare(x2, 6426.651371693521))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the volume of a cone.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/314", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n */\nint maxSumRectangularGrid(vector<vector<int>> grid, int n) {\n", "entry_point": "maxSumRectangularGrid", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSumRectangularGrid(vector<vector<int>>{{1, 4, 5}, {2, 0, 0}}, 3);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSumRectangularGrid(vector<vector<int>>{{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}}, 5);\n    if (!(compare(x1, 24))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSumRectangularGrid(vector<vector<int>>{{7, 9, 11, 15, 19}, {21, 25, 28, 31, 32}}, 5);\n    if (!(compare(x2, 81))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/315", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first maximum length of even word.\n */\nstring findMaxLenEven(string str) {\n", "entry_point": "findMaxLenEven", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = findMaxLenEven(string(\"python language\"));\n    if (!(compare(x0, string(\"language\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = findMaxLenEven(string(\"maximum even length\"));\n    if (!(compare(x1, string(\"length\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = findMaxLenEven(string(\"eve\"));\n    if (!(compare(x2, string(\"-1\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the first maximum length of even word.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/316", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the index of the last occurrence of a given number in a sorted array.\n */\nint findLastOccurrence(vector<int> a, int x) {\n", "entry_point": "findLastOccurrence", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findLastOccurrence(vector<int>{2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findLastOccurrence(vector<int>{2, 3, 5, 8, 6, 6, 8, 9, 9, 9}, 9);\n    if (!(compare(x1, 9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findLastOccurrence(vector<int>{2, 2, 1, 5, 6, 6, 6, 9, 9, 9}, 6);\n    if (!(compare(x2, 6))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/318", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum volume of a cuboid with given sum of sides.\n */\nint maxVolume(int s) {\n", "entry_point": "maxVolume", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxVolume(8);\n    if (!(compare(x0, 18))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxVolume(4);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxVolume(1);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the maximum volume of a cuboid with given sum of sides.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/319", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\nvector<string> findLongWord(string text) {\n", "entry_point": "findLongWord", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = findLongWord(string(\"Please move back to strem\"));\n    if (!(compare(x0, {string(\"strem\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = findLongWord(string(\"4K Ultra HD streaming player\"));\n    if (!(compare(x1, {string(\"Ultra\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = findLongWord(string(\"Streaming Media Player\"));\n    if (!(compare(x2, {string(\"Media\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find all five characters long word in the given string by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/320", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n */\nint sumDifference(int n) {\n", "entry_point": "sumDifference", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumDifference(12);\n    if (!(compare(x0, 5434))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumDifference(20);\n    if (!(compare(x1, 41230))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumDifference(54);\n    if (!(compare(x2, 2151270))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/321", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the demlo number for the given number.\n */\nstring findDemlo(string s) {\n", "entry_point": "findDemlo", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = findDemlo(string(\"111111\"));\n    if (!(compare(x0, string(\"12345654321\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = findDemlo(string(\"1111\"));\n    if (!(compare(x1, string(\"1234321\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = findDemlo(string(\"13333122222\"));\n    if (!(compare(x2, string(\"123456789101110987654321\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the demlo number for the given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/322", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all index positions of the minimum values in a given list.\n */\nvector<int> positionMin(vector<int> list1) {\n", "entry_point": "positionMin", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = positionMin(vector<int>{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54});\n    if (!(compare(x0, {3, 11}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = positionMin(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5});\n    if (!(compare(x1, {0}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = positionMin(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12});\n    if (!(compare(x2, {1}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find all index positions of the minimum values in a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/323", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to re-arrange the given array in alternating positive and negative items.\n */\nvector<int> reArrange(vector<int> arr, int n) {\n", "entry_point": "reArrange", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = reArrange(vector<int>{-5, -2, 5, 2, 4, 7, 1, 8, 0, -8}, 10);\n    if (!(compare(x0, {-5, 5, -2, 2, -8, 4, 7, 1, 8, 0}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = reArrange(vector<int>{1, 2, 3, -4, -1, 4}, 6);\n    if (!(compare(x1, {-4, 1, -1, 2, 3, 4}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = reArrange(vector<int>{4, 7, 9, 77, -4, 5, -3, -9}, 8);\n    if (!(compare(x2, {-4, 4, -3, 7, -9, 9, 77, 5}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to re-arrange the given array in alternating positive and negative items.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/324", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the sum of alternate chains of tuples.\n */\nvector<int> sumOfAlternates(vector<int> testTuple) {\n", "entry_point": "sumOfAlternates", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = sumOfAlternates(vector<int>{5, 6, 3, 6, 10, 34});\n    if (!(compare(x0, {46, 18}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = sumOfAlternates(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x1, {6, 9}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = sumOfAlternates(vector<int>{6, 7, 8, 9, 4, 5});\n    if (!(compare(x2, {21, 18}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract the sum of alternate chains of tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/325", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum number of squares whose sum is equal to a given number.\n */\nint getMinSquares(int n) {\n", "entry_point": "getMinSquares", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getMinSquares(6);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getMinSquares(2);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getMinSquares(4);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the minimum number of squares whose sum is equal to a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/326", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the word with most number of occurrences in the given strings list.\n */\nstring mostOccurrences(vector<string> testList) {\n", "entry_point": "mostOccurrences", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = mostOccurrences(vector<string>{string(\"UTS is best for RTF\"), string(\"RTF love UTS\"), string(\"UTS is best\")});\n    if (!(compare(x0, string(\"UTS\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = mostOccurrences(vector<string>{string(\"Its been a great year\"), string(\"this year is so worse\"), string(\"this year is okay\")});\n    if (!(compare(x1, string(\"year\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = mostOccurrences(vector<string>{string(\"Families can be reunited\"), string(\"people can be reunited\"), string(\"Tasks can be achieved \")});\n    if (!(compare(x2, string(\"can\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to get the word with most number of occurrences in the given strings list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/327", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print check if the triangle is isosceles or not.\n */\nbool checkIsosceles(int x, int y, int z) {\n", "entry_point": "checkIsosceles", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkIsosceles(6, 8, 12);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkIsosceles(6, 6, 12);\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkIsosceles(6, 16, 20);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to print check if the triangle is isosceles or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/328", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to rotate a given list by specified number of items to the left direction.\n */\nvector<int> rotateLeft(vector<int> list1, int m, int n) {\n", "entry_point": "rotateLeft", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3, 4);\n    if (!(compare(x0, {4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2, 2);\n    if (!(compare(x1, {3, 4, 5, 6, 7, 8, 9, 10, 1, 2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5, 2);\n    if (!(compare(x2, {6, 7, 8, 9, 10, 1, 2}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to rotate a given list by specified number of items to the left direction.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/329", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count negative numbers in a list.\n */\nint negCount(vector<int> list) {\n", "entry_point": "negCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = negCount(vector<int>{-1, -2, 3, -4, -5});\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = negCount(vector<int>{1, 2, 3});\n    if (!(compare(x1, 0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = negCount(vector<int>{1, 2, -3, -10, 20});\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count negative numbers in a list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/330", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all three, four, five characters long words in the given string by using regex.\n */\nvector<string> findChar(string text) {\n", "entry_point": "findChar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = findChar(string(\"For the four consumer complaints contact manager AKR reddy\"));\n    if (!(compare(x0, {string(\"For\"), string(\"the\"), string(\"four\"), string(\"AKR\"), string(\"reddy\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = findChar(string(\"Certain service are subject to change MSR\"));\n    if (!(compare(x1, {string(\"are\"), string(\"MSR\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = findChar(string(\"Third party legal desclaimers\"));\n    if (!(compare(x2, {string(\"Third\"), string(\"party\"), string(\"legal\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find all three, four, five characters long words in the given string by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/331", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count unset bits of a given number.\n */\nint countUnsetBits(int n) {\n", "entry_point": "countUnsetBits", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countUnsetBits(2);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countUnsetBits(4);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countUnsetBits(6);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count unset bits of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/332", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count character frequency of a given string.\n */\nunordered_map<string, int> charFrequency(string str1) {\n", "entry_point": "charFrequency", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<string, int> x0 = charFrequency(string(\"python\"));\n    if (!(compare(x0, {{string(\"p\"), 1}, {string(\"y\"), 1}, {string(\"t\"), 1}, {string(\"h\"), 1}, {string(\"o\"), 1}, {string(\"n\"), 1}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<string, int> x1 = charFrequency(string(\"program\"));\n    if (!(compare(x1, {{string(\"p\"), 1}, {string(\"r\"), 2}, {string(\"o\"), 1}, {string(\"g\"), 1}, {string(\"a\"), 1}, {string(\"m\"), 1}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<string, int> x2 = charFrequency(string(\"language\"));\n    if (!(compare(x2, {{string(\"l\"), 1}, {string(\"a\"), 2}, {string(\"n\"), 1}, {string(\"g\"), 2}, {string(\"u\"), 1}, {string(\"e\"), 1}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count character frequency of a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/334", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the triangle is valid or not if sides are given.\n */\nbool checkValidity(int a, int b, int c) {\n", "entry_point": "checkValidity", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkValidity(1, 2, 3);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkValidity(2, 3, 5);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkValidity(7, 10, 5);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the triangle is valid or not if sides are given.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/335", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of arithmetic progression.\n */\nint apSum(int a, int n, int d) {\n", "entry_point": "apSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = apSum(1, 5, 2);\n    if (!(compare(x0, 25))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = apSum(2, 6, 4);\n    if (!(compare(x1, 72))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = apSum(1, 4, 5);\n    if (!(compare(x2, 34))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the sum of arithmetic progression.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/336", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month name contains 28 days or not.\n */\nbool checkMonthnum(string monthname1) {\n", "entry_point": "checkMonthnum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkMonthnum(string(\"February\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkMonthnum(string(\"January\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkMonthnum(string(\"March\"));\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether the given month name contains 28 days or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/337", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word at the end of a string, with optional punctuation.\n */\nstring textMatchWord(string text) {\n", "entry_point": "textMatchWord", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatchWord(string(\"python.\"));\n    if (!(compare(x0, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatchWord(string(\"python.\"));\n    if (!(compare(x1, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatchWord(string(\"  lang  .\"));\n    if (!(compare(x2, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function that matches a word at the end of a string, with optional punctuation.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/338", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of substrings with same first and last characters.\n */\nint countSubstringWithEqualEnds(string s) {\n", "entry_point": "countSubstringWithEqualEnds", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSubstringWithEqualEnds(string(\"aba\"));\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSubstringWithEqualEnds(string(\"abcab\"));\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSubstringWithEqualEnds(string(\"abc\"));\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the number of substrings with same first and last characters.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/339", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum occuring divisor in an interval.\n */\nint findDivisor(int x, int y) {\n", "entry_point": "findDivisor", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findDivisor(2, 2);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findDivisor(2, 5);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findDivisor(5, 10);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the maximum occuring divisor in an interval.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/340", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of the three lowest positive numbers from a given list of numbers.\n */\nint sumThreeSmallestNums(vector<int> lst) {\n", "entry_point": "sumThreeSmallestNums", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumThreeSmallestNums(vector<int>{10, 20, 30, 40, 50, 60, 7});\n    if (!(compare(x0, 37))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumThreeSmallestNums(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumThreeSmallestNums(vector<int>{0, 1, 2, 3, 4, 5});\n    if (!(compare(x2, 6))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of the three lowest positive numbers from a given list of numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/341", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given set into tuples.\n */\nvector<int> setToTuple(unordered_set<int> s) {\n", "entry_point": "setToTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = setToTuple(unordered_set<int>{1, 2, 3, 4, 5});\n    if (!(compare(x0, {1, 2, 3, 4, 5}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = setToTuple(unordered_set<int>{6, 7, 8, 9, 10, 11});\n    if (!(compare(x1, {6, 7, 8, 9, 10, 11}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = setToTuple(unordered_set<int>{12, 13, 14, 15, 16});\n    if (!(compare(x2, {12, 13, 14, 15, 16}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert the given set into tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/342", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */\nvector<int> findMinimumRange(vector<vector<int>> list) {\n", "entry_point": "findMinimumRange", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = findMinimumRange(vector<vector<int>>{{3, 6, 8, 10, 15}, {1, 5, 12}, {4, 8, 15, 16}, {2, 6}});\n    if (!(compare(x0, {4, 6}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = findMinimumRange(vector<vector<int>>{{2, 3, 4, 8, 10, 15}, {1, 5, 12}, {7, 8, 15, 16}, {3, 6}});\n    if (!(compare(x1, {4, 7}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = findMinimumRange(vector<vector<int>>{{4, 7, 9, 11, 16}, {2, 6, 13}, {5, 9, 16, 17}, {3, 7}});\n    if (!(compare(x2, {5, 7}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/343", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the number of digits and letters in a string.\n */\nvector<int> digLet(string s) {\n", "entry_point": "digLet", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = digLet(string(\"python\"));\n    if (!(compare(x0, {6, 0}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = digLet(string(\"program\"));\n    if (!(compare(x1, {7, 0}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = digLet(string(\"python3.0\"));\n    if (!(compare(x2, {6, 2}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the number of digits and letters in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/344", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find number of elements with odd factors in a given range.\n */\nint countOddSquares(int n, int m) {\n", "entry_point": "countOddSquares", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countOddSquares(5, 100);\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countOddSquares(8, 65);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countOddSquares(2, 5);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find number of elements with odd factors in a given range.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/345", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the difference between two consecutive numbers in a given list.\n */\nvector<int> diffConsecutivenums(vector<int> nums) {\n", "entry_point": "diffConsecutivenums", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = diffConsecutivenums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7});\n    if (!(compare(x0, {0, 2, 1, 0, 1, 1, 1}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = diffConsecutivenums(vector<int>{4, 5, 8, 9, 6, 10});\n    if (!(compare(x1, {1, 3, 1, -3, 4}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = diffConsecutivenums(vector<int>{0, 1, 2, 3, 4, 4, 4, 4, 5, 7});\n    if (!(compare(x2, {1, 1, 1, 1, 0, 0, 0, 1, 2}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the difference between two consecutive numbers in a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/346", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find entringer number e(n, k).\n */\nint zigzag(int n, int k) {\n", "entry_point": "zigzag", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = zigzag(4, 3);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = zigzag(4, 2);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = zigzag(3, 1);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find entringer number e(n, k).", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/347", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of squares in a rectangle.\n */\nint countSquares(int m, int n) {\n", "entry_point": "countSquares", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSquares(4, 3);\n    if (!(compare(x0, 20))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSquares(1, 2);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSquares(2, 2);\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the number of squares in a rectangle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/348", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n */\nint findWays(int m) {\n", "entry_point": "findWays", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findWays(4);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findWays(6);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findWays(8);\n    if (!(compare(x2, 14))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/349", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given string is a binary string or not.\n */\nstring check(string str) {\n", "entry_point": "check", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = check(string(\"01010101010\"));\n    if (!(compare(x0, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = check(string(\"name0\"));\n    if (!(compare(x1, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = check(string(\"101\"));\n    if (!(compare(x2, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given string is a binary string or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/350", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to minimize the length of the string by removing occurrence of only one character.\n */\nint minimumLength(string s) {\n", "entry_point": "minimumLength", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minimumLength(string(\"mnm\"));\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minimumLength(string(\"abcda\"));\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minimumLength(string(\"abcb\"));\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to minimize the length of the string by removing occurrence of only one character.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/351", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first element occurring k times in a given array.\n */\nint firstElement(vector<int> arr, int n, int k) {\n", "entry_point": "firstElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = firstElement(vector<int>{0, 1, 2, 3, 4, 5}, 6, 1);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = firstElement(vector<int>{1, 2, 1, 3, 4}, 5, 2);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = firstElement(vector<int>{2, 3, 4, 3, 5, 7, 1, 2, 3, 5}, 10, 2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the first element occurring k times in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/352", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the characters in a given string are unique.\n */\nbool uniqueCharacters(string str) {\n", "entry_point": "uniqueCharacters", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = uniqueCharacters(string(\"aba\"));\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = uniqueCharacters(string(\"abc\"));\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = uniqueCharacters(string(\"abab\"));\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether all the characters in a given string are unique.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/353", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove a specified column from a given nested list.\n */\nvector<vector<int>> removeColumn(vector<vector<int>> list1, int n) {\n", "entry_point": "removeColumn", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = removeColumn(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}, 0);\n    if (!(compare(x0, {{2, 3}, {4, 5}, {1, 1}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = removeColumn(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}, 2);\n    if (!(compare(x1, {{1, 2}, {-2, 4}, {1, -1}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = removeColumn(vector<vector<int>>{{1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11}}, 0);\n    if (!(compare(x2, {{3}, {7}, {3}, {15, 17}, {7}, {11}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove a specified column from a given nested list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/354", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find t-nth term of arithemetic progression.\n */\nint tnAp(int a, int n, int d) {\n", "entry_point": "tnAp", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = tnAp(1, 5, 2);\n    if (!(compare(x0, 9))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = tnAp(2, 6, 4);\n    if (!(compare(x1, 22))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = tnAp(1, 4, 5);\n    if (!(compare(x2, 16))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find t-nth term of arithemetic progression.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/355", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of rectangles in a circle of radius r.\n */\nint countRectangles(int radius) {\n", "entry_point": "countRectangles", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countRectangles(2);\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countRectangles(1);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countRectangles(0);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the number of rectangles in a circle of radius r.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/356", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the third angle of a triangle using two angles.\n */\nint findAngle(int a, int b) {\n", "entry_point": "findAngle", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findAngle(47, 89);\n    if (!(compare(x0, 44))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findAngle(45, 95);\n    if (!(compare(x1, 40))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findAngle(50, 40);\n    if (!(compare(x2, 90))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the third angle of a triangle using two angles.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/357", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum element of all the given tuple records.\n */\nint findMax(vector<vector<int>> testList) {\n", "entry_point": "findMax", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMax(vector<vector<int>>{{2, 4}, {6, 7}, {5, 1}, {6, 10}, {8, 7}});\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMax(vector<vector<int>>{{3, 5}, {7, 8}, {6, 2}, {7, 11}, {9, 8}});\n    if (!(compare(x1, 11))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMax(vector<vector<int>>{{4, 6}, {8, 9}, {7, 3}, {8, 12}, {10, 9}});\n    if (!(compare(x2, 12))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum element of all the given tuple records.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/358", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find modulo division of two lists using map and lambda function.\n */\nvector<int> moddivList(vector<int> nums1, vector<int> nums2) {\n", "entry_point": "moddivList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = moddivList(vector<int>{4, 5, 6}, vector<int>{1, 2, 3});\n    if (!(compare(x0, {0, 1, 0}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = moddivList(vector<int>{3, 2}, vector<int>{1, 4});\n    if (!(compare(x1, {0, 2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = moddivList(vector<int>{90, 120}, vector<int>{50, 70});\n    if (!(compare(x2, {40, 50}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find modulo division of two lists using map and lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/359", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether one root of the quadratic equation is twice of the other or not.\n */\nstring checkSolution(int a, int b, int c) {\n", "entry_point": "checkSolution", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkSolution(1, 3, 2);\n    if (!(compare(x0, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkSolution(1, 2, 3);\n    if (!(compare(x1, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkSolution(1, -5, 6);\n    if (!(compare(x2, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether one root of the quadratic equation is twice of the other or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/360", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n\u2019th carol number.\n */\nint getCarol(int n) {\n", "entry_point": "getCarol", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getCarol(2);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getCarol(4);\n    if (!(compare(x1, 223))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getCarol(5);\n    if (!(compare(x2, 959))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the n\u2019th carol number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/363", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add the k elements to each element in the tuple.\n */\nvector<vector<int>> addKElement(vector<vector<int>> testList, int k) {\n", "entry_point": "addKElement", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = addKElement(vector<vector<int>>{{1, 3, 4}, {2, 4, 6}, {3, 8, 1}}, 4);\n    if (!(compare(x0, {{5, 7, 8}, {6, 8, 10}, {7, 12, 5}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = addKElement(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 8);\n    if (!(compare(x1, {{9, 10, 11}, {12, 13, 14}, {15, 16, 17}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = addKElement(vector<vector<int>>{{11, 12, 13}, {14, 15, 16}, {17, 18, 19}}, 9);\n    if (!(compare(x2, {{20, 21, 22}, {23, 24, 25}, {26, 27, 28}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to add the k elements to each element in the tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/364", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n */\nint minFlipToMakeStringAlternate(string str) {\n", "entry_point": "minFlipToMakeStringAlternate", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minFlipToMakeStringAlternate(string(\"0001010111\"));\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minFlipToMakeStringAlternate(string(\"001\"));\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minFlipToMakeStringAlternate(string(\"010111011\"));\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/365", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of digits of a given number.\n */\nint countDigit(int n) {\n", "entry_point": "countDigit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countDigit(12345);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countDigit(11223305);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countDigit(4123459);\n    if (!(compare(x2, 7))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the number of digits of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/366", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest product of the pair of adjacent elements from a given list of integers.\n */\nint adjacentNumProduct(vector<int> listNums) {\n", "entry_point": "adjacentNumProduct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = adjacentNumProduct(vector<int>{1, 2, 3, 4, 5, 6});\n    if (!(compare(x0, 30))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = adjacentNumProduct(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x1, 20))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = adjacentNumProduct(vector<int>{2, 3});\n    if (!(compare(x2, 6))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the largest product of the pair of adjacent elements from a given list of integers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/368", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to repeat the given tuple n times.\n */\nvector<vector<int>> repeatTuples(vector<int> testTup, int n) {\n", "entry_point": "repeatTuples", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = repeatTuples(vector<int>{1, 3}, 4);\n    if (!(compare(x0, {{1, 3}, {1, 3}, {1, 3}, {1, 3}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = repeatTuples(vector<int>{1, 2}, 3);\n    if (!(compare(x1, {{1, 2}, {1, 2}, {1, 2}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = repeatTuples(vector<int>{3, 4}, 5);\n    if (!(compare(x2, {{3, 4}, {3, 4}, {3, 4}, {3, 4}, {3, 4}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to repeat the given tuple n times.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/369", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of cuboid\n */\nint lateralsurfaceCuboid(int l, int w, int h) {\n", "entry_point": "lateralsurfaceCuboid", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = lateralsurfaceCuboid(8, 5, 6);\n    if (!(compare(x0, 156))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = lateralsurfaceCuboid(7, 9, 10);\n    if (!(compare(x1, 320))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = lateralsurfaceCuboid(10, 20, 30);\n    if (!(compare(x2, 1800))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the lateral surface area of cuboid", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/370", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a tuple by its float element.\n */\nvector<vector<string>> floatSort(vector<vector<string>> price) {\n", "entry_point": "floatSort", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<string>> x0 = floatSort(vector<vector<string>>{{string(\"item1\"), string(\"12.20\")}, {string(\"item2\"), string(\"15.10\")}, {string(\"item3\"), string(\"24.5\")}});\n    if (!(compare(x0, {{string(\"item3\"), string(\"24.5\")}, {string(\"item2\"), string(\"15.10\")}, {string(\"item1\"), string(\"12.20\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<string>> x1 = floatSort(vector<vector<string>>{{string(\"item1\"), string(\"15\")}, {string(\"item2\"), string(\"10\")}, {string(\"item3\"), string(\"20\")}});\n    if (!(compare(x1, {{string(\"item3\"), string(\"20\")}, {string(\"item1\"), string(\"15\")}, {string(\"item2\"), string(\"10\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<string>> x2 = floatSort(vector<vector<string>>{{string(\"item1\"), string(\"5\")}, {string(\"item2\"), string(\"10\")}, {string(\"item3\"), string(\"14\")}});\n    if (!(compare(x2, {{string(\"item3\"), string(\"14\")}, {string(\"item2\"), string(\"10\")}, {string(\"item1\"), string(\"5\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort a tuple by its float element.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/371", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest missing element in a sorted array.\n */\nint smallestMissing(vector<int> a, int leftElement, int rightElement) {\n", "entry_point": "smallestMissing", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = smallestMissing(vector<int>{0, 1, 2, 3, 4, 5, 6}, 0, 6);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = smallestMissing(vector<int>{0, 1, 2, 6, 9, 11, 15}, 0, 6);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = smallestMissing(vector<int>{1, 2, 3, 4, 6, 9, 11, 15}, 0, 7);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the smallest missing element in a sorted array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/372", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n */\nvector<int> heapAssending(vector<int> nums) {\n", "entry_point": "heapAssending", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = heapAssending(vector<int>{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1});\n    if (!(compare(x0, {1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = heapAssending(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58});\n    if (!(compare(x1, {14, 22, 25, 25, 35, 58, 65, 75, 85}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = heapAssending(vector<int>{1, 3, 5, 7, 9, 2, 4, 6, 8, 0});\n    if (!(compare(x2, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/373", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cuboid.\n */\nint volumeCuboid(int l, int w, int h) {\n", "entry_point": "volumeCuboid", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = volumeCuboid(1, 2, 3);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = volumeCuboid(5, 7, 9);\n    if (!(compare(x1, 315))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = volumeCuboid(10, 15, 21);\n    if (!(compare(x2, 3150))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the volume of a cuboid.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/374", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print all permutations of a given string including duplicates.\n */\nvector<string> permuteString(string str) {\n", "entry_point": "permuteString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = permuteString(string(\"ab\"));\n    if (!(compare(x0, {string(\"ab\"), string(\"ba\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = permuteString(string(\"abc\"));\n    if (!(compare(x1, {string(\"abc\"), string(\"bac\"), string(\"bca\"), string(\"acb\"), string(\"cab\"), string(\"cba\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = permuteString(string(\"abcd\"));\n    if (!(compare(x2, {string(\"abcd\"), string(\"bacd\"), string(\"bcad\"), string(\"bcda\"), string(\"acbd\"), string(\"cabd\"), string(\"cbad\"), string(\"cbda\"), string(\"acdb\"), string(\"cadb\"), string(\"cdab\"), string(\"cdba\"), string(\"abdc\"), string(\"badc\"), string(\"bdac\"), string(\"bdca\"), string(\"adbc\"), string(\"dabc\"), string(\"dbac\"), string(\"dbca\"), string(\"adcb\"), string(\"dacb\"), string(\"dcab\"), string(\"dcba\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to print all permutations of a given string including duplicates.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/375", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to round the given number to the nearest multiple of a specific number.\n */\nint roundNum(int n, int m) {\n", "entry_point": "roundNum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = roundNum(4722, 10);\n    if (!(compare(x0, 4720))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = roundNum(1111, 5);\n    if (!(compare(x1, 1110))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = roundNum(219, 2);\n    if (!(compare(x2, 218))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to round the given number to the nearest multiple of a specific number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/377", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove all occurrences of a character in a given string.\n */\nstring removeChar(string s, string c) {\n", "entry_point": "removeChar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeChar(string(\"aba\"), string(\"a\"));\n    if (!(compare(x0, string(\"b\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeChar(string(\"toggle\"), string(\"g\"));\n    if (!(compare(x1, string(\"tole\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeChar(string(\"aabbc\"), string(\"b\"));\n    if (!(compare(x2, string(\"aac\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to remove all occurrences of a character in a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/378", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to shift last element to first position in the given list.\n */\nvector<int> moveFirst(vector<int> testList) {\n", "entry_point": "moveFirst", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = moveFirst(vector<int>{1, 2, 3, 4});\n    if (!(compare(x0, {4, 1, 2, 3}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = moveFirst(vector<int>{0, 1, 2, 3});\n    if (!(compare(x1, {3, 0, 1, 2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = moveFirst(vector<int>{9, 8, 7, 1});\n    if (!(compare(x2, {1, 9, 8, 7}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to shift last element to first position in the given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/379", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cuboid.\n */\nint surfaceareaCuboid(int l, int w, int h) {\n", "entry_point": "surfaceareaCuboid", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = surfaceareaCuboid(1, 2, 3);\n    if (!(compare(x0, 22))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = surfaceareaCuboid(5, 7, 9);\n    if (!(compare(x1, 286))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = surfaceareaCuboid(10, 15, 21);\n    if (!(compare(x2, 1350))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the surface area of a cuboid.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/380", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to generate a two-dimensional array.\n */\nvector<vector<int>> multiList(int rownum, int colnum) {\n", "entry_point": "multiList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = multiList(3, 4);\n    if (!(compare(x0, {{0, 0, 0, 0}, {0, 1, 2, 3}, {0, 2, 4, 6}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = multiList(5, 7);\n    if (!(compare(x1, {{0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6}, {0, 2, 4, 6, 8, 10, 12}, {0, 3, 6, 9, 12, 15, 18}, {0, 4, 8, 12, 16, 20, 24}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = multiList(10, 15);\n    if (!(compare(x2, {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28}, {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42}, {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56}, {0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70}, {0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84}, {0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98}, {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112}, {0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to generate a two-dimensional array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/382", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of rotations in a circularly sorted array.\n */\nint findRotationCount(vector<int> a) {\n", "entry_point": "findRotationCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findRotationCount(vector<int>{8, 9, 10, 1, 2, 3, 4, 5, 6, 7});\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findRotationCount(vector<int>{8, 9, 10, 2, 5, 6});\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findRotationCount(vector<int>{2, 5, 6, 8, 9, 10});\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the number of rotations in a circularly sorted array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/383", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle all odd bits of a given number.\n */\nint evenBitToggleNumber(int n) {\n", "entry_point": "evenBitToggleNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = evenBitToggleNumber(10);\n    if (!(compare(x0, 15))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = evenBitToggleNumber(20);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = evenBitToggleNumber(30);\n    if (!(compare(x2, 11))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to toggle all odd bits of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/384", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of the smallest value in a given array.\n */\nint frequencyOfSmallest(int n, vector<int> arr) {\n", "entry_point": "frequencyOfSmallest", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = frequencyOfSmallest(5, vector<int>{1, 2, 3, 4, 3});\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = frequencyOfSmallest(7, vector<int>{3, 1, 2, 5, 6, 2, 3});\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = frequencyOfSmallest(7, vector<int>{3, 3, 6, 3, 7, 4, 9});\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the frequency of the smallest value in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/385", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th perrin number using recursion.\n */\nint getPerrin(int n) {\n", "entry_point": "getPerrin", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getPerrin(9);\n    if (!(compare(x0, 12))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getPerrin(4);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getPerrin(6);\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the n'th perrin number using recursion.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/386", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n */\nint swapCount(string s) {\n", "entry_point": "swapCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = swapCount(string(\"[]][][\"));\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = swapCount(string(\"[[][]]\"));\n    if (!(compare(x1, 0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = swapCount(string(\"[[][]]][\"));\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/387", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the hexadecimal number is even or odd.\n */\nstring evenOrOdd(string n) {\n", "entry_point": "evenOrOdd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = evenOrOdd(string(\"AB3454D\"));\n    if (!(compare(x0, string(\"Odd\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = evenOrOdd(string(\"ABC\"));\n    if (!(compare(x1, string(\"Even\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = evenOrOdd(string(\"AAD\"));\n    if (!(compare(x2, string(\"Odd\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the hexadecimal number is even or odd.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/388", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the highest power of 2 that is less than or equal to n.\n */\nint highestPowerOf2(int n) {\n", "entry_point": "highestPowerOf2", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = highestPowerOf2(10);\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = highestPowerOf2(19);\n    if (!(compare(x1, 16))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = highestPowerOf2(32);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the highest power of 2 that is less than or equal to n.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/389", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th lucas number.\n */\nint findLucas(int n) {\n", "entry_point": "findLucas", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findLucas(9);\n    if (!(compare(x0, 76))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findLucas(4);\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findLucas(3);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the n'th lucas number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/391", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert more than one list to nested dictionary.\n */\nvector<unordered_map<string, unordered_map<string, int>>> convertListDictionary(vector<string> l1, vector<string> l2, vector<int> l3) {\n", "entry_point": "convertListDictionary", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<unordered_map<string, unordered_map<string, int>>> x0 = convertListDictionary(vector<string>{string(\"S001\"), string(\"S002\"), string(\"S003\"), string(\"S004\")}, vector<string>{string(\"Adina Park\"), string(\"Leyton Marsh\"), string(\"Duncan Boyle\"), string(\"Saim Richards\")}, vector<int>{85, 98, 89, 92});\n    if (!(compare(x0, {{{string(\"S001\"), {{string(\"Adina Park\"), 85}}}}, {{string(\"S002\"), {{string(\"Leyton Marsh\"), 98}}}}, {{string(\"S003\"), {{string(\"Duncan Boyle\"), 89}}}}, {{string(\"S004\"), {{string(\"Saim Richards\"), 92}}}}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<unordered_map<string, unordered_map<string, int>>> x1 = convertListDictionary(vector<string>{string(\"abc\"), string(\"def\"), string(\"ghi\"), string(\"jkl\")}, vector<string>{string(\"python\"), string(\"program\"), string(\"language\"), string(\"programs\")}, vector<int>{100, 200, 300, 400});\n    if (!(compare(x1, {{{string(\"abc\"), {{string(\"python\"), 100}}}}, {{string(\"def\"), {{string(\"program\"), 200}}}}, {{string(\"ghi\"), {{string(\"language\"), 300}}}}, {{string(\"jkl\"), {{string(\"programs\"), 400}}}}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<unordered_map<string, unordered_map<string, int>>> x2 = convertListDictionary(vector<string>{string(\"A1\"), string(\"A2\"), string(\"A3\"), string(\"A4\")}, vector<string>{string(\"java\"), string(\"C\"), string(\"C++\"), string(\"DBMS\")}, vector<int>{10, 20, 30, 40});\n    if (!(compare(x2, {{{string(\"A1\"), {{string(\"java\"), 10}}}}, {{string(\"A2\"), {{string(\"C\"), 20}}}}, {{string(\"A3\"), {{string(\"C++\"), 30}}}}, {{string(\"A4\"), {{string(\"DBMS\"), 40}}}}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert more than one list to nested dictionary.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/392", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n */\nint getMaxSum(int n) {\n", "entry_point": "getMaxSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getMaxSum(60);\n    if (!(compare(x0, 106))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getMaxSum(10);\n    if (!(compare(x1, 12))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getMaxSum(2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/394", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if given tuple is distinct or not.\n */\nbool checkDistinct(vector<int> testTup) {\n", "entry_point": "checkDistinct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkDistinct(vector<int>{1, 4, 5, 6, 1, 4});\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkDistinct(vector<int>{1, 4, 5, 6});\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkDistinct(vector<int>{2, 3, 4, 5, 6});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if given tuple is distinct or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/396", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given string starts and ends with the same character or not using regex.\n */\nstring checkChar(string str) {\n", "entry_point": "checkChar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkChar(string(\"abba\"));\n    if (!(compare(x0, string(\"Valid\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkChar(string(\"a\"));\n    if (!(compare(x1, string(\"Valid\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkChar(string(\"abcd\"));\n    if (!(compare(x2, string(\"Invalid\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/397", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the median of three specific numbers.\n */\ndouble medianNumbers(int a, int b, int c) {\n", "entry_point": "medianNumbers", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = medianNumbers(25, 55, 65);\n    if (!(compare(x0, 55.0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = medianNumbers(20, 10, 30);\n    if (!(compare(x1, 20.0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = medianNumbers(15, 45, 75);\n    if (!(compare(x2, 45.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the median of three specific numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/398", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\nint sumOfDigits(vector<int> nums) {\n", "entry_point": "sumOfDigits", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumOfDigits(vector<int>{10, 2, 56});\n    if (!(compare(x0, 14))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x2 = sumOfDigits(vector<int>{10, 20, -4, 5, -70});\n    if (!(compare(x2, 19))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to compute the sum of digits of each number of a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/399", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n */\nvector<int> bitwiseXor(vector<int> testTup1, vector<int> testTup2) {\n", "entry_point": "bitwiseXor", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = bitwiseXor(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3});\n    if (!(compare(x0, {15, 6, 5, 10}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = bitwiseXor(vector<int>{11, 5, 7, 10}, vector<int>{6, 3, 4, 4});\n    if (!(compare(x1, {13, 6, 3, 14}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = bitwiseXor(vector<int>{12, 6, 8, 11}, vector<int>{7, 4, 5, 6});\n    if (!(compare(x2, {11, 2, 13, 13}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/400", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the frequency of unique tuples in the given list order irrespective.\n */\nint extractFreq(vector<vector<int>> testList) {\n", "entry_point": "extractFreq", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = extractFreq(vector<vector<int>>{{3, 4}, {1, 2}, {4, 3}, {5, 6}});\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = extractFreq(vector<vector<int>>{{4, 15}, {2, 3}, {5, 4}, {6, 7}});\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = extractFreq(vector<vector<int>>{{5, 16}, {2, 3}, {6, 5}, {6, 9}});\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/401", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n */\nvector<vector<int>> addNestedTuples(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\n", "entry_point": "addNestedTuples", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = addNestedTuples(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}});\n    if (!(compare(x0, {{7, 10}, {7, 14}, {3, 10}, {8, 13}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = addNestedTuples(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}});\n    if (!(compare(x1, {{9, 12}, {9, 16}, {5, 12}, {10, 15}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = addNestedTuples(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}});\n    if (!(compare(x2, {{11, 14}, {11, 18}, {7, 14}, {12, 17}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/402", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute the value of ncr%p.\n */\nint ncrModp(int n, int r, int p) {\n", "entry_point": "ncrModp", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = ncrModp(10, 2, 13);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = ncrModp(15, 12, 43);\n    if (!(compare(x1, 25))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = ncrModp(17, 9, 18);\n    if (!(compare(x2, 10))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to compute the value of ncr%p.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/403", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a url is valid or not using regex.\n */\nbool isValidUrl(string str) {\n", "entry_point": "isValidUrl", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isValidUrl(string(\"https://www.google.com\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isValidUrl(string(\"https:/www.gmail.com\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isValidUrl(string(\"https:// www.redit.com\"));\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if a url is valid or not using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/404", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum of two numbers.\n */\nint minimum(int a, int b) {\n", "entry_point": "minimum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minimum(1, 2);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minimum(-5, -4);\n    if (!(compare(x1, -5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minimum(0, 0);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the minimum of two numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/406", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the parity of a given number.\n */\nstring findParity(int x) {\n", "entry_point": "findParity", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = findParity(12);\n    if (!(compare(x0, string(\"Even Parity\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = findParity(7);\n    if (!(compare(x1, string(\"Odd Parity\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = findParity(10);\n    if (!(compare(x2, string(\"Even Parity\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the parity of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/408", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n */\nvector<vector<int>> kSmallestPairs(vector<int> nums1, vector<int> nums2, int k) {\n", "entry_point": "kSmallestPairs", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = kSmallestPairs(vector<int>{1, 3, 7}, vector<int>{2, 4, 6}, 2);\n    if (!(compare(x0, {{1, 2}, {1, 4}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = kSmallestPairs(vector<int>{1, 3, 7}, vector<int>{2, 4, 6}, 1);\n    if (!(compare(x1, {{1, 2}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = kSmallestPairs(vector<int>{1, 3, 7}, vector<int>{2, 4, 6}, 7);\n    if (!(compare(x2, {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/409", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum product from the pairs of tuples within a given list.\n */\nint minProductTuple(vector<vector<int>> list1) {\n", "entry_point": "minProductTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minProductTuple(vector<vector<int>>{{2, 7}, {2, 6}, {1, 8}, {4, 9}});\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minProductTuple(vector<vector<int>>{{10, 20}, {15, 2}, {5, 10}});\n    if (!(compare(x1, 30))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minProductTuple(vector<vector<int>>{{11, 44}, {10, 15}, {20, 5}, {12, 9}});\n    if (!(compare(x2, 100))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the minimum product from the pairs of tuples within a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/411", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given snake case string to camel case string by using regex.\n */\nstring snakeToCamel(string word) {\n", "entry_point": "snakeToCamel", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = snakeToCamel(string(\"android_tv\"));\n    if (!(compare(x0, string(\"AndroidTv\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = snakeToCamel(string(\"google_pixel\"));\n    if (!(compare(x1, string(\"GooglePixel\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = snakeToCamel(string(\"apple_watch\"));\n    if (!(compare(x2, string(\"AppleWatch\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert the given snake case string to camel case string by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/412", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove odd numbers from a given list.\n */\nvector<int> removeOdd(vector<int> l) {\n", "entry_point": "removeOdd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = removeOdd(vector<int>{1, 2, 3});\n    if (!(compare(x0, {2}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = removeOdd(vector<int>{2, 4, 6});\n    if (!(compare(x1, {2, 4, 6}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = removeOdd(vector<int>{10, 20, 3});\n    if (!(compare(x2, {10, 20}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to remove odd numbers from a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/414", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the value exists in a sequence or not.\n */\nbool overlapping(vector<int> list1, vector<int> list2) {\n", "entry_point": "overlapping", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = overlapping(vector<int>{1, 2, 3, 4, 5}, vector<int>{6, 7, 8, 9});\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = overlapping(vector<int>{1, 2, 3}, vector<int>{4, 5, 6});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = overlapping(vector<int>{1, 4, 5}, vector<int>{1, 4, 5});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the value exists in a sequence or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/415", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find a pair with highest product from a given array of integers.\n */\nvector<int> maxProduct(vector<int> arr) {\n", "entry_point": "maxProduct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = maxProduct(vector<int>{1, 2, 3, 4, 7, 0, 8, 4});\n    if (!(compare(x0, {7, 8}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = maxProduct(vector<int>{0, -1, -2, -4, 5, 0, -6});\n    if (!(compare(x1, {-4, -6}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = maxProduct(vector<int>{1, 2, 3});\n    if (!(compare(x2, {2, 3}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find a pair with highest product from a given array of integers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/416", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n */\nint breaksum(int n) {\n", "entry_point": "breaksum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = breaksum(12);\n    if (!(compare(x0, 13))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = breaksum(24);\n    if (!(compare(x1, 27))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = breaksum(23);\n    if (!(compare(x2, 23))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/417", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find common first element in given list of tuple.\n */\nvector<vector<string>> groupTuples(vector<vector<string>> input) {\n", "entry_point": "groupTuples", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<string>> x0 = groupTuples(vector<vector<string>>{{string(\"x\"), string(\"y\")}, {string(\"x\"), string(\"z\")}, {string(\"w\"), string(\"t\")}});\n    if (!(compare(x0, {{string(\"x\"), string(\"y\"), string(\"z\")}, {string(\"w\"), string(\"t\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<string>> x1 = groupTuples(vector<vector<string>>{{string(\"a\"), string(\"b\")}, {string(\"a\"), string(\"c\")}, {string(\"d\"), string(\"e\")}});\n    if (!(compare(x1, {{string(\"a\"), string(\"b\"), string(\"c\")}, {string(\"d\"), string(\"e\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<string>> x2 = groupTuples(vector<vector<string>>{{string(\"f\"), string(\"g\")}, {string(\"f\"), string(\"g\")}, {string(\"h\"), string(\"i\")}});\n    if (!(compare(x2, {{string(\"f\"), string(\"g\"), string(\"g\")}, {string(\"h\"), string(\"i\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find common first element in given list of tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/419", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */\nint roundAndSum(vector<double> list1) {\n", "entry_point": "roundAndSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = roundAndSum(vector<double>{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5});\n    if (!(compare(x0, 243))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x2 = roundAndSum(vector<double>{25.0, 56.7, 89.2});\n    if (!(compare(x2, 513))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/420", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the cube sum of first n even natural numbers.\n */\nint cubeSum(int n) {\n", "entry_point": "cubeSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = cubeSum(2);\n    if (!(compare(x0, 72))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = cubeSum(3);\n    if (!(compare(x1, 288))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = cubeSum(4);\n    if (!(compare(x2, 800))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the cube sum of first n even natural numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/423", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to solve gold mine problem.\n */\nint getMaxgold(vector<vector<int>> gold, int m, int n) {\n", "entry_point": "getMaxgold", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getMaxgold(vector<vector<int>>{{1, 3, 1, 5}, {2, 2, 4, 1}, {5, 0, 2, 3}, {0, 6, 1, 2}}, 4, 4);\n    if (!(compare(x0, 16))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getMaxgold(vector<vector<int>>{{10, 20}, {30, 40}}, 2, 2);\n    if (!(compare(x1, 70))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getMaxgold(vector<vector<int>>{{4, 9}, {3, 7}}, 2, 2);\n    if (!(compare(x2, 13))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to solve gold mine problem.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/424", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract only the rear index element of each string in the given tuple.\n */\nvector<string> extractRear(vector<string> testTuple) {\n", "entry_point": "extractRear", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = extractRear(vector<string>{string(\"Mers\"), string(\"for\"), string(\"Vers\")});\n    if (!(compare(x0, {string(\"s\"), string(\"r\"), string(\"s\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = extractRear(vector<string>{string(\"Avenge\"), string(\"for\"), string(\"People\")});\n    if (!(compare(x1, {string(\"e\"), string(\"r\"), string(\"e\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = extractRear(vector<string>{string(\"Gotta\"), string(\"get\"), string(\"go\")});\n    if (!(compare(x2, {string(\"a\"), string(\"t\"), string(\"o\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract only the rear index element of each string in the given tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/426", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter odd numbers using lambda function.\n */\nvector<int> filterOddnumbers(vector<int> nums) {\n", "entry_point": "filterOddnumbers", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = filterOddnumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    if (!(compare(x0, {1, 3, 5, 7, 9}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = filterOddnumbers(vector<int>{10, 20, 45, 67, 84, 93});\n    if (!(compare(x1, {45, 67, 93}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = filterOddnumbers(vector<int>{5, 7, 9, 8, 6, 4, 3});\n    if (!(compare(x2, {5, 7, 9, 3}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to filter odd numbers using lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/427", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n */\nstring changeDateFormat(string dt) {\n", "entry_point": "changeDateFormat", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = changeDateFormat(string(\"2026-01-02\"));\n    if (!(compare(x0, string(\"02-01-2026\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = changeDateFormat(string(\"2020-11-13\"));\n    if (!(compare(x1, string(\"13-11-2020\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = changeDateFormat(string(\"2021-04-26\"));\n    if (!(compare(x2, string(\"26-04-2021\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/428", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using shell sort.\n */\nvector<int> shellSort(vector<int> myList) {\n", "entry_point": "shellSort", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = shellSort(vector<int>{12, 23, 4, 5, 3, 2, 12, 81, 56, 95});\n    if (!(compare(x0, {2, 3, 4, 5, 12, 12, 23, 56, 81, 95}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = shellSort(vector<int>{24, 22, 39, 34, 87, 73, 68});\n    if (!(compare(x1, {22, 24, 34, 39, 68, 73, 87}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = shellSort(vector<int>{32, 30, 16, 96, 82, 83, 74});\n    if (!(compare(x2, {16, 30, 32, 74, 82, 83, 96}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort the given array by using shell sort.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/429", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the elementwise and tuples from the given two tuples.\n */\nvector<int> andTuples(vector<int> testTup1, vector<int> testTup2) {\n", "entry_point": "andTuples", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = andTuples(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3});\n    if (!(compare(x0, {0, 0, 2, 1}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = andTuples(vector<int>{1, 2, 3, 4}, vector<int>{5, 6, 7, 8});\n    if (!(compare(x1, {1, 2, 3, 0}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = andTuples(vector<int>{8, 9, 11, 12}, vector<int>{7, 13, 14, 17});\n    if (!(compare(x2, {0, 9, 10, 0}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract the elementwise and tuples from the given two tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/430", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the directrix of a parabola.\n */\nint parabolaDirectrix(int a, int b, int c) {\n", "entry_point": "parabolaDirectrix", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = parabolaDirectrix(5, 3, 2);\n    if (!(compare(x0, -198))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = parabolaDirectrix(9, 8, 4);\n    if (!(compare(x1, -2336))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = parabolaDirectrix(2, 4, 6);\n    if (!(compare(x2, -130))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the directrix of a parabola.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/433", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the entered number is greater than the elements of the given array.\n */\nstring checkGreater(vector<int> arr, int number) {\n", "entry_point": "checkGreater", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkGreater(vector<int>{1, 2, 3, 4, 5}, 4);\n    if (!(compare(x0, string(\"No, entered number is less than those in the array\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkGreater(vector<int>{2, 3, 4, 5, 6}, 8);\n    if (!(compare(x1, string(\"Yes, the entered number is greater than those in the array\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkGreater(vector<int>{9, 7, 4, 8, 6, 1}, 11);\n    if (!(compare(x2, string(\"Yes, the entered number is greater than those in the array\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether the entered number is greater than the elements of the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/434", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\nstring textMatchOne(string text) {\n", "entry_point": "textMatchOne", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatchOne(string(\"ac\"));\n    if (!(compare(x0, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatchOne(string(\"dc\"));\n    if (!(compare(x1, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatchOne(string(\"abba\"));\n    if (!(compare(x2, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function that matches a string that has an a followed by one or more b's.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/435", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last digit of a given number.\n */\nint lastDigit(int n) {\n", "entry_point": "lastDigit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = lastDigit(123);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = lastDigit(25);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = lastDigit(30);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the last digit of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/436", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to print negative numbers in a list.\n */\nvector<int> negNos(vector<int> list1) {\n", "entry_point": "negNos", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = negNos(vector<int>{-1, 4, 5, -6});\n    if (!(compare(x0, {-1, -6}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = negNos(vector<int>{-1, -2, 3, 4});\n    if (!(compare(x1, {-1, -2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = negNos(vector<int>{-7, -6, 8, 9});\n    if (!(compare(x2, {-7, -6}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to print negative numbers in a list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/437", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove odd characters in a string.\n */\nstring removeOdd(string str1) {\n", "entry_point": "removeOdd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeOdd(string(\"python\"));\n    if (!(compare(x0, string(\"yhn\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeOdd(string(\"program\"));\n    if (!(compare(x1, string(\"rga\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeOdd(string(\"language\"));\n    if (!(compare(x2, string(\"agae\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove odd characters in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/438", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count bidirectional tuple pairs.\n */\nstring countBidirectional(vector<vector<int>> testList) {\n", "entry_point": "countBidirectional", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = countBidirectional(vector<vector<int>>{{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}});\n    if (!(compare(x0, string(\"3\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = countBidirectional(vector<vector<int>>{{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}});\n    if (!(compare(x1, string(\"2\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = countBidirectional(vector<vector<int>>{{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}});\n    if (!(compare(x2, string(\"4\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to count bidirectional tuple pairs.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/439", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a list of multiple integers into a single integer.\n */\nint multipleToSingle(vector<int> l) {\n", "entry_point": "multipleToSingle", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = multipleToSingle(vector<int>{11, 33, 50});\n    if (!(compare(x0, 113350))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = multipleToSingle(vector<int>{-1, 2, 3, 4, 5, 6});\n    if (!(compare(x1, -123456))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = multipleToSingle(vector<int>{10, 15, 20, 25});\n    if (!(compare(x2, 10152025))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert a list of multiple integers into a single integer.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/441", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cube.\n */\nint surfaceareaCube(int l) {\n", "entry_point": "surfaceareaCube", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = surfaceareaCube(5);\n    if (!(compare(x0, 150))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = surfaceareaCube(3);\n    if (!(compare(x1, 54))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = surfaceareaCube(10);\n    if (!(compare(x2, 600))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the surface area of a cube.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/442", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ration of positive numbers in an array of integers.\n */\ndouble positiveCount(vector<int> nums) {\n", "entry_point": "positiveCount", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = positiveCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8});\n    if (!(compare(x0, 0.54))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = positiveCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8});\n    if (!(compare(x1, 0.69))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = positiveCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17});\n    if (!(compare(x2, 0.56))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the ration of positive numbers in an array of integers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/443", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest negative number from the given list.\n */\nint largestNeg(vector<int> list1) {\n", "entry_point": "largestNeg", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = largestNeg(vector<int>{1, 2, 3, -4, -6});\n    if (!(compare(x0, -6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = largestNeg(vector<int>{1, 2, 3, -8, -9});\n    if (!(compare(x1, -9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = largestNeg(vector<int>{1, 2, 3, 4, -1});\n    if (!(compare(x2, -1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the largest negative number from the given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/444", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to trim each tuple by k in the given tuple list.\n */\nstring trimTuple(vector<vector<int>> testList, int k) {\n", "entry_point": "trimTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = trimTuple(vector<vector<int>>{{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 2);\n    if (!(compare(x0, string(\"[(2,), (9,), (2,), (2,)]\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = trimTuple(vector<vector<int>>{{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 1);\n    if (!(compare(x1, string(\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = trimTuple(vector<vector<int>>{{7, 8, 4, 9}, {11, 8, 12, 4}, {4, 1, 7, 8}, {3, 6, 9, 7}}, 1);\n    if (!(compare(x2, string(\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to trim each tuple by k in the given tuple list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/445", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n */\nvector<vector<int>> indexMultiplication(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\n", "entry_point": "indexMultiplication", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = indexMultiplication(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}});\n    if (!(compare(x0, {{6, 21}, {12, 45}, {2, 9}, {7, 30}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = indexMultiplication(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}});\n    if (!(compare(x1, {{14, 32}, {20, 60}, {6, 20}, {16, 44}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = indexMultiplication(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}});\n    if (!(compare(x2, {{24, 45}, {30, 77}, {12, 33}, {27, 60}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/447", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find cubes of individual elements in a list using lambda function.\n */\nvector<int> cubeNums(vector<int> nums) {\n", "entry_point": "cubeNums", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = cubeNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    if (!(compare(x0, {1, 8, 27, 64, 125, 216, 343, 512, 729, 1000}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = cubeNums(vector<int>{10, 20, 30});\n    if (!(compare(x1, {1000, 8000, 27000}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = cubeNums(vector<int>{12, 15});\n    if (!(compare(x2, {1728, 3375}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find cubes of individual elements in a list using lambda function.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/448", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of perrin numbers.\n */\nint calSum(int n) {\n", "entry_point": "calSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = calSum(9);\n    if (!(compare(x0, 49))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = calSum(10);\n    if (!(compare(x1, 66))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = calSum(11);\n    if (!(compare(x2, 88))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the sum of perrin numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/449", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the triangle is valid or not if 3 points are given.\n */\nstring checkTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n", "entry_point": "checkTriangle", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkTriangle(1, 5, 2, 5, 4, 6);\n    if (!(compare(x0, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkTriangle(1, 1, 1, 4, 1, 5);\n    if (!(compare(x1, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkTriangle(1, 1, 1, 1, 1, 1);\n    if (!(compare(x2, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the triangle is valid or not if 3 points are given.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/450", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract specified size of strings from a give list of string values.\n */\nvector<string> extractString(vector<string> str, int l) {\n", "entry_point": "extractString", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 8);\n    if (!(compare(x0, {string(\"practice\"), string(\"solution\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 6);\n    if (!(compare(x1, {string(\"Python\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 9);\n    if (!(compare(x2, {string(\"exercises\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to extract specified size of strings from a give list of string values.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/451", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all whitespaces from the given string using regex.\n */\nstring removeWhitespaces(string text1) {\n", "entry_point": "removeWhitespaces", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeWhitespaces(string(\" Google    Flutter \"));\n    if (!(compare(x0, string(\"GoogleFlutter\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeWhitespaces(string(\" Google    Dart \"));\n    if (!(compare(x1, string(\"GoogleDart\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeWhitespaces(string(\" iOS    Swift \"));\n    if (!(compare(x2, string(\"iOSSwift\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove all whitespaces from the given string using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/453", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of even factors of a number.\n */\nint sumoffactors(int n) {\n", "entry_point": "sumoffactors", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumoffactors(18);\n    if (!(compare(x0, 26))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumoffactors(30);\n    if (!(compare(x1, 48))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumoffactors(6);\n    if (!(compare(x2, 8))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of even factors of a number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/454", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word containing 'z'.\n */\nstring textMatchWordz(string text) {\n", "entry_point": "textMatchWordz", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatchWordz(string(\"pythonz.\"));\n    if (!(compare(x0, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatchWordz(string(\"xyz.\"));\n    if (!(compare(x1, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatchWordz(string(\"  lang  .\"));\n    if (!(compare(x2, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function that matches a word containing 'z'.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/455", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month number contains 31 days or not.\n */\nbool checkMonthnumbNumber(int monthnum2) {\n", "entry_point": "checkMonthnumbNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkMonthnumbNumber(5);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkMonthnumbNumber(2);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkMonthnumbNumber(6);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check whether the given month number contains 31 days or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/456", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to reverse strings in a given list of string values.\n */\nvector<string> reverseStringList(vector<string> stringlist) {\n", "entry_point": "reverseStringList", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = reverseStringList(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\"), string(\"White\"), string(\"Black\")});\n    if (!(compare(x0, {string(\"deR\"), string(\"neerG\"), string(\"eulB\"), string(\"etihW\"), string(\"kcalB\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = reverseStringList(vector<string>{string(\"john\"), string(\"amal\"), string(\"joel\"), string(\"george\")});\n    if (!(compare(x1, {string(\"nhoj\"), string(\"lama\"), string(\"leoj\"), string(\"egroeg\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = reverseStringList(vector<string>{string(\"jack\"), string(\"john\"), string(\"mary\")});\n    if (!(compare(x2, {string(\"kcaj\"), string(\"nhoj\"), string(\"yram\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to reverse strings in a given list of string values.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/458", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a rectangle.\n */\nint rectangleArea(int l, int b) {\n", "entry_point": "rectangleArea", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = rectangleArea(10, 20);\n    if (!(compare(x0, 200))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = rectangleArea(10, 5);\n    if (!(compare(x1, 50))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = rectangleArea(4, 2);\n    if (!(compare(x2, 8))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the area of a rectangle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/459", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove uppercase substrings from a given string by using regex.\n */\nstring removeUppercase(string str1) {\n", "entry_point": "removeUppercase", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeUppercase(string(\"cAstyoUrFavoRitETVshoWs\"));\n    if (!(compare(x0, string(\"cstyoravoitshos\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeUppercase(string(\"wAtchTheinTernEtrAdIo\"));\n    if (!(compare(x1, string(\"wtchheinerntrdo\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeUppercase(string(\"VoicESeaRchAndreComMendaTionS\"));\n    if (!(compare(x2, string(\"oiceachndreomendaion\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove uppercase substrings from a given string by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/460", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to get the first element of each sublist.\n */\nvector<int> extract(vector<vector<int>> lst) {\n", "entry_point": "extract", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = extract(vector<vector<int>>{{1, 2}, {3, 4, 5}, {6, 7, 8, 9}});\n    if (!(compare(x0, {1, 3, 6}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = extract(vector<vector<int>>{{1, 2, 3}, {4, 5}});\n    if (!(compare(x1, {1, 4}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = extract(vector<vector<int>>{{9, 8, 1}, {1, 2}});\n    if (!(compare(x2, {9, 1}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to get the first element of each sublist.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/461", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the upper case characters in a given string.\n */\nint upperCtr(string str) {\n", "entry_point": "upperCtr", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = upperCtr(string(\"PYthon\"));\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = upperCtr(string(\"BigData\"));\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = upperCtr(string(\"program\"));\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to count the upper case characters in a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/463", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product subarray of the given array.\n */\nint maxSubarrayProduct(vector<int> arr) {\n", "entry_point": "maxSubarrayProduct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSubarrayProduct(vector<int>{1, -2, -3, 0, 7, -8, -2});\n    if (!(compare(x0, 112))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSubarrayProduct(vector<int>{6, -3, -10, 0, 2});\n    if (!(compare(x1, 180))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSubarrayProduct(vector<int>{-2, -40, 0, -2, -3});\n    if (!(compare(x2, 80))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum product subarray of the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/464", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if all values are same in a dictionary.\n */\nbool checkValue(unordered_map<string, int> dict, int n) {\n", "entry_point": "checkValue", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 10);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 12);\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 5);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if all values are same in a dictionary.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/466", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the peak element in the given array.\n */\nint findPeak(vector<int> arr, int n) {\n", "entry_point": "findPeak", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findPeak(vector<int>{1, 3, 20, 4, 1, 0}, 6);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findPeak(vector<int>{2, 3, 4, 5, 6}, 5);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findPeak(vector<int>{8, 9, 11, 12, 14, 15}, 6);\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the peak element in the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/467", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert decimal number to octal number.\n */\nint decimalToOctal(int decinum) {\n", "entry_point": "decimalToOctal", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = decimalToOctal(10);\n    if (!(compare(x0, 12))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = decimalToOctal(2);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = decimalToOctal(33);\n    if (!(compare(x2, 41))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to convert decimal number to octal number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/468", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n */\nint maxProduct(vector<int> arr, int n) {\n", "entry_point": "maxProduct", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxProduct(vector<int>{3, 100, 4, 5, 150, 6}, 6);\n    if (!(compare(x0, 45000))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxProduct(vector<int>{4, 42, 55, 68, 80}, 5);\n    if (!(compare(x1, 50265600))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxProduct(vector<int>{10, 22, 9, 33, 21, 50, 41, 60}, 8);\n    if (!(compare(x2, 21780000))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/469", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum profit earned from a maximum of k stock transactions\n */\nint maxProfit(vector<int> price, int k) {\n", "entry_point": "maxProfit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxProfit(vector<int>{1, 5, 2, 3, 7, 6, 4, 5}, 3);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxProfit(vector<int>{2, 4, 7, 5, 4, 3, 5}, 2);\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxProfit(vector<int>{10, 6, 8, 4, 2}, 2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/470", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the pairwise addition of the elements of the given tuples.\n */\nvector<int> addPairwise(vector<int> testTup) {\n", "entry_point": "addPairwise", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = addPairwise(vector<int>{1, 5, 7, 8, 10});\n    if (!(compare(x0, {6, 12, 15, 18}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = addPairwise(vector<int>{2, 6, 8, 9, 11});\n    if (!(compare(x1, {8, 14, 17, 20}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = addPairwise(vector<int>{3, 7, 9, 10, 12});\n    if (!(compare(x2, {10, 16, 19, 22}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the pairwise addition of the elements of the given tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/471", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find remainder of array multiplication divided by n.\n */\nint findRemainder(vector<int> arr, int lens, int n) {\n", "entry_point": "findRemainder", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findRemainder(vector<int>{100, 10, 5, 25, 35, 14}, 6, 11);\n    if (!(compare(x0, 9))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findRemainder(vector<int>{1, 1, 1}, 3, 1);\n    if (!(compare(x1, 0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findRemainder(vector<int>{1, 2, 1}, 3, 2);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find remainder of array multiplication divided by n.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/472", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given list contains consecutive numbers or not.\n */\nbool checkConsecutive(vector<int> l) {\n", "entry_point": "checkConsecutive", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkConsecutive(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkConsecutive(vector<int>{1, 2, 3, 5, 6});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkConsecutive(vector<int>{1, 2, 1});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to check whether the given list contains consecutive numbers or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/474", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace characters in a string.\n */\nstring replaceChar(string str1, string ch, string newch) {\n", "entry_point": "replaceChar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = replaceChar(string(\"polygon\"), string(\"y\"), string(\"l\"));\n    if (!(compare(x0, string(\"pollgon\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = replaceChar(string(\"character\"), string(\"c\"), string(\"a\"));\n    if (!(compare(x1, string(\"aharaater\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = replaceChar(string(\"python\"), string(\"l\"), string(\"a\"));\n    if (!(compare(x2, string(\"python\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to replace characters in a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/476", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of the largest and smallest value in a given array.\n */\nint bigSum(vector<int> nums) {\n", "entry_point": "bigSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = bigSum(vector<int>{1, 2, 3});\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = bigSum(vector<int>{-1, 2, 3, 4});\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = bigSum(vector<int>{2, 3, 6});\n    if (!(compare(x2, 8))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the sum of the largest and smallest value in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/477", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert the given string to lower case.\n */\nstring isLower(string str) {\n", "entry_point": "isLower", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = isLower(string(\"InValid\"));\n    if (!(compare(x0, string(\"invalid\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = isLower(string(\"TruE\"));\n    if (!(compare(x1, string(\"true\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = isLower(string(\"SenTenCE\"));\n    if (!(compare(x2, string(\"sentence\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to convert the given string to lower case.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/478", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove lowercase substrings from a given string.\n */\nstring removeLowercase(string str1) {\n", "entry_point": "removeLowercase", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeLowercase(string(\"PYTHon\"));\n    if (!(compare(x0, string(\"PYTH\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeLowercase(string(\"FInD\"));\n    if (!(compare(x1, string(\"FID\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeLowercase(string(\"STRinG\"));\n    if (!(compare(x2, string(\"STRG\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove lowercase substrings from a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/479", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first digit of a given number.\n */\nint firstDigit(int n) {\n", "entry_point": "firstDigit", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = firstDigit(123);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = firstDigit(456);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = firstDigit(12);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the first digit of a given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/480", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum occurring character in a given string.\n */\nstring getMaxOccuringChar(string str1) {\n", "entry_point": "getMaxOccuringChar", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = getMaxOccuringChar(string(\"data\"));\n    if (!(compare(x0, string(\"a\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = getMaxOccuringChar(string(\"create\"));\n    if (!(compare(x1, string(\"e\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = getMaxOccuringChar(string(\"brilliant girl\"));\n    if (!(compare(x2, string(\"i\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the maximum occurring character in a given string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/481", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n */\nbool isSubsetSum(vector<int> set, int n, int sum) {\n", "entry_point": "isSubsetSum", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 9);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 30);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 15);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/482", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n */\nstring match(string text) {\n", "entry_point": "match", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = match(string(\"Geeks\"));\n    if (!(compare(x0, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = match(string(\"geeksforGeeks\"));\n    if (!(compare(x1, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = match(string(\"geeks\"));\n    if (!(compare(x2, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/483", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first natural number whose factorial is divisible by x.\n */\nint firstFactorialDivisibleNumber(int x) {\n", "entry_point": "firstFactorialDivisibleNumber", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = firstFactorialDivisibleNumber(10);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = firstFactorialDivisibleNumber(15);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = firstFactorialDivisibleNumber(5);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the first natural number whose factorial is divisible by x.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/484", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove the matching tuples from the given two tuples.\n */\nvector<vector<string>> removeMatchingTuple(vector<vector<string>> testList1, vector<vector<string>> testList2) {\n", "entry_point": "removeMatchingTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<string>> x0 = removeMatchingTuple(vector<vector<string>>{{string(\"Hello\"), string(\"dude\")}, {string(\"How\"), string(\"are\")}, {string(\"you\"), string(\"?\")}}, vector<vector<string>>{{string(\"Hello\"), string(\"dude\")}, {string(\"How\"), string(\"are\")}});\n    if (!(compare(x0, {{string(\"you\"), string(\"?\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<string>> x1 = removeMatchingTuple(vector<vector<string>>{{string(\"Part\"), string(\"of\")}, {string(\"the\"), string(\"journey\")}, {string(\"is \"), string(\"end\")}}, vector<vector<string>>{{string(\"Journey\"), string(\"the\")}, {string(\"is\"), string(\"end\")}});\n    if (!(compare(x1, {{string(\"Part\"), string(\"of\")}, {string(\"the\"), string(\"journey\")}, {string(\"is \"), string(\"end\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<string>> x2 = removeMatchingTuple(vector<vector<string>>{{string(\"Its\"), string(\"been\")}, {string(\"a\"), string(\"long\")}, {string(\"day\"), string(\"without\")}}, vector<vector<string>>{{string(\"a\"), string(\"long\")}, {string(\"my\"), string(\"friend\")}});\n    if (!(compare(x2, {{string(\"Its\"), string(\"been\")}, {string(\"day\"), string(\"without\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove the matching tuples from the given two tuples.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/485", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest palindromic number in the given array.\n */\nint largestPalindrome(vector<int> a, int n) {\n", "entry_point": "largestPalindrome", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = largestPalindrome(vector<int>{1, 232, 54545, 999991}, 4);\n    if (!(compare(x0, 54545))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = largestPalindrome(vector<int>{1, 2, 3, 4, 5, 50}, 6);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the largest palindromic number in the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/486", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute binomial probability for the given number.\n */\ndouble binomialProbability(int n, int k, double p) {\n", "entry_point": "binomialProbability", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = binomialProbability(10, 5, 0.3333333333333333);\n    if (!(compare(x0, 0.13656454808718185))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = binomialProbability(11, 6, 0.5);\n    if (!(compare(x1, 0.2255859375))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = binomialProbability(12, 7, 0.6);\n    if (!(compare(x2, 0.227030335488))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to compute binomial probability for the given number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/487", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n */\nvector<vector<int>> sortTuple(vector<vector<int>> tup) {\n", "entry_point": "sortTuple", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = sortTuple(vector<vector<int>>{{1, 3}, {3, 2}, {2, 1}});\n    if (!(compare(x0, {{2, 1}, {3, 2}, {1, 3}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = sortTuple(vector<vector<int>>{{2, 4}, {3, 3}, {1, 1}});\n    if (!(compare(x1, {{1, 1}, {3, 3}, {2, 4}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = sortTuple(vector<vector<int>>{{3, 9}, {6, 7}, {4, 3}});\n    if (!(compare(x2, {{4, 3}, {6, 7}, {3, 9}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/488", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a pentagon.\n */\ndouble areaPentagon(int a) {\n", "entry_point": "areaPentagon", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = areaPentagon(5);\n    if (!(compare(x0, 43.01193501472417))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = areaPentagon(10);\n    if (!(compare(x1, 172.0477400588967))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = areaPentagon(15);\n    if (!(compare(x2, 387.10741513251753))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the area of a pentagon.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/489", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of the largest value in a given array.\n */\nint frequencyOfLargest(int n, vector<int> arr) {\n", "entry_point": "frequencyOfLargest", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = frequencyOfLargest(5, vector<int>{1, 2, 3, 4, 4});\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = frequencyOfLargest(3, vector<int>{5, 6, 5});\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = frequencyOfLargest(4, vector<int>{2, 7, 7, 7});\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the frequency of the largest value in a given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/491", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of geometric progression series.\n */\nint sumGp(int a, int n, int r) {\n", "entry_point": "sumGp", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumGp(1, 5, 2);\n    if (!(compare(x0, 31))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumGp(1, 5, 4);\n    if (!(compare(x1, 341))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumGp(2, 6, 3);\n    if (!(compare(x2, 728))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the sum of geometric progression series.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/492", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search an element in the given array by using binary search.\n */\nbool binarySearch(vector<int> itemList, int item) {\n", "entry_point": "binarySearch", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = binarySearch(vector<int>{1, 2, 3, 5, 8}, 6);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = binarySearch(vector<int>{7, 8, 9, 10, 13}, 10);\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = binarySearch(vector<int>{11, 13, 14, 19, 22, 36}, 23);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to search an element in the given array by using binary search.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/493", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n */\nvector<vector<vector<double>>> calculatePolygons(int startx, int starty, int endx, int endy, int radius) {\n", "entry_point": "calculatePolygons", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<vector<double>>> x0 = calculatePolygons(1, 1, 4, 4, 3);\n    if (!(compare(x0, {{{-5.0, -4.196152422706632}, {-5.0, -0.7320508075688767}, {-2.0, 1.0}, {1.0, -0.7320508075688767}, {1.0, -4.196152422706632}, {-2.0, -5.928203230275509}, {-5.0, -4.196152422706632}}, {{1.0, -4.196152422706632}, {1.0, -0.7320508075688767}, {4.0, 1.0}, {7.0, -0.7320508075688767}, {7.0, -4.196152422706632}, {4.0, -5.928203230275509}, {1.0, -4.196152422706632}}, {{7.0, -4.196152422706632}, {7.0, -0.7320508075688767}, {10.0, 1.0}, {13.0, -0.7320508075688767}, {13.0, -4.196152422706632}, {10.0, -5.928203230275509}, {7.0, -4.196152422706632}}, {{-2.0, 1.0000000000000004}, {-2.0, 4.464101615137755}, {1.0, 6.196152422706632}, {4.0, 4.464101615137755}, {4.0, 1.0000000000000004}, {1.0, -0.7320508075688767}, {-2.0, 1.0000000000000004}}, {{4.0, 1.0000000000000004}, {4.0, 4.464101615137755}, {7.0, 6.196152422706632}, {10.0, 4.464101615137755}, {10.0, 1.0000000000000004}, {7.0, -0.7320508075688767}, {4.0, 1.0000000000000004}}, {{-5.0, 6.196152422706632}, {-5.0, 9.660254037844387}, {-2.0, 11.392304845413264}, {1.0, 9.660254037844387}, {1.0, 6.196152422706632}, {-2.0, 4.464101615137755}, {-5.0, 6.196152422706632}}, {{1.0, 6.196152422706632}, {1.0, 9.660254037844387}, {4.0, 11.392304845413264}, {7.0, 9.660254037844387}, {7.0, 6.196152422706632}, {4.0, 4.464101615137755}, {1.0, 6.196152422706632}}, {{7.0, 6.196152422706632}, {7.0, 9.660254037844387}, {10.0, 11.392304845413264}, {13.0, 9.660254037844387}, {13.0, 6.196152422706632}, {10.0, 4.464101615137755}, {7.0, 6.196152422706632}}, {{-2.0, 11.392304845413264}, {-2.0, 14.85640646055102}, {1.0, 16.588457268119896}, {4.0, 14.85640646055102}, {4.0, 11.392304845413264}, {1.0, 9.660254037844387}, {-2.0, 11.392304845413264}}, {{4.0, 11.392304845413264}, {4.0, 14.85640646055102}, {7.0, 16.588457268119896}, {10.0, 14.85640646055102}, {10.0, 11.392304845413264}, {7.0, 9.660254037844387}, {4.0, 11.392304845413264}}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<vector<double>>> x1 = calculatePolygons(5, 4, 7, 9, 8);\n    if (!(compare(x1, {{{-11.0, -9.856406460551018}, {-11.0, -0.6188021535170058}, {-3.0, 4.0}, {5.0, -0.6188021535170058}, {5.0, -9.856406460551018}, {-3.0, -14.475208614068023}, {-11.0, -9.856406460551018}}, {{5.0, -9.856406460551018}, {5.0, -0.6188021535170058}, {13.0, 4.0}, {21.0, -0.6188021535170058}, {21.0, -9.856406460551018}, {13.0, -14.475208614068023}, {5.0, -9.856406460551018}}, {{21.0, -9.856406460551018}, {21.0, -0.6188021535170058}, {29.0, 4.0}, {37.0, -0.6188021535170058}, {37.0, -9.856406460551018}, {29.0, -14.475208614068023}, {21.0, -9.856406460551018}}, {{-3.0, 4.0}, {-3.0, 13.237604307034012}, {5.0, 17.856406460551018}, {13.0, 13.237604307034012}, {13.0, 4.0}, {5.0, -0.6188021535170058}, {-3.0, 4.0}}, {{13.0, 4.0}, {13.0, 13.237604307034012}, {21.0, 17.856406460551018}, {29.0, 13.237604307034012}, {29.0, 4.0}, {21.0, -0.6188021535170058}, {13.0, 4.0}}, {{-11.0, 17.856406460551018}, {-11.0, 27.09401076758503}, {-3.0, 31.712812921102035}, {5.0, 27.09401076758503}, {5.0, 17.856406460551018}, {-3.0, 13.237604307034012}, {-11.0, 17.856406460551018}}, {{5.0, 17.856406460551018}, {5.0, 27.09401076758503}, {13.0, 31.712812921102035}, {21.0, 27.09401076758503}, {21.0, 17.856406460551018}, {13.0, 13.237604307034012}, {5.0, 17.856406460551018}}, {{21.0, 17.856406460551018}, {21.0, 27.09401076758503}, {29.0, 31.712812921102035}, {37.0, 27.09401076758503}, {37.0, 17.856406460551018}, {29.0, 13.237604307034012}, {21.0, 17.856406460551018}}, {{-3.0, 31.712812921102035}, {-3.0, 40.95041722813605}, {5.0, 45.569219381653056}, {13.0, 40.95041722813605}, {13.0, 31.712812921102035}, {5.0, 27.09401076758503}, {-3.0, 31.712812921102035}}, {{13.0, 31.712812921102035}, {13.0, 40.95041722813605}, {21.0, 45.569219381653056}, {29.0, 40.95041722813605}, {29.0, 31.712812921102035}, {21.0, 27.09401076758503}, {13.0, 31.712812921102035}}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<vector<double>>> x2 = calculatePolygons(9, 6, 4, 3, 2);\n    if (!(compare(x2, {{{5.0, 2.5358983848622456}, {5.0, 4.8452994616207485}, {7.0, 6.0}, {9.0, 4.8452994616207485}, {9.0, 2.5358983848622456}, {7.0, 1.3811978464829942}, {5.0, 2.5358983848622456}}, {{7.0, 6.0}, {7.0, 8.309401076758503}, {9.0, 9.464101615137753}, {11.0, 8.309401076758503}, {11.0, 6.0}, {9.0, 4.8452994616207485}, {7.0, 6.0}}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/494", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given binary tuple to integer.\n */\nstring binaryToInteger(vector<int> testTup) {\n", "entry_point": "binaryToInteger", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = binaryToInteger(vector<int>{1, 1, 0, 1, 0, 0, 1});\n    if (!(compare(x0, string(\"105\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = binaryToInteger(vector<int>{0, 1, 1, 0, 0, 1, 0, 1});\n    if (!(compare(x1, string(\"101\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = binaryToInteger(vector<int>{1, 1, 0, 1, 0, 1});\n    if (!(compare(x2, string(\"53\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to convert the given binary tuple to integer.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/495", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove lowercase substrings from a given string by using regex.\n */\nstring removeLowercase(string str1) {\n", "entry_point": "removeLowercase", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeLowercase(string(\"KDeoALOklOOHserfLoAJSIskdsf\"));\n    if (!(compare(x0, string(\"KDALOOOHLAJSI\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeLowercase(string(\"ProducTnamEstreAmIngMediAplAYer\"));\n    if (!(compare(x1, string(\"PTEAIMAAY\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeLowercase(string(\"maNufacTuredbYSheZenTechNolOGIes\"));\n    if (!(compare(x2, string(\"NTYSZTNOGI\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove lowercase substrings from a given string by using regex.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/496", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n */\nvector<int> heapQueueSmallest(vector<int> nums, int n) {\n", "entry_point": "heapQueueSmallest", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, 3);\n    if (!(compare(x0, {14, 22, 25}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, 2);\n    if (!(compare(x1, {14, 22}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5);\n    if (!(compare(x2, {14, 22, 22, 25, 35}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/497", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cone.\n */\ndouble surfaceareaCone(int r, int h) {\n", "entry_point": "surfaceareaCone", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = surfaceareaCone(5, 12);\n    if (!(compare(x0, 282.7433388230814))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = surfaceareaCone(10, 15);\n    if (!(compare(x1, 880.5179353159282))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = surfaceareaCone(19, 17);\n    if (!(compare(x2, 2655.923961165254))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the surface area of a cone.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/498", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find gcd of two positive integers.\n */\nint gcd(int x, int y) {\n", "entry_point": "gcd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = gcd(12, 17);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = gcd(4, 6);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = gcd(2, 9);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find gcd of two positive integers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/499", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the diameter of a circle.\n */\nint diameterCircle(int r) {\n", "entry_point": "diameterCircle", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = diameterCircle(10);\n    if (!(compare(x0, 20))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = diameterCircle(40);\n    if (!(compare(x1, 80))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = diameterCircle(15);\n    if (!(compare(x2, 30))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the diameter of a circle.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/500", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to concatenate all elements of the given list into a string.\n */\nstring concatenateElements(vector<string> list) {\n", "entry_point": "concatenateElements", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = concatenateElements(vector<string>{string(\"hello\"), string(\"there\"), string(\"have\"), string(\"a\"), string(\"rocky\"), string(\"day\")});\n    if (!(compare(x0, string(\"  hello there have a rocky day\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = concatenateElements(vector<string>{string(\"Hi\"), string(\"there\"), string(\"How\"), string(\"are\"), string(\"you\")});\n    if (!(compare(x1, string(\"  Hi there How are you\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = concatenateElements(vector<string>{string(\"Part\"), string(\"of\"), string(\"the\"), string(\"journey\"), string(\"is\"), string(\"end\")});\n    if (!(compare(x2, string(\"  Part of the journey is end\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to concatenate all elements of the given list into a string.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/501", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find common divisor between two numbers in a given pair.\n */\nint numCommDiv(int x, int y) {\n", "entry_point": "numCommDiv", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = numCommDiv(2, 4);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = numCommDiv(2, 8);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = numCommDiv(12, 24);\n    if (!(compare(x2, 6))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find common divisor between two numbers in a given pair.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/502", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find remainder of two numbers.\n */\nint find(int n, int m) {\n", "entry_point": "find", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = find(3, 3);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = find(10, 3);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = find(16, 5);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find remainder of two numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/503", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add consecutive numbers of a given list.\n */\nvector<int> addConsecutiveNums(vector<int> nums) {\n", "entry_point": "addConsecutiveNums", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = addConsecutiveNums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7});\n    if (!(compare(x0, {2, 4, 7, 8, 9, 11, 13}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = addConsecutiveNums(vector<int>{4, 5, 8, 9, 6, 10});\n    if (!(compare(x1, {9, 13, 17, 15, 16}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = addConsecutiveNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    if (!(compare(x2, {3, 5, 7, 9, 11, 13, 15, 17, 19}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to add consecutive numbers of a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/504", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the cube sum of first n natural numbers.\n */\nint sumOfSeries(int n) {\n", "entry_point": "sumOfSeries", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumOfSeries(5);\n    if (!(compare(x0, 225))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumOfSeries(2);\n    if (!(compare(x1, 9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumOfSeries(3);\n    if (!(compare(x2, 36))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the cube sum of first n natural numbers.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/505", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to move all zeroes to the end of the given array.\n */\nvector<int> reOrder(vector<int> a) {\n", "entry_point": "reOrder", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = reOrder(vector<int>{6, 0, 8, 2, 3, 0, 4, 0, 1});\n    if (!(compare(x0, {6, 8, 2, 3, 4, 1, 0, 0, 0}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = reOrder(vector<int>{4, 0, 2, 7, 0, 9, 0, 12, 0});\n    if (!(compare(x1, {4, 2, 7, 9, 12, 0, 0, 0, 0}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = reOrder(vector<int>{3, 11, 0, 74, 14, 0, 1, 0, 2});\n    if (!(compare(x2, {3, 11, 74, 14, 1, 2, 0, 0, 0}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to move all zeroes to the end of the given array.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/506", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the permutation coefficient of given p(n, k).\n */\nint permutationCoefficient(int n, int k) {\n", "entry_point": "permutationCoefficient", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = permutationCoefficient(10, 2);\n    if (!(compare(x0, 90))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = permutationCoefficient(10, 3);\n    if (!(compare(x1, 720))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = permutationCoefficient(10, 1);\n    if (!(compare(x2, 10))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to calculate the permutation coefficient of given p(n, k).", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/507", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove specific words from a given list.\n */\nvector<string> removeWords(vector<string> list1, vector<string> removewords) {\n", "entry_point": "removeWords", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"white\"), string(\"orange\")});\n    if (!(compare(x0, {string(\"red\"), string(\"green\"), string(\"blue\"), string(\"black\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"black\"), string(\"orange\")});\n    if (!(compare(x1, {string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"blue\"), string(\"white\")});\n    if (!(compare(x2, {string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to remove specific words from a given list.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/508", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the common elements between two given lists are in the same order or not.\n */\nbool sameOrder(vector<string> l1, vector<string> l2) {\n", "entry_point": "sameOrder", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = sameOrder(vector<string>{string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = sameOrder(vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")}, vector<string>{string(\"white\"), string(\"orange\"), string(\"pink\"), string(\"black\")});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = sameOrder(vector<string>{string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to check if the common elements between two given lists are in the same order or not.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/509", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the average of odd numbers till a given odd number.\n */\nint averageOdd(int n) {\n", "entry_point": "averageOdd", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = averageOdd(9);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = averageOdd(5);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = averageOdd(11);\n    if (!(compare(x2, 6))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a c++ function to find the average of odd numbers till a given odd number.", "language": "cpp", "canonical_solution": null}
{"task_id": "MBCPP/510", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n */\nint noOfSubsequences(vector<int> arr, int k) {\n", "entry_point": "noOfSubsequences", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = noOfSubsequences(vector<int>{1, 2, 3, 4}, 10);\n    if (!(compare(x0, 11))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = noOfSubsequences(vector<int>{4, 8, 7, 2}, 50);\n    if (!(compare(x1, 9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = noOfSubsequences(vector<int>{5, 6, 7, 8}, 15);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "description": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "language": "cpp", "canonical_solution": null}
